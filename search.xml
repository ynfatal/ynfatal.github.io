<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo GitHub 搭建个人博客</title>
      <link href="/2019/05/11/Hexo%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/11/Hexo%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        回了趟家，闲时在翻网站书签的时候，刚好翻到了<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a>。看到这个名字，我就想起来，前段时间本来想搭个博客，但是有点事情搁在一旁了，现在这两天刚好有空，于是咯…。经过四五天的百度和前辈们的经验，终于建成了~~ </p><p>希望能以此来激励自己学习</p><h2 id="痕迹"><a href="#痕迹" class="headerlink" title="痕迹"></a>痕迹</h2><p>下面是我百度过的痕迹，当然有些已经被删了，只剩这些了：</p><p><a href="http://tengj.top/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">hexo干货系列</a></p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p><p><a href="https://theme-next.org/docs/" target="_blank" rel="noopener">Hexo Docs</a></p><p><a href="https://blog.csdn.net/winter_chen001/article/details/79719154" target="_blank" rel="noopener">hexo categories和tags页面不显示解决办法</a></p><p><a href="https://blog.csdn.net/u012307002/article/details/51298705" target="_blank" rel="noopener">hexo文章中插入图片</a></p><p><a href="https://segmentfault.com/q/1010000008494901" target="_blank" rel="noopener">hexo的NexT主题，怎么取消“文章目录”对标题的自动编号？</a></p><p><a href="https://blog.csdn.net/qq_32454537/article/details/79482896" target="_blank" rel="noopener">https://blog.csdn.net/qq_32454537/article/details/79482896</a></p><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo的next主题个性化教程：打造炫酷网站</a></p><p><a href="https://mmmmmm.me/" target="_blank" rel="noopener">Leesin’s Blog</a></p><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型预览</a></p><p><a href="http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/" target="_blank" rel="noopener">标签云</a></p><p><a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">图片放大</a></p><p><a href="https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%EF%BC%89/" target="_blank" rel="noopener">代码块按钮复制找他</a></p><p><a href="https://www.e-learn.cn/content/wangluowenzhang/481525" target="_blank" rel="noopener">复制成功提示</a>（这个测过了，我去找了个jq <code>tooltip</code> 插件，但是jquery冲突了。。。你要是成功了可以告诉我，谢谢）</p><p><a href="https://www.thinkcmf.com/font/font_awesome/icons.html" target="_blank" rel="noopener">图标大全</a></p><p><a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">文章置顶</a></p><p><a href="https://theme-next.org/docs/tag-plugins/note" target="_blank" rel="noopener">note</a></p><p><a href="https://jinfagang.github.io/2018/10/07/%E7%BB%88%E4%BA%8E%EF%BC%81%EF%BC%81%EF%BC%81%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8B%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">Gitalk评论系统</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/09/hello-world/"/>
      <url>/2019/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> docer </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二篇：SpringBoot配置详解</title>
      <link href="/2018/09/20/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E7%AF%87%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/09/20/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E7%AF%87%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一篇介绍了 <code>SpringBoot</code> 由来及构建方式，通过第一章的教程我们对 <code>SpringBoot</code> 不在感到陌生，可以发现 <code>SpringBoot</code> 虽然干掉了 XML 但未做到 <strong>零配置</strong>，它体现出了一种 <strong>==约定优于配置，也称作按约定编程==，是一种软件设计范式，旨在减少软件开发人员需做决定的数量，这种方式简单又不失灵活。</strong> 一般情况下默认的配置足够满足日常开发所需，但在特殊的情况下，我们往往需要用到 <strong>自定义属性配置、自定义文件（配置文件）配置、多环境配置、外部命令引导</strong> 等一系列功能。不用担心，这些 <code>SpringBoot</code> 都替我们考虑好了，我们只需要遵循它的规则配置即可</p></blockquote><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h3 id="文件处理器的使用"><a href="#文件处理器的使用" class="headerlink" title="文件处理器的使用"></a>文件处理器的使用</h3><p>为了让 <code>Spring Boot</code> 更好的生成配置元数据文件，我们需要添加如下依赖（<strong>该依赖可以不添加，但是在 IDEA 和 STS 中不会有属性提示，没有提示的配置就跟你用记事本写代码一样苦逼，出个问题弄哭你去</strong>），该依赖只会在编译时调用，所以不用担心会对生产造成影响…</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- true表示两个项目之间依赖不传递;不写默认为false --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>自定义属性值</code>通过@ConfigurationProperties的<code>prefix</code>值绑定，自定义属性便可与类中的属性一样映射，如果导入配置文件处理器，那么在配置文件中就可以有<strong>提示</strong>了。</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图175711169894143.png" alt="360截图175711169894143"></p><p>效果</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17001020447867.png" alt="360截图17001020447867"></p><p><strong>注意</strong>：如果没有提示则重新 <strong>编译</strong> 一下即可</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17290429635664.png" alt="360截图17001020447867"></p><p>经测试，该处理器只对 <strong>application.yml</strong>、<strong>application.properties</strong> 有效，对如 <strong>test.properties</strong> 无效，所以当我们需要使用的时候，可以先用 <strong>application.properties</strong> 命名配置文件，写完改为 <code>xxx.properties</code> 即可。</p><p>（这方法看一下，可以在后面测试中使用，挺方便的）</p><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p><strong>SpringBoot</strong> 使用一个 <strong>全局</strong> 的配置文件，配置文件名是 <strong>固定</strong> 的；该配置文件可以对一些默认配置进行修改</p><h3 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h3><ul><li><strong>application.properties</strong></li><li><strong>application.yml</strong></li></ul><p>​      析：  <strong>yml</strong> 是 <strong>YAML</strong> （YAML Ain’t Markup Language）语言的文件，以数据为中心，比 <strong>json</strong>，<strong>xml</strong> 等更 <strong>适合</strong> 做配置文件。语法规范可参考 <a href="http://yaml.org/" target="_blank" rel="noopener">http://yaml.org/</a> </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>application.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8081</span><br></pre></td></tr></table></figure></li><li><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h2><h3 id="2-1、基本语法"><a href="#2-1、基本语法" class="headerlink" title="2.1、基本语法"></a>2.1、基本语法</h3><p><strong>k:(空格)v</strong>：表示一对键值对（空格必须有）；</p><p>它是以 <strong>空格</strong> 的缩进来控制 <strong>层级</strong> 关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：属性和值也是大小写敏感；</p><h3 id="2-2、值的写法"><a href="#2-2、值的写法" class="headerlink" title="2.2、值的写法"></a>2.2、值的写法</h3><h4 id="2-2-1、字面量"><a href="#2-2-1、字面量" class="headerlink" title="2.2.1、字面量"></a>2.2.1、字面量</h4><blockquote><p>普通的值（数字，字符串，布尔）</p></blockquote><p><code>k: v</code>：字面直接来写；</p><p>​ 字符串 <strong>默认不用加</strong> 上 <strong>单引号</strong> 或者 <strong>双引号</strong>；加了的话有特殊意义，如下</p><p>​   <strong>“”：双引号</strong>；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​      name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​   <strong>‘’：单引号</strong>；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​     name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="2-2-2、对象、Map"><a href="#2-2-2、对象、Map" class="headerlink" title="2.2.2、对象、Map"></a>2.2.2、对象、Map</h4><blockquote><p><code>k: v</code>：写对象或集合的属性和值的关系；注意缩进</p></blockquote><p>普通写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,</span> <span class="attr">age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、数组、List、Set"><a href="#2-2-3、数组、List、Set" class="headerlink" title="2.2.3、数组、List、Set"></a>2.2.3、数组、List、Set</h4><blockquote><p>用<code>-</code>值表示数组中的一个元素</p></blockquote><p>普通写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用`-`值表示数组中的一个元素，后面有一个空格</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><h3 id="3-1、全局配置文件值注入"><a href="#3-1、全局配置文件值注入" class="headerlink" title="3.1、全局配置文件值注入"></a>3.1、全局配置文件值注入</h3><blockquote><p>全局配置文件： <strong>application.properties</strong> 与 <strong>application.yml</strong> ，这里以 <strong>application.yml</strong> 为例</p></blockquote><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义属性值</span></span><br><span class="line"><span class="attr">fatal:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  fatal6:</span> <span class="string">&#123;name:</span> <span class="string">brother,</span> <span class="attr">age:</span> <span class="number">21</span><span class="string">&#125;</span>  <span class="comment"># 测对象</span></span><br><span class="line"><span class="attr">  map:</span> <span class="string">&#123;one:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">two:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">three:</span> <span class="number">3</span><span class="string">&#125;</span> <span class="comment"># 测 Map 集合</span></span><br><span class="line"><span class="attr">  strings:</span> <span class="string">[cat,dog,pig,strings]</span> <span class="comment"># 测数组 行内写法</span></span><br><span class="line"><span class="attr">  list:</span> <span class="string">[cat,dog,pig,list]</span>  <span class="comment"># 测 List 集合</span></span><br><span class="line"><span class="attr">  set:</span> <span class="string">[cat,dog,pig,set]</span>  <span class="comment"># 测 Set 集合</span></span><br><span class="line">  <span class="comment"># 数组或集合的普通写法</span></span><br><span class="line"><span class="comment">#  strings:</span></span><br><span class="line"><span class="comment">#    - cat</span></span><br><span class="line"><span class="comment">#    - dog</span></span><br><span class="line"><span class="comment">#    - pig</span></span><br></pre></td></tr></table></figure><h4 id="Component-Value"><a href="#Component-Value" class="headerlink" title="Component(@Value)"></a>Component(@Value)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;fatal.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;fatal.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Component-ConfigurationProperties"><a href="#Component-ConfigurationProperties" class="headerlink" title="Component(@ConfigurationProperties)"></a>Component(@ConfigurationProperties)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>: 用于配置文件与配置类数据映射</span></span><br><span class="line"><span class="comment"> * prefix: 与配置文件中`prefix`值下的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试对象、Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Fatal6 fatal6;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试集合（List，Set）、数组数据封装</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] strings;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal2;</span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal1;</span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal3;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Fatal1 fatal1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Fatal2 fatal2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentProperty1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"注解"</span>,<span class="string">"@Value"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, fatal1.getName());</span><br><span class="line">        map.put(<span class="string">"age"</span>, fatal1.getAge());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentProperty2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"注解"</span>,<span class="string">"@ConfigurationProperties"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, fatal2.getName());</span><br><span class="line">        map.put(<span class="string">"age"</span>, fatal2.getAge());</span><br><span class="line">        map.put(<span class="string">"fatal6"</span>, fatal2.getFatal6());      <span class="comment">// 对象</span></span><br><span class="line">        map.put(<span class="string">"map"</span>, fatal2.getMap());      <span class="comment">// Map</span></span><br><span class="line">        map.put(<span class="string">"strings"</span>, fatal2.getStrings());   <span class="comment">// 数组</span></span><br><span class="line">        map.put(<span class="string">"list"</span>, fatal2.getList());    <span class="comment">// List</span></span><br><span class="line">        map.put(<span class="string">"set"</span>, fatal2.getList());    <span class="comment">// Set</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1、-Value获取值和-ConfigurationProperties获取值（方式）比较"><a href="#3-1-1、-Value获取值和-ConfigurationProperties获取值（方式）比较" class="headerlink" title="3.1.1、@Value获取值和@ConfigurationProperties获取值（方式）比较"></a>3.1.1、@Value获取值和@ConfigurationProperties获取值（方式）比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL（spring表达式语言）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散绑定（松散语法）</strong>：比如实体类有个属性叫 <strong>lastName</strong>，那么在配置文件中 <strong>lastName</strong> 、<strong>last-name</strong> 两种写法都是正确的。</p><p><strong>复杂类型封装</strong>：属性又是一个实体，多层嵌套（复用）</p><p><strong>注意</strong>：不管配置文件是 <strong>yml</strong> 还是 <strong>properties</strong> 他们 <strong>都</strong> 能获取到值；</p><h4 id="3-1-2、使用场景"><a href="#3-1-2、使用场景" class="headerlink" title="3.1.2、使用场景"></a>3.1.2、使用场景</h4><ol><li><p>@Value</p><p>我们只是在某个业务逻辑中需要获取配置文件中的<strong>某项值</strong>，使用<strong>@Value</strong>；</p></li><li><p>@ConfigurationProperties</p><p>我们专门编写了一个<strong>javaBean</strong>来和<strong>配置文件</strong>进行<strong>映射</strong>，我们就直接使用<strong>@ConfigurationProperties</strong>；</p></li></ol><h3 id="3-2、配置文件注入值数据校验"><a href="#3-2、配置文件注入值数据校验" class="headerlink" title="3.2、配置文件注入值数据校验"></a>3.2、配置文件注入值数据校验</h3><blockquote><p>以全局为例，校验的话对自定义和全局都有效。</p></blockquote><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义属性值</span></span><br><span class="line"><span class="attr">fatal:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  email:</span> <span class="number">634136073</span><span class="string">@qq.com</span>  <span class="comment"># 用于测试值注入校验</span></span><br></pre></td></tr></table></figure><h4 id="Component-ConfigurationProperties-Validated"><a href="#Component-ConfigurationProperties-Validated" class="headerlink" title="Component(@ConfigurationProperties+@Validated)"></a>Component(@ConfigurationProperties+@Validated)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Validated</span>     <span class="comment">// 开启校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Fatal3 fatal3;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue3"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentPropertyWithValidated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">"注解"</span>,<span class="string">"@ConfigurationProperties + @Validated"</span>);</span><br><span class="line">      map.put(<span class="string">"name"</span>, fatal3.getName());</span><br><span class="line">      map.put(<span class="string">"age"</span>, fatal3.getAge());</span><br><span class="line">      map.put(<span class="string">"email"</span>, fatal3.getEmail());</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>在配置类上加上注解 <strong>@Validated</strong> ，然后在属性上加上 <strong>校验注解</strong> （javax.validation.constraints.*）。如果校验失败，项目启动时就会报错，例如邮箱 <strong>格式不正确</strong> 的话，就会出现如下 <strong>报错</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Binding</span> <span class="string">to</span> <span class="string">target</span> <span class="string">org.springframework.boot.context.properties.bind.BindException:</span> <span class="string">Failed</span> <span class="string">to</span> <span class="string">bind</span> <span class="string">properties</span> <span class="string">under</span> <span class="string">'fatal'</span> <span class="string">to</span> <span class="string">com.fatal.config.Fatal3</span> <span class="attr">failed:</span></span><br><span class="line"><span class="attr">Property:</span> <span class="string">fatal.email</span></span><br><span class="line"><span class="attr">Value:</span> <span class="number">63</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">class</span> <span class="string">path</span> <span class="string">resource</span> <span class="string">[application.yml]:5:10</span></span><br><span class="line"><span class="attr">Reason:</span> <span class="string">不是一个合法的电子邮件地址</span></span><br></pre></td></tr></table></figure><h3 id="3-3、自定义配置文件值注入"><a href="#3-3、自定义配置文件值注入" class="headerlink" title="3.3、自定义配置文件值注入"></a>3.3、自定义配置文件值注入</h3><p>上面的配置文件值注入我们都是把配置数据放在 <strong>application.yml</strong> 中，但是一般情况下，我们都不希望把自定义数据放到  <strong>application.yml</strong> 中（这样数据较乱），这时候我们可以自定义配置文件，如：test.properties；</p><h4 id="test-properties"><a href="#test-properties" class="headerlink" title="test.properties"></a>test.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal.name=fatal</span><br><span class="line">fatal.age=20</span><br></pre></td></tr></table></figure><h4 id="Component-PropertySource"><a href="#Component-PropertySource" class="headerlink" title="Component(@PropertySource)"></a>Component(@PropertySource)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:test.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h4><p>用 <strong>application.yml</strong> 或者 <strong>application.properties</strong> 来给配置类注入值，不需要我们指定配置文件的位置，<strong>SpringBoot</strong> 默认会加载；而当我们使用<strong>自定义配置文件</strong>的时候，我们需要告诉SpringBoot该配置类与哪个配置文件进行数据映射，这时候我们可以用注解 <strong>@PropertySource()</strong> 注解，并用其属性 <strong>value</strong> 指定一个（或多个）配置文件。（需要 <strong>注意</strong> 的时候，classpath 与 文件路径中间不能有空格）</p><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="4-1、使用随机数"><a href="#4-1、使用随机数" class="headerlink" title="4.1、使用随机数"></a>4.1、使用随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.uuid&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、属性配置占位符"><a href="#4-2、属性配置占位符" class="headerlink" title="4.2、属性配置占位符"></a>4.2、属性配置占位符</h3><p>可以在配置文件中引用前面配置过的属性</p><p><strong>${fatal.age:默认值}</strong> 来指定找不到属性时的默认值</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/1537448921353.png" alt="1537448921353"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/1537449074485.png" alt="1537449074485"></p><h2 id="5、多环境化配置（两种方式）"><a href="#5、多环境化配置（两种方式）" class="headerlink" title="5、多环境化配置（两种方式）"></a>5、多环境化配置（两种方式）</h2><p>在真实的应用中，常常会有多个环境（<strong>如：开发，测试，生产等</strong>），不同的环境数据库连接都不一样，这个时候就需要用到<code>spring.profile.active</code> 的强大功能了，它的格式为 <code>application-{profile}.yml/properties</code>，这里的 <code>application</code> 为前缀不能改，<code>{profile}</code> 是我们自己定义的。</p><h3 id="5-1、多个文件写"><a href="#5-1、多个文件写" class="headerlink" title="5.1、多个文件写"></a>5.1、多个文件写</h3><blockquote><p>application-dev.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/dev</span><br></pre></td></tr></table></figure><blockquote><p>application-test.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/test</span><br></pre></td></tr></table></figure><blockquote><p>application-prod.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/prod</span><br></pre></td></tr></table></figure><p>在 <code>application.properties</code> 配置文件中写入 <code>spring.profiles.active=dev</code>，这个时候我们在次访问 <a href="http://localhost:8080/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8080/getPropertyValue1</a> 就没用处了，因为我们设置了它的<code>context-path=/dev</code>，所以新的路径就是 <a href="http://localhost:8080/dev/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8080/dev/getPropertyValue1</a> ，<strong>由此可以看出来我们激活不同的配置读取的属性值是不一样的</strong></p><h3 id="5-2、yml支持多文档块方式（同一文件写）"><a href="#5-2、yml支持多文档块方式（同一文件写）" class="headerlink" title="5.2、yml支持多文档块方式（同一文件写）"></a>5.2、yml支持多文档块方式（同一文件写）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3、外部命令引导"><a href="#5-3、外部命令引导" class="headerlink" title="5.3、外部命令引导"></a>5.3、外部命令引导</h3><p>前面两种方式都是基于配置文件层面的，那么有没有办法外部引导呢，假设这样的场景，我们对已经开发完成的代码打包发布，期间在测试环境测试通过了，那么即可发布上生产，这个时候是修改<code>application.properties</code>的配置方便还是直接在<strong>命令参数配置</strong>方便呢，毫无疑问是后者更有说服力。<strong>默认情况下，<code>SpringApplication</code> 会将命令行选项参数（即：––property，如––server.port=9000）添加到Environment，命令行属性始终优先于其他属性源。</strong></p><blockquote><p>如何测试？</p></blockquote><ul><li><p>以 <strong>yml</strong> 的多文档块方式为例</p></li><li><p>进入到项目目录，此处以我本地目录为主：<code>E:/java/IdeaProjects2p0-learni/springboot2ng/chapter2</code></p></li><li><p>然后打开 cmd 程序，不会在当前目录打开 cmd 的请自行百度，输入：<code>mvn package</code></p></li><li><p>打包完毕后进入到：<code>E:/java/IdeaProjects2p0-learni/springboot2ng/chapter2/target</code> 目录中去，我们可以发现一个名为<strong>chapter2-0.0.1-SNAPSHOT.jar</strong> 的包</p></li><li><p>接着在target 打开 cmd 程序，输入：<code>java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev --fatal.age=32</code>。仔细观察<strong>spring.profiles.active=dev 、fatal.age=32</strong> 这俩配置的键值是不是似曾相识，对，–就表示用命令行自定义配置属性，它会<strong>覆盖</strong>掉配置文件中的属性值（不认识的请从开头认真阅读）</p></li><li><p>最后输入测试地址：<a href="http://localhost:8083/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8083/getPropertyValue1</a> 我们可以发现返回的 <strong>JSON</strong> 和下面相似就表示正确</p></li></ul><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图184307026069103.png" alt="360截图184307026069103"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17321123108108122.png" alt="360截图17321123108108122"></p><h2 id="6、配置文件的加载位置"><a href="#6、配置文件的加载位置" class="headerlink" title="6、配置文件的加载位置"></a>6、配置文件的加载位置</h2><p>​        <strong>SpringBoot</strong> 启动会扫描以下位置的 <strong>application.properties</strong> 或 <strong>application.yml</strong> 文件作为 <strong>SpringBoot</strong> 的 <strong>默认</strong> 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-file:/config/      # 当前项目的根目录的config文件夹下</span><br><span class="line">-file:/         # 当前项目的根目录下</span><br><span class="line">-classpath:/config/   # 类路径的config文件夹下  resources/config/</span><br><span class="line">-classpath:/      # 类路径下    resources/</span><br></pre></td></tr></table></figure><p>==<strong>注意</strong>==：当项目为多模块项目的时候，<strong>file</strong> 指的是 <strong>父工程</strong> 的根目录下</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>优先级由高到底，<strong>相同的配置项</strong>，高优先级的配置会 <strong>覆盖</strong> 低优先级的配置；</li><li>如果出现 <strong>不同的配置项</strong>，会形成 <strong>互补配置</strong> 共同起作用；</li></ol><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>我们还可以通过 <strong>spring.config.additional-location（配置项）</strong> 来改变默认配置文件的加载位置</p><p>​        <strong>项目打包好以后</strong>，我们可以使用 <strong>命令行参数</strong> 的形式，启动项目的时候来指定配置文件的加载位置；实现 <strong>新配置文件</strong> 与 <strong>默认加载的这些配置文件</strong> ==共同作用形成== <strong>互补配置</strong></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="1-classpath-config-覆盖-classpath"><a href="#1-classpath-config-覆盖-classpath" class="headerlink" title="1. classpath:/config/ 覆盖 classpath:/"></a>1. classpath:/config/ 覆盖 classpath:/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图177509199013083.png" alt="360截图177509199013083"></p><h4 id="2-file-覆盖-classpath-config"><a href="#2-file-覆盖-classpath-config" class="headerlink" title="2. file:/ 覆盖 classpath:/config/"></a>2. file:/ 覆盖 classpath:/config/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18141220336439.png" alt="360截图177509199013083"></p><h4 id="3-file-config-覆盖-file"><a href="#3-file-config-覆盖-file" class="headerlink" title="3. file:/config/ 覆盖 file:/"></a>3. file:/config/ 覆盖 file:/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17140309184322.png" alt="360截图177509199013083"></p><h4 id="4-外部配置文件"><a href="#4-外部配置文件" class="headerlink" title="4. 外部配置文件"></a>4. 外部配置文件</h4><p>D:\application.properties</p><blockquote><p>命令行加参数 <strong>==spring.config.additional-location==</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.config.additional-location=D:\application.properties</span><br></pre></td></tr></table></figure><p><strong>注</strong>：如果使用 <strong>spring.config.location</strong> 的话，那么默认包下的全局配置文件无效</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>编辑 <strong>D:\application.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal.name=outward/properties</span><br></pre></td></tr></table></figure></li><li><p>打包</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17750921105128117.png" alt="360截图177509199013083"></p></li><li><p>运行</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图16241224101104132.png" alt="360截图177509199013083"></p></li><li><p>页面</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18720116111119139.png" alt="360截图177509199013083"></p></li></ol><h2 id="7、配置加载顺序-覆盖、互补"><a href="#7、配置加载顺序-覆盖、互补" class="headerlink" title="7、配置加载顺序(覆盖、互补)"></a>7、配置加载顺序(覆盖、互补)</h2><blockquote><p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置==覆盖==低优先级的配置，所有的配置会形成==互补==配置</strong></p></blockquote><ol><li><strong>命令行参数</strong></li></ol><p>所有的配置都可以在命令行上进行指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar chapter2-0.0.1-SNAPSHOT.jar --server.port=9090</span><br></pre></td></tr></table></figure><p>多个配置用空格分开； <code>--配置项=值</code></p><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><p><strong>由jar包外向jar包内进行寻找；</strong></p><blockquote><p>顺序为：包外的config下的优先级最高（在config文件中也是优先profile）</p></blockquote><p><strong>优先加载带profile</strong></p><ol start="2"><li><p><strong>jar 包外部 </strong>的 <strong>application-{profile}.properties</strong> 或 <strong>application.yml(带spring.profile)</strong> 配置文件</p></li><li><p><strong>jar 包内部</strong> 的 <strong>application-{profile}.properties</strong> 或 <strong>application.yml(带spring.profile)</strong> 配置文件</p></li></ol><p><strong>再来加载不带profile</strong></p><ol start="4"><li><p><strong>jar 包外部</strong> 的 <strong>application.properties</strong> 或 <strong>application.yml(不带spring.profile)</strong> 配置文件</p></li><li><p><strong>jar 包内部</strong> 的 <strong>application.properties</strong>或 <strong>application.yml(不带spring.profile)</strong> 配置文件</p></li></ol><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ol><li>打包</li><li>创建两个配置文件，分别为 <strong>application.properties</strong> 和  <strong>application-dev.properties</strong></li><li>运行（java -jar chapter2-0.0.1-SNAPSHOT.jar）</li></ol><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17491109327368.png" alt="360截图177509199013083"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18180712101111141.png" alt="360截图177509199013083"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17750924105153101.png" alt="360截图177509199013083"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><strong>@ConfigurationProperties</strong>：用于 <strong>配置文件</strong> 与 <strong>配置类</strong> 数据映射；</p><p>其属性 <strong>prefix</strong>：与配置文件中<code>prefix</code>下的所有属性进行 一 一 映射；</p></li><li><p>在某个业务逻辑中需要获取配置文件中的 <strong>某项值</strong>，使用<strong>@Value</strong>；编写了一个<strong><code>javaBean</code></strong>来和<strong>配置文件</strong>进行<strong>映射</strong>，我们就直接使用 <strong><code>@ConfigurationProperties</code></strong>；</p></li><li><p><strong><code>@PropertySource</code></strong> 加载指定配置文件；</p></li><li><p><strong>Controller</strong> 和 <strong>Component</strong> 都是Spring 容器中的组件；</p></li><li><p>在项目根目录下，<code>mvn package</code>可以打包，在<strong>生成包所在目录</strong>下，<code>java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev --fatal.age=32</code>可以自定义参数运行包</p></li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal-learni/springboot2ng/tree/master/chapter2" target="_blank" rel="noopener">https://github.com/ynfatal-learni/springboot2ng/tree/master/chapter2</a></p><h4 id="学习-唐亚峰-，方志朋-前辈的经验"><a href="#学习-唐亚峰-，方志朋-前辈的经验" class="headerlink" title="学习 唐亚峰 ，方志朋 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> ，<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第一篇：第一个SpringBoot工程</title>
      <link href="/2018/08/19/SpringBoot2%20%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%B7%A5%E7%A8%8B/"/>
      <url>/2018/08/19/SpringBoot2%20%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>SpringBoot</code> 是为了简化 <code>Spring</code> 应用的创建、运行、调试、部署等一系列问题而诞生的产物，<strong>自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程</strong></p></blockquote><p>未接触 <code>SpringBoot</code> 之前，搭建一个普通的 <code>WEB</code> 工程往往需要花费30分钟左右，如果遇到点奇葩的问题耽搁的时间会更长一点，但自从用了<code>SpringBoot</code> 后，真正体会到什么叫分分钟搭建一个<code>WEB</code>，让我拥有更多的时间跟我的小伙伴们唠嗑了。使用 <code>SpringBoot</code> 后发现一切是如此的简单（<strong>还记得读书那会被JAR包，xml支配的恐惧吗，如今都可以说 good bye</strong>）</p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/5.png" alt="5"></p><h2 id="设计的目标"><a href="#设计的目标" class="headerlink" title="设计的目标"></a>设计的目标</h2><ul><li>为所有使用 <code>Spring</code> 的开发者提供一个更简单，快速的入门体验</li><li>提供一些常见的功能、如监控、WEB容器，健康，安全等功能</li><li>干掉XML，遵循规范，开箱即用</li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="开始搭建："><a href="#开始搭建：" class="headerlink" title="开始搭建："></a>开始搭建：</h2><h3 id="1、点击File-gt-Project"><a href="#1、点击File-gt-Project" class="headerlink" title="1、点击File -&gt; Project"></a>1、点击<strong>File -&gt; Project</strong></h3><p>到这一步选择的时候，如图中选项的是<code>Spring Initializr(官方的构建插件，需要联网)</code>，第二个是自己选择<code>Maven</code>构建，为了更好的适合初学者，我们将在本章用插件构建</p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/123124235151325213.jpg" alt="123124235151325213"></p><h3 id="2、填写项目基本信息"><a href="#2、填写项目基本信息" class="headerlink" title="2、填写项目基本信息"></a>2、填写项目基本信息</h3><ul><li><strong>Group：</strong> 组织ID，一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为 <code>org、com、cn</code>等等，其中 <strong>org为非营利组织，com为商业组织</strong>。如阿里、淘宝（com.alibaba/com.taobao）</li><li><strong>Artifact:</strong> 唯一标识符，一般是项目名称</li></ul><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/1234213512336516146.jpg" alt="1234213512336516146"></p><h3 id="3、选择依赖"><a href="#3、选择依赖" class="headerlink" title="3、选择依赖"></a>3、选择依赖</h3><p><strong>Spring Initializr</strong> 为我们提供了很多的选项，不同的选项有不同的作用，在初期我们只需要依赖<strong>Web</strong> 就可以了，选择好依赖包之后点击<strong>Next -&gt; Finish</strong></p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/35123521351235.jpg" alt="35123521351235"></p><h3 id="4、目录结果"><a href="#4、目录结果" class="headerlink" title="4、目录结果"></a>4、目录结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">    -main</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">                #主函数，启动类，运行它如果运行了 Tomcat、Jetty、Undertow 等容器</span><br><span class="line">                -SpringbootApplication  </span><br><span class="line">        -resouces</span><br><span class="line">            #存放静态资源 js/css/images 等</span><br><span class="line">            - statics</span><br><span class="line">            #存放 html 模板文件</span><br><span class="line">            - templates</span><br><span class="line">            #主要的配置文件，SpringBoot启动时候会自动加载application.yml/application.properties      </span><br><span class="line">            - application.yml</span><br><span class="line">    #测试文件存放目录       </span><br><span class="line">    -test</span><br><span class="line"> # pom.xml 文件是Maven构建的基础，里面包含了我们所依赖JAR和Plugin的信息</span><br><span class="line">- pom</span><br></pre></td></tr></table></figure><h4 id="4-1、pom-xml"><a href="#4-1、pom-xml" class="headerlink" title="4.1、pom.xml"></a>4.1、pom.xml</h4><p>因为使用了 <strong>Spring Initializr</strong> 插件，所以如下的配置都不需要我们自己去写啦，需要注意的是版本要选择 <strong>RELEASE</strong> ，稳定版本BUG少</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fatal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>我用的第一个SpringBoot工程<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发中请记得版本一定要选择 RELEASE 哦 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认就内嵌了Tomcat 容器，如需要更换容器也极其简单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试包,当我们使用 mvn package 的时候该包并不会被打入,因为它的生命周期只在 test 之内--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它的依赖可以参考：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">官方文档</a></p><h4 id="4-2、主函数入口"><a href="#4-2、主函数入口" class="headerlink" title="4.2、主函数入口"></a>4.2、主函数入口</h4><p><strong>注意事项：</strong> 一个项目中切记不要出现多个 <code>main</code> 函数，否在在打包的时候 <code>spring-boot-maven-plugin</code>将找不到主函数（<strong>主动指定打包主函数入口除外…</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其中 <span class="doctag">@RestController</span> 等同于 （<span class="doctag">@Controller</span> 与 <span class="doctag">@ResponseBody</span>）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Fatal!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">(ApplicationContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"来看看我们 SpringBoot 默认提供的 Bean: "</span>);</span><br><span class="line">            String[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="line">            Arrays.sort(beanNames);</span><br><span class="line">            Arrays.stream(beanNames).forEach(System.out::println);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、启动应用"><a href="#5、启动应用" class="headerlink" title="5、启动应用"></a>5、启动应用</h3><p>三种方式</p><ul><li>运行 main 方法</li><li>在 Terminal 中，进入项目根目录，输入 <code>mvn spring-boot:run</code> 即可</li><li>在服务器部署运行时，先 <code>mvn install</code> 打成 jar 包，然后 <code>java -jar xxx.jar</code>  来启动应用</li></ul><h3 id="6、全局配置文件（application-yml）"><a href="#6、全局配置文件（application-yml）" class="headerlink" title="6、全局配置文件（application.yml）"></a>6、全局配置文件（application.yml）</h3><p>从启动日志中可以发现，<code>SpringBoot</code> 默认的端口是 8080 ，那么如果端口被占用了怎么办呢？不要慌，问题不大，配置文件分分钟解决你的困扰…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-9-19 21:23:11.235  INFO 11184 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure><p>修改默认配置 yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/chapter1</span></span><br></pre></td></tr></table></figure><p>再次启动即可~~</p><h3 id="7、测试（RESTful）"><a href="#7、测试（RESTful）" class="headerlink" title="7、测试（RESTful）"></a>7、测试（RESTful）</h3><p>本次测试采用 <code>junit</code> 进行，当然也可以启动项目后直接访问 <code>http://localhost:9090/chapter/demo1</code>进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.LocalServerPort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebEnvironment: web环境</span></span><br><span class="line"><span class="comment"> *  1.MOCK: 提供一个Mock的Servlet环境，内置的Servlet容器并没有真实的启动，主要搭配使用<span class="doctag">@AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="comment"> *  2.RANDOM_PORT: 提供一个真实的Servlet环境，也就是说会启动内置容器，然后使用的是随机端口</span></span><br><span class="line"><span class="comment"> *  3.DEFINED_PORT: 这个配置也是提供一个真实的Servlet环境，使用的默认的端口，如果没有配置就是8080</span></span><br><span class="line"><span class="comment"> *  4.NONE: 这是个神奇的配置，跟Mock一样也不提供真实的Servlet环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须提供真实的Servlet环境，RANDOM_PORT 或者 DEFINED_PORT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 RestFul 接口的模板类，内部封装了 RestTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = <span class="keyword">new</span> URL(<span class="string">"http://localhost:"</span> + port + <span class="string">"/chapter1/demo1/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(), String.class);</span><br><span class="line">        Assert.assertEquals(response.getBody(), <span class="string">"Hello Fatal!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h2><h3 id="自定义Banner"><a href="#自定义Banner" class="headerlink" title="自定义Banner"></a>自定义Banner</h3><p><code>SpringBoot</code> 启动的时候我们可以看到如下内容，这一块其实是可以自定义的哦，而且在 2.X 版本中，它支持的格式从文本扩展到<strong>banner.txt、banner.jpg、banner.gif、banner.jpeg</strong> 等等，只需要在 <strong>resouces</strong> 目录下添加指定命名的文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.5.RELEASE)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter1</a></p><h4 id="学习-唐亚峰-，方志朋-前辈的经验"><a href="#学习-唐亚峰-，方志朋-前辈的经验" class="headerlink" title="学习 唐亚峰 ，方志朋 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> ，<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
