<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud | 第一篇：Eureka（Greenwich SR1）</title>
      <link href="/2019/06/10/SpringCloud%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9AEureka%EF%BC%88Greenwich%20SR1%EF%BC%89/"/>
      <url>/2019/06/10/SpringCloud%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9AEureka%EF%BC%88Greenwich%20SR1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Spring Cloud</code> 为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如<code>配置管理</code>、<code>服务发现</code>、<code>断路器</code>、<code>智能路由</code>、<code>微代理</code>、<code>控制总线</code>）。分布式系统的协调导致了样板式的模式，使用<code>Spring Cloud</code> 开发人员可以快速地支持实现这些模式的服务和应用程序。</p></blockquote><p>[TOC]</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><code>服务发现</code>是基于微服务的体系结构的关键原则之一。<code>Eureka</code> 是 <code>Netflix 服务发现</code>的服务器和客户端。它支持通过 <code>Eureka 服务器</code> 的配置和部署实现<code>高可用</code>，每个服务器都将注册服务的状态复制到其他服务器。</p><p><code>Eureka Server</code>没有后端存储，所以注册表中的服务实例都<code>必须</code>发送心跳以使其注册信息保持最新（这样的功能可以在内存中完成）；<code>Eureka</code> 则是通过<code>client 心跳</code>来确定 <code>client</code> 是否启动的。<code>client</code>的内存也有一部分是用来存放 <code>Eureka 注册</code> 缓存（因此他们不必每个对服务的请求都去注册表）。</p><h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><p><code>Eureka Server</code> 提供服务注册与发现，各个 <code>client</code> 启动后，会向 <code>Eureka Server</code> 注册自己的信息，<code>Eureka Server</code>注册表中将会存储所有可用服务节点的信息。</p><h3 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h3><p><code>Eureka Client</code> 分为 服务供应商 和 服务消费者</p><h3 id="Eureka-High-Availability"><a href="#Eureka-High-Availability" class="headerlink" title="Eureka High Availability"></a>Eureka High Availability</h3><p><code>Eureka Server</code> 通过运行多个相互注册的实例，可以变得<code>更具弹性</code>和<code>可用性</code>的。</p><p>你可以向系统添加多个 <code>peer（对等点）</code>，而且，只要他们通过至少一个边彼此连接，它们就可以在彼此之间同步注册信息。如果<code>peer（对等点）</code>在物理上是分开的，那么，在原则上，这个系统可以在“宕（dàng）机”类型的故障中存活下来。您可以向一个系统中添加多个对等点，只要它们都直接连接在一起，它们就可以在彼此之间同步注册，从而实现<code>高可用</code>。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.3.2</li><li>springboot： <strong>2.1.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>springcloud：<strong>Greenwich.SR1</strong></li></ul><h2 id="1-eureka-server（Standalone-Mode）"><a href="#1-eureka-server（Standalone-Mode）" class="headerlink" title="1. eureka-server（Standalone Mode）"></a>1. eureka-server（Standalone Mode）</h2><p>创建一个子工程作为<code>注册中心</code>，需要选择的依赖如下：</p><p><code>Spring Cloud Discovery -&gt; Eureka Server</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560160575435.png" alt="1560160700879"></p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a><code>pom.xml</code></h3><p>创建完的 <code>pom.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fatal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Eureka Server（注册中心）<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EurekaServerApplication-java"><a href="#EurekaServerApplication-java" class="headerlink" title="EurekaServerApplication.java"></a><code>EurekaServerApplication.java</code></h3><p>在启动类上添加<code>@EnableEurekaServer</code>开启 Eureka 服务器相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启 Eureka 服务器相关配置</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a><code>application.yml</code></h3><p>单机版测试下很多东西只需要选择默认即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment"># Eureka Server 的默认值看 EurekaServerConfigBean</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line">    <span class="comment"># 是否开启自我保护（生产环境建议修改为 true）</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 清理间隔计时器（毫秒）默认值为 60 * 1000</span></span><br><span class="line"><span class="comment">#    eviction-interval-timer-in-ms: 60000</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    hostname: localhost</span></span><br><span class="line">  <span class="comment"># Eureka Client 的默认值看 EurekaClientConfigBean</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment"># 指定是否向` Eureka 服务器（由 defaultZone 配置，可以多个）`注册`本 Eureka 客户端`</span></span><br><span class="line">    <span class="comment">#（单个 Eureka Server 没必要，设置为 false；`注册中心高可用配置`则必须设置为 true）</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 表示此客户端是否应从 Eureka 服务器获取 Eureka 注册表信息。默认值为 true</span></span><br><span class="line"><span class="comment">#    fetch-registry: true</span></span><br><span class="line">    <span class="comment"># 表示从 Eureka 服务器获取注册表信息的频率（秒）。默认值为 30</span></span><br><span class="line"><span class="attr">    registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="comment">#    service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone 在 `Eureka 服务器配置`中，一般用于高可用配置，Eureka 服务器之间相互注册。</span></span><br><span class="line">      <span class="comment">#（Eureka Server 也是一个 Eureka Client，官网说的）</span></span><br><span class="line">      <span class="comment"># defaultZone 是个Map。默认值为 http://localhost:8761/eureka</span></span><br><span class="line"><span class="comment">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>注：生产环境建议 Eureka Server 开启自我保护</p><h2 id="2-eureka-client"><a href="#2-eureka-client" class="headerlink" title="2. eureka-client"></a>2. eureka-client</h2><p>创建一个子工程作为<code>服务提供者</code>，需要 引入的依赖如下：</p><p><code>Web -&gt; Spring Web Start</code></p><p><code>Spring Cloud Discovery -&gt; Eureka Discovery Client</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560161210458.png" alt="1560161210458"></p><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a><code>pom.xml</code></h3><p>创建完的 <code>pom.xml</code> 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fatal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Eureka Client<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="EurekaClientApplication-java"><a href="#EurekaClientApplication-java" class="headerlink" title="EurekaClientApplication.java"></a><code>EurekaClientApplication.java</code></h3><p>在启动类上添加<code>@EnableEurekaClient</code>开启 Eureka 服务器相关配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册中心是eureka，那么就推荐<span class="doctag">@EnableEurekaClient</span>；</span></span><br><span class="line"><span class="comment"> * 如果是其他的注册中心，那么推荐使用<span class="doctag">@EnableDiscoveryClient</span>。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启发现 Eureka 客户端相关配置</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/client"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is eureka client"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：注册中心是<code>eureka</code>，那么就推荐<code>@EnableEurekaClient</code>；如果是其他的注册中心，那么推荐使用<code>@EnableDiscoveryClient</code>。</p><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a><code>application.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># 该属性用在 Client 端，设置为 true，则表示使用IP向注册中心注册；否则使用主机名注册</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br><span class="line"><span class="comment">#      defaultZone: http://192.168.0.107:8761/eureka</span></span><br></pre></td></tr></table></figure><p>注：<code>defaultZone</code> 指定注册的 Eureka 服务器 URL</p><h2 id="3-eureka-high-availability-server"><a href="#3-eureka-high-availability-server" class="headerlink" title="3. eureka-high-availability-server"></a>3. eureka-high-availability-server</h2><p>创建一个子工程作为 Eureka Server 来测试 高可用</p><p><code>pom.xml</code> 和 <code>EurekaHighAvailabilityServerApplication.java</code> 参考上面的 <code>eureka-server（Standalone Mode）</code>。唯一有区别的就是 <code>application.yml</code></p><h3 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a><code>application.yml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################       Eureka Server 高可用      ########################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########################     Eureka 本地测试      ########################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,</span> <span class="attr">http://peer2:8762/eureka/,</span> <span class="attr">http://peer3:8763/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################    Eureka 本地测试（end）    ########################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########################      Eureka 模拟生产测试     ########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server:</span></span><br><span class="line"><span class="comment">#  port: 8761</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#spring:</span></span><br><span class="line"><span class="comment">#  application:</span></span><br><span class="line"><span class="comment">#    name: eureka-server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#eureka:</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    prefer-ip-address: true</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    serviceUrl:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://192.168.0.107:8761/eureka/, http://192.168.0.108:8761/eureka/, http://192.168.0.109:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################    Eureka 模拟生产测试（end）    ########################</span></span><br></pre></td></tr></table></figure><p>注：在 <code>Eureka 高可用配置</code>中，如果本地测试的话，<code>defaultZone</code> 上的 URL 不允许出现 <code>ip</code>，只能使用<code>域名</code>，否则都会出现在 <code>unavailable-replicas</code> （不可用的副本）上。这里 <code>defaultZone</code> 的值中出现的 <code>peer1、peer2、peer3</code> 指的是<code>域名</code>（当然，本地测试需要你自己去 hosts 文件中设置映射）。</p><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><h3 id="4-1-Eureka-服务注册与发现"><a href="#4-1-Eureka-服务注册与发现" class="headerlink" title="4.1. Eureka 服务注册与发现"></a>4.1. Eureka 服务注册与发现</h3><h4 id="4-1-1-step"><a href="#4-1-1-step" class="headerlink" title="4.1.1. step"></a>4.1.1. step</h4><p>首先启动 <code>eureka-server</code></p><p>然后启动 <code>eureka-client</code></p><p>浏览器上访问 <a href="http://localhost:8761/，可以看到结果如下：" target="_blank" rel="noopener">http://localhost:8761/，可以看到结果如下：</a></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560218715224.png" alt="1560218715224"></p><h4 id="4-1-2-测试-prefer-ip-address"><a href="#4-1-2-测试-prefer-ip-address" class="headerlink" title="4.1.2. 测试 prefer-ip-address"></a>4.1.2. 测试 <code>prefer-ip-address</code></h4><blockquote><p>应用程序使用eureka注册，它使用的是其 <code>IP</code> 地址，而不是其主机名。所以 Eureka Client 的 prefer-ip-address 建议为 true</p></blockquote><p>点击访问<code>Instances currently registered with Eureka</code>上的 <strong>EUREKA-CLIENT</strong> 服务</p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560219026109.png" alt="1560219026109"></p><h5 id="true"><a href="#true" class="headerlink" title="true"></a>true</h5><blockquote><p> 使用<code>IP</code>向注册中心注册（推荐）</p></blockquote><p>你可以看到访问该服务的 <code>URL</code> 上显示的是 <code>IP 地址</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560219713962.png" alt="1560219713962"></p><h5 id="false"><a href="#false" class="headerlink" title="false"></a>false</h5><blockquote><p> 使用<code>主机名</code>向注册中心注册 </p></blockquote><p>你可以看到访问该服务的 <code>URL</code> 上显示的是<code>主机名</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560219828218.png" alt="1560219828218"></p><h3 id="4-2-Eureka-高可用"><a href="#4-2-Eureka-高可用" class="headerlink" title="4.2. Eureka 高可用"></a>4.2. Eureka 高可用</h3><h4 id="4-2-1-Eureka-本地测试（defaultZone-使用域名）"><a href="#4-2-1-Eureka-本地测试（defaultZone-使用域名）" class="headerlink" title="4.2.1. Eureka 本地测试（defaultZone 使用域名）"></a>4.2.1. Eureka 本地测试（<code>defaultZone</code> 使用<code>域名</code>）</h4><h5 id="4-2-1-1-step"><a href="#4-2-1-1-step" class="headerlink" title="4.2.1.1. step"></a>4.2.1.1. step</h5><ol><li><p><strong>打开 <code>application.yml</code> 中 <code>Eureka 本地测试</code> 的注释，同时关闭 <code>Eureka 模拟生产测试</code>的注释</strong></p></li><li><p>在操作栏上选择 <code>Edit Configurations</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560185087148.png" alt="1560185087148"></p></li><li><p>选中左侧框中的 <code>EurekaHighAvailabilityServerApplication</code>，点击两次上方的复制图标</p></li><li><p>将三个 <code>EurekaHighAvailabilityServerApplication</code> 分别修改为 <code>EurekaHighAvailabilityServerApplication 1</code>，<code>EurekaHighAvailabilityServerApplication 2</code>，<code>EurekaHighAvailabilityServerApplication 3</code>，点击 <code>OK</code></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560185179454.png" alt="1560185179454"></p></li><li><p>选中操作栏 <code>EurekaHighAvailabilityServerApplication 1</code> ，对应设置 <code>application.yml</code> 文件上的 <code>spring.profiles.active</code> 的值为 <code>peer1</code>，然后启动；再以这种方式启动 <strong>2 和 3</strong> 的即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EurekaHighAvailabilityServerApplication 1-&gt;peer1</span></span><br><span class="line"><span class="comment">// EurekaHighAvailabilityServerApplication 2-&gt;peer2</span></span><br><span class="line"><span class="comment">// EurekaHighAvailabilityServerApplication 3-&gt;peer3</span></span><br></pre></td></tr></table></figure></li><li><p>配置 hosts 。路径：<code>C:\Windows\System32\drivers\etc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 peer1</span><br><span class="line">127.0.0.1 peer2</span><br><span class="line">127.0.0.1 peer3</span><br></pre></td></tr></table></figure></li></ol><h5 id="4-2-1-2-show"><a href="#4-2-1-2-show" class="headerlink" title="4.2.1.2. show"></a>4.2.1.2. show</h5><p><strong>访问 <a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560212843320.png" alt="1560212843320"></p><p><strong>访问 <a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560212863974.png" alt="1560212863974"></p><p><strong>访问 <a href="http://localhost:8763/" target="_blank" rel="noopener">http://localhost:8763/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560212880992.png" alt="1560212880992"></p><h5 id="4-2-1-3-测试同步"><a href="#4-2-1-3-测试同步" class="headerlink" title="4.2.1.3. 测试同步"></a>4.2.1.3. 测试同步</h5><p><code>eureka-client</code>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># 该属性用在 Client 端，设置为 true，则表示使用IP向注册中心注册；否则使用主机名注册</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br><span class="line"><span class="comment">#      defaultZone: http://192.168.0.107:8761/eureka</span></span><br></pre></td></tr></table></figure><p>启动 <code>eureka-client</code>，只向 <a href="http://localhost:8761/eureka" target="_blank" rel="noopener">http://localhost:8761/eureka</a> 注册服务</p><p>在 <code>8761,8762,8763</code> 端口上的<code>注册中心</code>我们都可以看到 <code>Instances currently registered with Eureka</code> 多了个 <code>Application: EUREKA-CLIENT</code>。三个注册中心可以在彼此之间同步注册信息，所以 <code>Eureka 高可用</code>实现了~~</p><p>结果如下：</p><p><strong>访问 <a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560213952271.png" alt="1560213952271"></p><p><strong>访问 <a href="http://localhost:8762/" target="_blank" rel="noopener">http://localhost:8762/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560214043790.png" alt="1560214043790"></p><p><strong>访问 <a href="http://localhost:8763/" target="_blank" rel="noopener">http://localhost:8763/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560213986803.png" alt="1560213986803"></p><h4 id="4-2-2-Eureka-模拟生产测试（defaultZone-使用-IP）"><a href="#4-2-2-Eureka-模拟生产测试（defaultZone-使用-IP）" class="headerlink" title="4.2.2. Eureka 模拟生产测试（defaultZone 使用 IP）"></a>4.2.2. Eureka 模拟生产测试（<code>defaultZone</code> 使用 <code>IP</code>）</h4><h5 id="4-2-2-1-step"><a href="#4-2-2-1-step" class="headerlink" title="4.2.2.1. step"></a>4.2.2.1. step</h5><ol><li><strong>打开 <code>application.yml</code> 中 <code>Eureka 模拟生产测试</code> 的注释，同时关闭 <code>Eureka本地测试</code>的注释</strong></li><li>启动了三台虚拟机，地址分别是 <code>192.168.0.107</code>,<code>192.168.0.108</code>,<code>192.168.0.109</code>。将虚拟机的的<code>8761端口</code>对外开放（<code>/sbin/iptables -I INPUT -p tcp --dport 8761 -j ACCEPT</code>）。</li><li>在 <code>IDEA</code>中，选择下方菜单栏的 <code>Terminal</code>，进入<code>eureka-high-availability-server</code>根目录下，输入 <code>mvn package</code>打包，分别部署即可到三台虚拟机即可。</li></ol><h5 id="4-2-2-2-show"><a href="#4-2-2-2-show" class="headerlink" title="4.2.2.2. show"></a>4.2.2.2. show</h5><p><strong>访问 <a href="http://192.168.0.107:8761/" target="_blank" rel="noopener">http://192.168.0.107:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560266351071.png" alt="1560266351071"></p><p><strong>访问 <a href="http://192.168.0.108:8761/" target="_blank" rel="noopener">http://192.168.0.108:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560266383536.png" alt="1560266383536"></p><p><strong>访问 <a href="http://192.168.0.109:8761/" target="_blank" rel="noopener">http://192.168.0.109:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560266429514.png" alt="1560266429514"></p><h5 id="4-2-2-3-测试同步"><a href="#4-2-2-3-测试同步" class="headerlink" title="4.2.2.3. 测试同步"></a>4.2.2.3. 测试同步</h5><p><code>eureka-client</code>配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eureka 配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment"># 该属性用在 Client 端，设置为 true，则表示使用IP向注册中心注册；否则使用主机名注册</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://192.168.0.107:8761/eureka</span></span><br></pre></td></tr></table></figure><p>启动 <code>eureka-client</code></p><p>在<code>192.168.0.107</code>,<code>192.168.0.108</code>,<code>192.168.0.109</code>上的<code>注册中心</code>我们都可以看到 <code>Instances currently registered with Eureka</code> 多了个 <code>Application: EUREKA-CLIENT</code>。三个注册中心可以在彼此之间同步注册信息，所以 <code>Eureka 高可用</code>实现了~~</p><p>结果如下：</p><p><strong>访问 <a href="http://192.168.0.107:8761/" target="_blank" rel="noopener">http://192.168.0.107:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560266970045.png" alt="1560266970045"></p><p><strong>访问 <a href="http://192.168.0.108:8761/" target="_blank" rel="noopener">http://192.168.0.108:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560266987893.png" alt="1560266987893"></p><p><strong>访问 <a href="http://192.168.0.109:8761/" target="_blank" rel="noopener">http://192.168.0.109:8761/</a></strong></p><p><img src="/images/SpringCloud/SpringCloud 第一篇：Eureka/1560267006461.png" alt="1560267006461"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ol><li><code>eureka.instance.prefer-ip-address: true</code> 在 Client 端使用时，表示使用<code>IP</code>向注册中心注册；在 Server 端使用（一般用于生产环境高可用场景），表示 注册中心 作为客户端时，使用<code>IP</code>向<code>其它</code>注册中心注册</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cloud.spring.io/spring-cloud-static/Greenwich.SR1/single/spring-cloud.html#_spring_cloud_netflix" target="_blank" rel="noopener">Spring Cloud (Greenwich.SR1)</a></p><ul><li>12.5 Peer Awareness</li></ul><p><a href="https://blog.battcn.com/2018/09/27/springcloud/finchley/finchley-learn-eureka/" target="_blank" rel="noopener">一起来学Spring Cloud（F版） | 第一篇：认识Eureka</a></p><p><a href="https://www.fangzhipeng.com/springcloud/2018/08/01/sc-f1-eureka.html" target="_blank" rel="noopener">SpringCloud教程第1篇：Eureka（F版本）</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringCloud</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringCloud(Greenwich.SR1)</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springcloud-learning/tree/master/chapter1" target="_blank" rel="noopener">https://github.com/ynfatal/springcloud-learning/tree/master/chapter1</a></p><h4 id="学习-唐亚峰、方志朋-前辈的经验"><a href="#学习-唐亚峰、方志朋-前辈的经验" class="headerlink" title="学习 唐亚峰、方志朋 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="https://www.fangzhipeng.com/" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo GitHub 搭建个人博客</title>
      <link href="/2019/05/11/Hexo%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/11/Hexo%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        回了趟家，闲时在翻网站书签的时候，刚好翻到了<a href="http://tengj.top/" target="_blank" rel="noopener">嘟嘟独立博客</a>。看到这个名字，我就想起来，前段时间本来想搭个博客，但是有点事情搁在一旁了，现在这两天刚好有空，于是咯…。经过四五天的百度和前辈们的经验，终于建成了~~ </p><p>希望能以此来激励自己学习</p><h2 id="痕迹"><a href="#痕迹" class="headerlink" title="痕迹"></a>痕迹</h2><p>下面是我百度过的痕迹，当然有些已经被删了，只剩这些了：</p><p><a href="http://tengj.top/categories/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">hexo干货系列</a></p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p><p><a href="https://theme-next.org/docs/" target="_blank" rel="noopener">Hexo Docs</a></p><p><a href="https://blog.csdn.net/winter_chen001/article/details/79719154" target="_blank" rel="noopener">hexo categories和tags页面不显示解决办法</a></p><p><a href="https://blog.csdn.net/u012307002/article/details/51298705" target="_blank" rel="noopener">hexo文章中插入图片</a></p><p><a href="https://segmentfault.com/q/1010000008494901" target="_blank" rel="noopener">hexo的NexT主题，怎么取消“文章目录”对标题的自动编号？</a></p><p><a href="https://blog.csdn.net/qq_32454537/article/details/79482896" target="_blank" rel="noopener">https://blog.csdn.net/qq_32454537/article/details/79482896</a></p><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo的next主题个性化教程：打造炫酷网站</a></p><p><a href="https://mmmmmm.me/" target="_blank" rel="noopener">Leesin’s Blog</a></p><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型预览</a></p><p><a href="http://www.aomanhao.top/2019/04/20/hexo_Tag_cloud/" target="_blank" rel="noopener">标签云</a></p><p><a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">图片放大</a></p><p><a href="https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%EF%BC%89/" target="_blank" rel="noopener">代码块按钮复制找他</a></p><p><a href="https://www.e-learn.cn/content/wangluowenzhang/481525" target="_blank" rel="noopener">复制成功提示</a>（这个测过了，我去找了个jq <code>tooltip</code> 插件，但是jquery冲突了。。。你要是成功了可以告诉我，谢谢）</p><p><a href="https://www.thinkcmf.com/font/font_awesome/icons.html" target="_blank" rel="noopener">图标大全</a></p><p><a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">文章置顶</a></p><p><a href="https://theme-next.org/docs/tag-plugins/note" target="_blank" rel="noopener">note</a></p><p><a href="https://jinfagang.github.io/2018/10/07/%E7%BB%88%E4%BA%8E%EF%BC%81%EF%BC%81%EF%BC%81%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8B%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">Gitalk评论系统</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/09/hello-world/"/>
      <url>/2019/05/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SellException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> docer </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十五篇（四）：SpringAOP实战</title>
      <link href="/2018/11/14/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ASpringAOP%E5%AE%9E%E6%88%98/"/>
      <url>/2018/11/14/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ASpringAOP%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>做个实战锻炼下自己</p><h2 id="实战案例背景"><a href="#实战案例背景" class="headerlink" title="实战案例背景"></a>实战案例背景</h2><ul><li>商家商品管理系统</li><li>记录产品的修改记录</li><li>什么人在什么时间修改了哪些产品的哪些字段以及修改前后的值</li></ul><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>利用 aspect 去拦截增删方法</li><li>利用反射去获取对象的新旧值</li><li>利用 @Around 的 advice 去记录操作记录</li></ul><h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542262541459.png" alt="1542262541459"></p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.1.0.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-aop：<strong>2.1.0.RELEASE</strong></li><li>spring-boot-starter-data-jpa：<strong>2.1.0.RELEASE</strong></li><li>spring-boot-starter-data-mongodb：<strong>2.1.0.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 反射工具类`PropertyUtils`在此包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring data jpa --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MongoDB 数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter25_4?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line">    <span class="comment"># 显示 sql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 数据库类型</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># JPA 配置</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 指定生成的表的引擎为InnoDB类型（默认是MyISAM，MyISAM不支持事务）</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL57InnoDBDialect</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line">      <span class="comment"># 默认uri`mongodb://localhost:27017/test`</span></span><br><span class="line">      <span class="comment"># 数据库有用户名和密码可参考：mongodb://name:password@localhost:27017/db</span></span><br><span class="line"><span class="comment">#      uri: mongodb://fatal:123456@localhost:27017/test</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">mongodb://localhost:27017/test</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="3、annotation"><a href="#3、annotation" class="headerlink" title="3、annotation"></a>3、annotation</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义`数据记录`注解</span></span><br><span class="line"><span class="comment"> * 功能：在类，方法或者属性上标注该注解，并赋予中文名称。后台自动通过反射</span></span><br><span class="line"><span class="comment"> * 将中文名称存入数据库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 中文名称 */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、enums"><a href="#4、enums" class="headerlink" title="4、enums"></a>4、enums</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ActionType &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT(<span class="string">"添加"</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE(<span class="string">"更新"</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DELETE(<span class="string">"删除"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">    ActionType(String name, <span class="keyword">int</span> code) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、utils"><a href="#5、utils" class="headerlink" title="5、utils"></a>5、utils</h2><h3 id="DifferentUtil"><a href="#DifferentUtil" class="headerlink" title="DifferentUtil"></a><code>DifferentUtil</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fatal.annotation.DataLog;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.ChangeItem;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.BeanInfo;</span><br><span class="line"><span class="keyword">import</span> java.beans.Introspector;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DifferentUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObjectById</span><span class="params">(Object target,Object id)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        Method findMethod = target.getClass().getDeclaredMethod(<span class="string">"findById"</span>, Long.class);</span><br><span class="line">        Object oldObj = findMethod.invoke(target,id);</span><br><span class="line">        Optional optional = (Optional) oldObj;</span><br><span class="line">        <span class="keyword">return</span> optional.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取新增操作的change item</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ChangeItem&gt; <span class="title">getInsertChangeItems</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; valueMap = getBeanSimpleFieldValueMap(obj,<span class="keyword">true</span>);</span><br><span class="line">        Map&lt;String,String&gt; fieldCnNameMap = getFieldNameMap(obj.getClass());</span><br><span class="line">        List&lt;ChangeItem&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry : valueMap.entrySet())&#123;</span><br><span class="line">            String fieldName = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            ChangeItem changeItem = <span class="keyword">new</span> ChangeItem();</span><br><span class="line">            <span class="comment">//set old value empty</span></span><br><span class="line">            changeItem.setOldValue(<span class="string">""</span>);</span><br><span class="line">            changeItem.setNewValue(value);</span><br><span class="line">            changeItem.setField(fieldName);</span><br><span class="line">            String cnName = fieldCnNameMap.get(fieldName);</span><br><span class="line">            changeItem.setFieldShowName(StringUtils.isEmpty(cnName) ? fieldName : cnName);</span><br><span class="line">            items.add(changeItem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取删除操作的change item</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChangeItem <span class="title">getDeleteChangeItem</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        ChangeItem changeItem = <span class="keyword">new</span> ChangeItem();</span><br><span class="line">        changeItem.setOldValue(JSON.toJSONString(obj));</span><br><span class="line">        changeItem.setNewValue(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> changeItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取更新操作的change item</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldObj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newObj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ChangeItem&gt; <span class="title">getChangeItems</span><span class="params">(Object oldObj, Object newObj)</span> </span>&#123;</span><br><span class="line">        Class cl = oldObj.getClass();</span><br><span class="line">        List&lt;ChangeItem&gt; changeItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取字段中文名称</span></span><br><span class="line">        Map&lt;String,String&gt; fieldCnNameMap = getFieldNameMap(cl);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取实体信息</span></span><br><span class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(cl, Object.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) &#123;</span><br><span class="line">                String field = propertyDescriptor.getName();</span><br><span class="line">                <span class="comment">//获取字段旧值</span></span><br><span class="line">                String oldProp = getValue(PropertyUtils.getProperty(oldObj, field));</span><br><span class="line">                <span class="comment">//获取字段新值</span></span><br><span class="line">                String newProp = getValue(PropertyUtils.getProperty(newObj, field));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//对比新旧值</span></span><br><span class="line">                <span class="keyword">if</span> (!oldProp.equals(newProp)) &#123;</span><br><span class="line">                    ChangeItem changeItem = <span class="keyword">new</span> ChangeItem();</span><br><span class="line">                    changeItem.setField(field);</span><br><span class="line">                    String cnName = fieldCnNameMap.get(field);</span><br><span class="line">                    changeItem.setFieldShowName(StringUtils.isEmpty(cnName) ? field : cnName);</span><br><span class="line">                    changeItem.setNewValue(newProp);</span><br><span class="line">                    changeItem.setOldValue(oldProp);</span><br><span class="line">                    changeItems.add(changeItem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"There is error when convert change item"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changeItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不同类型转字符串的处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">                <span class="keyword">return</span> formatDateW3C((Date) obj);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从注解读取中文名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">getFieldNameMap</span><span class="params">(Class&lt;?&gt; clz)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (Field field : clz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(DataLog.class)) &#123;</span><br><span class="line">                DataLog datalog = field.getAnnotation(DataLog.class);</span><br><span class="line">                map.put(field.getName(),datalog.name());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将date类型转为字符串形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDateW3C</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ssZ"</span>);</span><br><span class="line">        String text = df.format(date);</span><br><span class="line">        String result = text.substring(<span class="number">0</span>, <span class="number">22</span>) + <span class="string">":"</span> + text.substring(<span class="number">22</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean的fieldName和value</span></span><br><span class="line"><span class="comment">     * 只获取简单类型，不获取复杂类型，包括集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">getBeanSimpleFieldValueMap</span><span class="params">(Object bean, <span class="keyword">boolean</span> filterNull)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(bean)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//不获取父类的字段</span></span><br><span class="line">            Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">                Class&lt;?&gt; fieldType = fields[i].getType();</span><br><span class="line">                String name = fields[i].getName();</span><br><span class="line">                <span class="comment">// 获取 getXXX()</span></span><br><span class="line">                Method method = clazz.getMethod(<span class="string">"get"</span> + name.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + name.substring(<span class="number">1</span>));</span><br><span class="line">                Object value = method.invoke(bean);</span><br><span class="line">                <span class="keyword">if</span> (filterNull &amp;&amp; ObjectUtils.isEmpty(value)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isBaseDataType(fieldType)) &#123;</span><br><span class="line"><span class="comment">//                    String strValue = getFieldStringValue(fieldType,value);</span></span><br><span class="line">                    String strValue = getValue(value);</span><br><span class="line">                    map.put(name,strValue);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义不同类型的string值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldStringValue</span><span class="params">(Class type,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(Date.class))&#123;</span><br><span class="line">            SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">            <span class="keyword">return</span> formatter.format((Date)value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个类是否为基本数据类型或包装类，或日期。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 要判断的类。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 表示为基本数据类型。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBaseDataType</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                (</span><br><span class="line">                        clazz.equals(String.class) ||</span><br><span class="line">                                clazz.equals(Integer.class) ||</span><br><span class="line">                                clazz.equals(Byte.class) ||</span><br><span class="line">                                clazz.equals(Long.class) ||</span><br><span class="line">                                clazz.equals(Double.class) ||</span><br><span class="line">                                clazz.equals(Float.class) ||</span><br><span class="line">                                clazz.equals(Character.class) ||</span><br><span class="line">                                clazz.equals(Short.class) ||</span><br><span class="line">                                clazz.equals(BigDecimal.class) ||</span><br><span class="line">                                clazz.equals(BigInteger.class) ||</span><br><span class="line">                                clazz.equals(Boolean.class) ||</span><br><span class="line">                                clazz.equals(Date.class) ||</span><br><span class="line">                                clazz.isPrimitive()</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReflectUtil"><a href="#ReflectUtil" class="headerlink" title="ReflectUtil"></a><code>ReflectUtil</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 7:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性集合（private + 继承的）</span></span><br><span class="line"><span class="comment">     * 适用于实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 实体字节码文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;String&gt; <span class="title">getFields</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        Class&lt;? <span class="keyword">super</span> T&gt; superclass = clazz.getSuperclass();</span><br><span class="line">        Field[] fields = superclass.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 过滤出 protected 属性</span></span><br><span class="line">        List&lt;Field&gt; superProtectedFields = Arrays.stream(fields)</span><br><span class="line">                .filter(field -&gt; (field.getModifiers() &amp; Modifier.PROTECTED) != <span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 过滤出 private 属性</span></span><br><span class="line">        List&lt;Field&gt; privateFields = Arrays.stream(declaredFields)</span><br><span class="line">                .filter(field -&gt; (field.getModifiers() &amp; Modifier.PRIVATE) != <span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 子类属性集合（private + 继承的）</span></span><br><span class="line">        privateFields.addAll(superProtectedFields);</span><br><span class="line">        <span class="keyword">return</span> privateFields.stream()</span><br><span class="line">                .map(Field::getName)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、entity"><a href="#6、entity" class="headerlink" title="6、entity"></a>6、entity</h2><h3 id="ChangeItem-java"><a href="#ChangeItem-java" class="headerlink" title="ChangeItem.java"></a><code>ChangeItem.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `操作细项`实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 11:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 属性名 */</span></span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 属性中文名 */</span></span><br><span class="line">    <span class="keyword">private</span> String fieldShowName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 原值 */</span></span><br><span class="line">    <span class="keyword">private</span> String oldValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 新值 */</span></span><br><span class="line">    <span class="keyword">private</span> String newValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Product-java"><a href="#Product-java" class="headerlink" title="Product.java"></a><code>Product.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.annotation.DataLog;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Produt 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 10:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"产品名称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"商品类别"</span>)</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"商品详情"</span>)</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"买入价"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer buyPrice;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"卖出价"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer sellPrice;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"供应商"</span>)</span><br><span class="line">    <span class="keyword">private</span> String provider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"更新时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataLog</span>(name = <span class="string">"上线时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date onlineTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action-java"><a href="#Action-java" class="headerlink" title="Action.java"></a><code>Action.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.enums.ActionType;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `操作记录`实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作对象的id，这里指的是Product的id */</span></span><br><span class="line">    <span class="keyword">private</span> Long objectId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作对象的Class，这里指的是Product的Class */</span></span><br><span class="line">    <span class="keyword">private</span> String objectClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作人 */</span></span><br><span class="line">    <span class="keyword">private</span> String operator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作时间 */</span></span><br><span class="line">    <span class="keyword">private</span> Date operateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 操作类型 */</span></span><br><span class="line">    <span class="keyword">private</span> ActionType actionType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** `操作细项`集合 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ChangeItem&gt; changes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fu-java"><a href="#Fu-java" class="headerlink" title="Fu.java"></a><code>Fu.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/8 0008 17:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String privateFu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String fuName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Integer fuAge;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="zi-java"><a href="#zi-java" class="headerlink" title="zi.java"></a><code>zi.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/8 0008 17:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String publicZi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ziName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer ziAge;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、dao"><a href="#7、dao" class="headerlink" title="7、dao"></a>7、dao</h2><h3 id="ProductDao-java"><a href="#ProductDao-java" class="headerlink" title="ProductDao.java"></a><code>ProductDao.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Product;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product 数据库访问层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 10:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后面反射要用到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aLong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Optional&lt;Product&gt; <span class="title">findById</span><span class="params">(Long aLong)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ActionDao-java"><a href="#ActionDao-java" class="headerlink" title="ActionDao.java"></a><code>ActionDao.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Action;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActionDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Action</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、aspect"><a href="#8、aspect" class="headerlink" title="8、aspect"></a>8、aspect</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.ActionDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Action;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.ChangeItem;</span><br><span class="line"><span class="keyword">import</span> com.fatal.enums.ActionType;</span><br><span class="line"><span class="keyword">import</span> com.fatal.util.DifferentUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/15 0015 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 实体id */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ID = <span class="string">"id"</span>;</span><br><span class="line">    <span class="comment">/** 保存、更新的方法名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SAVE = <span class="string">"save"</span>;</span><br><span class="line">    <span class="comment">/** 删除的方法名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DELETE = <span class="string">"deleteById"</span>;</span><br><span class="line">    <span class="comment">/** 操作者 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ADMIN = <span class="string">"admin"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActionDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.fatal.dao.ProductDao.save*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.fatal.dao.ProductDao.delete*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、判断操作的类型 -- 增加、删除或者更新（增加和更新通过id区分）</span></span><br><span class="line"><span class="comment">     * 2、获取ChangeItem</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"save() || delete()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">addOperateLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        Action action = <span class="keyword">new</span> Action();</span><br><span class="line">        ActionType actionType = <span class="keyword">null</span>;</span><br><span class="line">        Object oldObj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获得方法名</span></span><br><span class="line">        String method = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">// 获取切点参数。update -&gt; Product, delete -&gt; id</span></span><br><span class="line">        Object joinPointArg = joinPoint.getArgs()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        Long id = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (method.contains(DELETE)) &#123;</span><br><span class="line">            id = (Long) joinPointArg;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 先判断有没有id</span></span><br><span class="line">            Object property = PropertyUtils.getProperty(joinPointArg, ID);</span><br><span class="line">            <span class="keyword">if</span> (!ObjectUtils.isEmpty(property)) &#123;</span><br><span class="line">                id = Long.valueOf(property.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(id)) &#123;</span><br><span class="line">            <span class="comment">// 新增</span></span><br><span class="line">            actionType = ActionType.INSERT;</span><br><span class="line">            action.setObjectClass(joinPointArg.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.contains(SAVE)) &#123;</span><br><span class="line">                <span class="comment">// 更新</span></span><br><span class="line">                actionType = ActionType.UPDATE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.contains(DELETE)) &#123;</span><br><span class="line">                <span class="comment">// 删除</span></span><br><span class="line">                actionType = ActionType.DELETE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过切点的父类反射获得 findById()。然后拿id通过反射去数据库查原始数据</span></span><br><span class="line">            oldObj = DifferentUtil.getObjectById(joinPoint.getTarget(), id);</span><br><span class="line">            action.setObjectClass(oldObj.getClass().getName());</span><br><span class="line">            action.setObjectId(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ======      实际方法的调用 begin      ======</span></span><br><span class="line">        Object result = joinPoint.proceed(joinPoint.getArgs());</span><br><span class="line">        <span class="comment">// =========           end          =========</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(id)) &#123;</span><br><span class="line">            <span class="comment">// 新增后的实体中是存在id的</span></span><br><span class="line">            Long newId = Long.valueOf(PropertyUtils.getProperty(result, ID).toString());</span><br><span class="line">            action.setObjectId(newId);</span><br><span class="line">            List&lt;ChangeItem&gt; changeItems = DifferentUtil.getInsertChangeItems(joinPointArg);</span><br><span class="line">            action.getChanges().addAll(changeItems);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (SAVE.equals(method)) &#123;</span><br><span class="line">                <span class="comment">// 更新</span></span><br><span class="line">                List&lt;ChangeItem&gt; changeItems = DifferentUtil.getChangeItems(oldObj, joinPointArg);</span><br><span class="line">                action.getChanges().addAll(changeItems);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DELETE.equals(method)) &#123;</span><br><span class="line">                <span class="comment">// 删除</span></span><br><span class="line">                ChangeItem changeItem = DifferentUtil.getDeleteChangeItem(oldObj);</span><br><span class="line">                action.getChanges().add(changeItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        action.setOperateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        action.setOperator(ADMIN);</span><br><span class="line">        action.setActionType(actionType);</span><br><span class="line">        <span class="comment">// 保存操作数据</span></span><br><span class="line">        dao.save(action);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、Test"><a href="#9、Test" class="headerlink" title="9、Test"></a>9、Test</h2><h3 id="Chapter254ApplicationTests"><a href="#Chapter254ApplicationTests" class="headerlink" title="Chapter254ApplicationTests"></a><code>Chapter254ApplicationTests</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Example;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter254ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product()</span><br><span class="line">                .setDetail(<span class="string">"detail"</span>)</span><br><span class="line">                .setName(<span class="string">"童年·在人间·我的大学"</span>)</span><br><span class="line">                .setBuyPrice(<span class="number">2950</span>)</span><br><span class="line">                .setSellPrice(<span class="number">3500</span>)</span><br><span class="line">                .setProvider(<span class="string">"fatal"</span>)</span><br><span class="line">                .setCategory(<span class="string">"book"</span>)</span><br><span class="line">                .setOnlineTime(<span class="keyword">new</span> Date())</span><br><span class="line">                .setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        productDao.save(product);</span><br><span class="line">        System.out.println(<span class="string">"new product id:"</span>+product.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> Product().setId(<span class="number">1L</span>);</span><br><span class="line">        product = productDao.findOne(Example.of(product)).orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (product != <span class="keyword">null</span>) &#123;</span><br><span class="line">            product.setName(<span class="string">"偷影子的人"</span>)</span><br><span class="line">                .setBuyPrice(<span class="number">2350</span>)</span><br><span class="line">                .setOnlineTime(<span class="keyword">new</span> Date());</span><br><span class="line">            productDao.save(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        productDao.deleteById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReflectTests"><a href="#ReflectTests" class="headerlink" title="ReflectTests"></a><code>ReflectTests</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Zi;</span><br><span class="line"><span class="keyword">import</span> com.fatal.utils.ReflectUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 7:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getBeanInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.setZiName(<span class="string">"zi"</span>);</span><br><span class="line">        zi.setZiAge(<span class="number">18</span>);</span><br><span class="line">        zi.setFuName(<span class="string">"fu"</span>);</span><br><span class="line">        zi.setFuAge(<span class="number">42</span>);</span><br><span class="line">        Class&lt;? extends Zi&gt; ziClass = zi.getClass();</span><br><span class="line">        List&lt;String&gt; fields = ReflectUtil.getFields(ziClass);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 实体属性值映射（这里没有考虑复杂类型，需要的话自行调整）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Object&gt; map = fields.stream()</span><br><span class="line">                .collect(Collectors.toMap(Function.identity(), field -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Method method = ziClass.getMethod(<span class="string">"get"</span> + field.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + field.substring(<span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">return</span> method.invoke(zi);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">        map.entrySet().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><ol><li><p>运行 <code>Chapter254ApplicationTests.testInsert()</code></p><ul><li>控制台</li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446272983.png" alt="1542446272983"></p><ul><li>mongodb图形化界面</li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446038908.png" alt="1542446038908"></p><ul><li><p>mysql数据库</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446344229.png" alt="1542446344229"></p></li></ul></li><li><p>运行<code>Chapter254ApplicationTests.testUpdate()</code></p><ul><li><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446516892.png" alt="1542446516892"></p></li><li><p>mongodb图形化界面</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446599557.png" alt="1542446599557"></p></li><li><p>mysql数据库</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542446623080.png" alt="1542446623080"></p></li></ul></li><li><p>运行<code>Chapter254ApplicationTests.testDelete()</code></p><ul><li><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542452140155.png" alt="1542452140155"></p></li><li><p>mongodb图形化界面</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542452321036.png" alt="1542452321036"></p></li><li><p>mysql数据库</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542452159967.png" alt="1542452159967"></p></li></ul></li><li><p>运行 <code>ReflectTests.getBeanInfo()</code> </p><ul><li><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1565308583525.png" alt="1565308583525"></p></li></ul></li></ol><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li>利用反射获取新旧值</li><li>利用Aroud的advice去记录修改记录</li><li>利用注解去增加中文名称字段名</li></ul><p>反射知识复习：</p><ul><li>getFields()：获得某个类的所有的公共（public）的字段，包括父类中的字段。</li><li>getDeclaredFields()：获得某个类的所有声明的字段，即包括public、private和protected，但是不包括父类的声明字段。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">探秘Spring AOP</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_4" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_4</a></p><h4 id="学习-apollo-0001-前辈的经验"><a href="#学习-apollo-0001-前辈的经验" class="headerlink" title="学习 apollo_0001 前辈的经验"></a>学习 <a href="https://www.imooc.com/u/239819/courses?sort=publish" target="_blank" rel="noopener">apollo_0001</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十五篇（三）：SpringAOP的实现原理</title>
      <link href="/2018/11/12/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ASpringAOP%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2018/11/12/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ASpringAOP%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>​        从上一篇的笔记中，我们可以了解到 SpringAOP 的使用详情。这篇笔记将对 SpringAOP 实现原理的理解做一些记录。</p><h2 id="1、织入与织入的时期"><a href="#1、织入与织入的时期" class="headerlink" title="1、织入与织入的时期"></a>1、织入与织入的时期</h2><h3 id="1-1、何为织入？"><a href="#1-1、何为织入？" class="headerlink" title="1.1、何为织入？"></a>1.1、何为织入？</h3><p>​        织入是 <strong>把切面应用到目标对象并创建新的代理对象的过程</strong>。在目标对象的生命周期里有 <strong>3 个时期</strong> 可以进行织入，这三个时期分别为 <strong>编译期，类加载期、运行期</strong>。</p><h3 id="1-2、织入的时期"><a href="#1-2、织入的时期" class="headerlink" title="1.2、织入的时期"></a>1.2、织入的时期</h3><ol><li>编译期——切面在目标类编译时期被织入，这种方式需要特殊的编译器。AspectJ 的织入编译器就是以这种方式织入切面。</li><li>类加载期——切面在目标类加载到 JVM 时被织入 ，这种方式需要特殊的类加载器，他可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5 的 加载时织入（load-time weaving，LTW） 就支持这种织入方式</li><li>运行期——切面在应用运行期间的某个时刻被织入。一般情况下，在织入切面的时候，AOP 容器会为目标对象动态的创建代理对象。Spring AOP 就是以这种方式织入切面。（==<strong>√</strong>==）</li></ol><h2 id="2、原理概述：运行时织入"><a href="#2、原理概述：运行时织入" class="headerlink" title="2、原理概述：运行时织入"></a>2、原理概述：运行时织入</h2><ul><li>运行时织入是怎么实现的？    答案是代理对象</li><li>从静态代理到动态代理</li><li>基于接口代理与基于继承代理</li></ul><h2 id="3、代理模式"><a href="#3、代理模式" class="headerlink" title="3、代理模式"></a>3、代理模式</h2><h3 id="3-1、静态代理"><a href="#3-1、静态代理" class="headerlink" title="3.1、静态代理"></a>3.1、静态代理</h3><p>​        在程序运行前，由程序员创建或特定工具自动生成源代码并对其编译生成 <code>.class</code> 文件。代理类和委托类的关系在 <strong>运行前</strong> 就确定了。</p><p><strong>缺点：</strong></p><p>​        不是实现 AOP 的 <strong>don’t repeat yourself</strong>。如果需要被代理的类有很多个方法，那么静态代理需要重复好多次，那不得累死。所以 <strong>动态代理</strong> 出现啦 ~ ~ ~</p><h3 id="3-2、动态代理-（SpringAOP-底层实现机制）"><a href="#3-2、动态代理-（SpringAOP-底层实现机制）" class="headerlink" title="3.2、动态代理 （SpringAOP 底层实现机制）"></a>3.2、动态代理 （SpringAOP 底层实现机制）</h3><p>在实现阶段不用关心代理类，而在 <strong>运行阶段</strong> 才指定哪一个对象</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541989807821.png" alt="1541989807821"></p><ul><li><p>jdk 动态代理（优先）： 针对实现了接口的类产生的代理（基于接口）</p><p>原理：实现目标对象实现的 <strong>所有</strong> 接口</p></li><li><p>cglib 代理：针对没有实现接口的类产生的代理，应用的是底层的 <strong>字节码增强技术</strong>，生成当前类的子类对象（基于继承）</p><p>时序图：</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542160012381.png" alt="1542160012381"></p></li></ul><h4 id="动态代理怎么体现动态？"><a href="#动态代理怎么体现动态？" class="headerlink" title="动态代理怎么体现动态？"></a>动态代理怎么体现动态？</h4><p>以 <strong>jdk 代理</strong>为例子</p><p>这里有一个参数，把它设置为 true 后，运行后会把 jdk 代理生成的 class 文件保存下来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><p>运行后可以看到项目的跟目录多了个文件夹</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542094527397.png" alt="1542094527397"></p><p>打开这个文件，可以看到，该代理类对被代理类的每个方法都进行了增强操作。</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542094656437.png" alt="1542094656437"></p><p>那这怎么体现出<strong>动态</strong>代理呢？</p><p>你可以尝试下，只要你往被代理类的接口添加多少个方法（当然你肯定要实现了这些方法）。并不需要我们手写其他代码就能动态增强被代理类的方法了。</p><p>加完方法后运行，你会发现 被代理类的 class 文件已经帮我们增强了~ ~ ~ </p><h3 id="3-3、jdk-代理和-cglib-代理对比"><a href="#3-3、jdk-代理和-cglib-代理对比" class="headerlink" title="3.3、jdk 代理和 cglib 代理对比"></a>3.3、jdk 代理和 cglib 代理对比</h3><ul><li><strong>jdk</strong> 代理 <strong>只</strong> 能针对实现接口的类的 <strong>实现方法</strong> 进行动态代理</li><li><strong>cglib</strong> 代理基于继承来实现代理，无法对 <strong>static、final 修饰的<code>类</code></strong> 进行代理</li><li><strong>cglib</strong> 代理基于继承来实现代理，无法对 <strong>private、static 修饰的<code>方法</code></strong> 进行代理</li></ul><h3 id="3-4、SpringAOP对两种实现的选择"><a href="#3-4、SpringAOP对两种实现的选择" class="headerlink" title="3.4、SpringAOP对两种实现的选择"></a>3.4、SpringAOP对两种实现的选择</h3><ul><li>如果目标对象<strong>实现了接口</strong>，则默认采用 <strong>jdk 动态代理</strong></li><li>如果目标对象<strong>没有实现接口</strong>，则采用 <strong>cglib 动态代理</strong></li><li>如果目标对象<strong>实现了接口</strong>，且<strong>强制 cglib 动态代理</strong>，则使用 <strong>cglib 动态代理</strong></li></ul><p>那么如何强制使用 cglib 代理呢？</p><p>在配置类（启动类也属于配置类）中加上 <code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code> 即可</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542159877810.png" alt="1542159877810"></p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.1.0.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-aop：<strong>2.1.0.RELEASE</strong></li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h5 id="ISubject-java"><a href="#ISubject-java" class="headerlink" title="ISubject.java"></a><code>ISubject.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 增强 */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 不增强 */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RealSubject-java"><a href="#RealSubject-java" class="headerlink" title="RealSubject.java"></a><code>RealSubject.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 11:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"被代理类RealSubject被访问了(需要增强)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"被代理类RealSubject被访问了(不需要增强)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Proxy-java"><a href="#Proxy-java" class="headerlink" title="Proxy.java"></a><code>Proxy.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 被代理对象 */</span></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(RealSubject realSubject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======  before  ======"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realSubject.request();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 注意：代理类不会改变被代理类的方法。如果代理类有异常抛出，那么被代理类也要抛出。</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"======  after  ======"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        realSubject.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client-java"><a href="#Client-java" class="headerlink" title="Client.java"></a><code>Client.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.static_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ISubject subject = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> RealSubject());</span><br><span class="line">        subject.request();</span><br><span class="line">        System.out.println();</span><br><span class="line">        subject.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h5><p>启动 <code>Client.main()</code> ，控制台如下</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542015151782.png" alt="1542015151782"></p><h3 id="jdk-代理"><a href="#jdk-代理" class="headerlink" title="jdk 代理"></a>jdk 代理</h3><h5 id="ISubject-java-1"><a href="#ISubject-java-1" class="headerlink" title="ISubject.java"></a><code>ISubject.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 14:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RealSubject-java-1"><a href="#RealSubject-java-1" class="headerlink" title="RealSubject.java"></a><code>RealSubject.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 14:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是被代理类，记得要执行我哦！！么么哒 ~ ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MyInvocationHandler-java"><a href="#MyInvocationHandler-java" class="headerlink" title="MyInvocationHandler.java"></a><code>MyInvocationHandler.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.jdk_dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义调用处理程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 声明被代理对象 */</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化被代理对象</span></span><br><span class="line"><span class="comment">     * 动态创建代理类并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">binding</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ClassLoader loader: 被代理类的类加载器</span></span><br><span class="line"><span class="comment">         * Class&lt;?&gt;[] interfaces: 被代理类实现的所有方法</span></span><br><span class="line"><span class="comment">         * InvocationHandler h: 调用程序处理器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.obj.getClass().getClassLoader()</span><br><span class="line">            ,<span class="keyword">this</span>.obj.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 书写增强逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 实际方法参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 对参数`args`进行处理</span></span><br><span class="line">        System.out.println(<span class="string">"========    已对参数进行处理    ========"</span>);</span><br><span class="line"></span><br><span class="line">        Object invoke = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"before in jdk proxy"</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Object invoke(Object obj, Object... args)</span></span><br><span class="line"><span class="comment">             * Object obj:被代理对象</span></span><br><span class="line"><span class="comment">             * Object... args:实际方法参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            invoke = method.invoke(obj, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// 注意：代理类不会改变被代理类的方法。如果代理类有异常抛出，那么被代理类也要抛出。</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after in jdk proxy"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对返回结果`invoke`进行处理</span></span><br><span class="line">        System.out.println(<span class="string">"========    已对返回结果进行处理    ========"</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client-java-1"><a href="#Client-java-1" class="headerlink" title="Client.java"></a><code>Client.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加这个参数，会保存 jdk 代理生成的 class 文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 创建被代理对象 */</span></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="comment">/** 创建 InvocationHandler 对象 */</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 将被代理对象绑定到 InvocationHandler，并获得一个代理对象 */</span></span><br><span class="line">        Object binding = handler.binding(realSubject);</span><br><span class="line"></span><br><span class="line">        ISubject proxy = (ISubject) binding;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 调用被增强的方法 */</span></span><br><span class="line">        proxy.action();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h5><p>启动 <code>Client.main()</code> ，控制台如下</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542102622514.png" alt="1542102622514"></p><h3 id="cglib-代理"><a href="#cglib-代理" class="headerlink" title="cglib 代理"></a>cglib 代理</h3><h5 id="MyMethodInterceptor-java"><a href="#MyMethodInterceptor-java" class="headerlink" title="MyMethodInterceptor.java"></a><code>MyMethodInterceptor.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.cglib_dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义方法拦截器</span></span><br><span class="line"><span class="comment"> * 功能与jdk动态代理的InvocationHandler差不多。</span></span><br><span class="line"><span class="comment"> * 都是通过反射增强目标对象的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/13 0013 17:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 声明被代理对象 */</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化被代理对象</span></span><br><span class="line"><span class="comment">     * 动态创建代理类并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">binding</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Class type: 被代理类的字节码对象</span></span><br><span class="line"><span class="comment">         * Callback callback: 自定义的MethodInterceptor实现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Enhancer.create(<span class="keyword">this</span>.obj.getClass(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 所有生成的代理方法都调用此方法而不是原始方法。原始方法可以通过使用方法对象的普通反射调用，也可以通过使用methodproxy（更快）调用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 增强的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用父类（未拦截的）方法，可根据需要多次调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对参数`args`进行处理</span></span><br><span class="line">        System.out.println(<span class="string">"========    已对参数进行处理    ========"</span>);</span><br><span class="line"></span><br><span class="line">        Object invoke = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"before in cglib proxy"</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * invokeSuper(Object obj, Object[] args)</span></span><br><span class="line"><span class="comment">             * Object obj:被代理对象</span></span><br><span class="line"><span class="comment">             * Object... args:实际方法参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">// 使用 MethodProxy</span></span><br><span class="line">            invoke = methodProxy.invokeSuper(obj, args);</span><br><span class="line">            <span class="comment">// 使用方法对象的普通反射调用</span></span><br><span class="line"><span class="comment">//            invoke = method.invoke(this.obj, args);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// 注意：代理类不会改变被代理类的方法。如果代理类有异常抛出，那么被代理类也要抛出。</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"after in cglib proxy"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对返回结果`invoke`进行处理</span></span><br><span class="line">        System.out.println(<span class="string">"========    已对返回结果进行处理    ========"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client-java-2"><a href="#Client-java-2" class="headerlink" title="Client.java"></a><code>Client.java</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.cglib_dynamic_proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.jdk_dynamic_proxy.ISubject;</span><br><span class="line"><span class="keyword">import</span> com.fatal.jdk_dynamic_proxy.RealSubject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/12 0012 15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 创建被代理对象 */</span></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="comment">/** 创建 MethodInterceptor 对象 */</span></span><br><span class="line">        MyMethodInterceptor interceptor = <span class="keyword">new</span> MyMethodInterceptor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 将被代理对象绑定到 InvocationHandler，并获得一个代理对象 */</span></span><br><span class="line">        Object binding = interceptor.binding(realSubject);</span><br><span class="line"></span><br><span class="line">        ISubject proxy = (ISubject) binding;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 调用被增强的方法 */</span></span><br><span class="line">        proxy.action();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="显示-2"><a href="#显示-2" class="headerlink" title="显示"></a>显示</h5><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1542103636147.png" alt="1542103636147"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">探秘Spring AOP</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_3" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_3</a></p><h4 id="学习-apollo-0001-前辈的经验"><a href="#学习-apollo-0001-前辈的经验" class="headerlink" title="学习 apollo_0001 前辈的经验"></a>学习 <a href="https://www.imooc.com/u/239819/courses?sort=publish" target="_blank" rel="noopener">apollo_0001</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十五篇（二）：SpringAOP使用详情</title>
      <link href="/2018/11/10/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ASpringAOP%E4%BD%BF%E7%94%A8%E8%AF%A6%E6%83%85%20/"/>
      <url>/2018/11/10/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ASpringAOP%E4%BD%BF%E7%94%A8%E8%AF%A6%E6%83%85%20/</url>
      
        <content type="html"><![CDATA[<p>​        从上一篇的案例中我们可以看到 Spring AOP 已经初露锋芒了。接下来我们将详细介绍 Spring AOP 的详细使用。Spring AOP 使用方式有两种：XML 配置 和 <strong>注解方式</strong>。本篇笔记都是基于注解形式的。</p><h2 id="名称介绍"><a href="#名称介绍" class="headerlink" title="名称介绍"></a>名称介绍</h2><ul><li><p>切面（Aspect）：通知 + 切点 = 切面</p></li><li><p>切点（Pointcut）：如果通知定义了“什么”和“何时”。那么切点就定义了“何处”。切点会匹配通知所要织入的一个或者多个连接点。</p></li><li><p>通知（Advice）：通知定义了切面是什么以及何时使用。除了秒速切面要完成的工作，通知还解决了何时执行这个工作的问题。通知分为 <strong>前置通知、后置通知、返回通知、异常通知、环绕通知</strong>。</p></li><li><p>连接点（JoinPoint）：连接点是一个应用执行过程中能够插入一个切面的点。就是spring允许你是通知（Advice）的地方，那可就真多了，基本每个方法的前、后（两者都有也行），或抛出异常是时都可以是连接点，spring只支持方法连接点。其他如AspectJ还可以让你在构造器或属性注入时都行，不过那不是咱们关注的，只要记住，和方法有关的前前后后都是连接点。</p></li><li><p>引入（Introduction）：引入允许我们向现有的类添加新方法或属性（以后有空再研究）</p></li><li><p>目标（Target）：引入中所提到的目标类，也就是要被通知的对象</p></li><li><p>织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期里有3个点可以进行织入</p><ol><li><p>编译期——切面在目标类编译时期被织入，这种方式需要特殊的编译器。AspectJ 的织入编译器就是以这种方式织入切面。</p></li><li><p>类加载期——切面在目标类加载到JVM时被织入 ，这种方式需要特殊的类加载器，他可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5 的 加载时织入（load-time weaving，LTW） 就支持这种织入方式</p></li><li><p>运行期——切面在应用运行期间的某个时刻被织入。一般情况下，在织入切面的时候，AOP 容器会为目标对象动态的创建代理对象。Spring AOP 就是以这种方式织入切面。</p></li></ol></li></ul><h2 id="AspectJ-注解"><a href="#AspectJ-注解" class="headerlink" title="AspectJ 注解"></a>AspectJ 注解</h2><h3 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h3><ul><li><strong>@Aspect</strong>：标注该类为切面类</li></ul><h3 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h3><ul><li><strong>@Ponitcut</strong>：标注的方法为切点</li></ul><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><ul><li><p><strong>@Before</strong>：在目标方法被调用之前调用通知功能</p></li><li><p><strong>@After</strong>：在目标方法完成之后调用通知，无论方法执行成功与否</p></li><li><p><strong>@AfterReturning</strong>：在目标方法成功执行之后调用</p></li><li><p><strong>@AfterThrowing</strong>：在目标方法抛出异常时调用通知</p></li><li><p><strong>@Around</strong>：环绕通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</p></li></ul><h2 id="Pointcut-expression"><a href="#Pointcut-expression" class="headerlink" title="Pointcut expression"></a>Pointcut expression</h2><p>切点表达式分为三部分：designators、wildcards、operators。</p><h3 id="designators（指示器）"><a href="#designators（指示器）" class="headerlink" title="designators（指示器）"></a>designators（指示器）</h3><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541831050337.png" alt="1541831050337"></p><h4 id="1-匹配方法"><a href="#1-匹配方法" class="headerlink" title="1. 匹配方法"></a>1. 匹配方法</h4><ul><li><p><code>execution()</code>（<strong>重点掌握</strong>）</p><ul><li><p><code>@Pointcut(&quot;execution(public * com.fatal.service.*Service.*(..))&quot;)</code></p><blockquote><p>匹配任意返回值，service包下的以Service结尾的所有方法</p></blockquote></li><li><p><code>@Pointcut(&quot;execution(public * com.fatal.service..*Service.*(..))&quot;)</code></p><blockquote><p>匹配任意返回值，service包及其子包下的以Service结尾的所有方法</p></blockquote></li><li><p><code>@Pointcut(&quot;execution(public String com.fatal.service..*Service.*(..))&quot;)</code></p><blockquote><p>匹配返回String类型，service包及其子包下的以Service结尾的所有方法</p></blockquote></li><li><p><code>@Pointcut(&quot;execution(public * com.fatal.service..*Service.*(..) throws *)&quot;)</code></p><blockquote><p>匹配任意返回值，service包及其子包下的以Service结尾，<strong>可能</strong>抛出任意异常的所有方法（只有方法上面标注了 throws … 才会被匹配到）</p></blockquote><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541846683426.png" alt="1541846683426"></p></li></ul></li></ul><h4 id="2-匹配注解"><a href="#2-匹配注解" class="headerlink" title="2. 匹配注解"></a>2. 匹配注解</h4><ul><li><p><code>@annotation()</code>（关注点为<strong>方法级别</strong>）</p><ul><li><p><strong>@Pointcut(“@annotation(com.fatal.anno.AdminOnly)”)</strong></p><blockquote><p>匹配所有标注有<code>@AdminOnly</code>注解的方法</p></blockquote></li></ul></li><li><p><code>@within()</code>（关注点为<strong>类级别</strong>）</p><ul><li><p><strong>@Pointcut(“@within(com.fatal.anno.NeedSecured)”)</strong></p><blockquote><p>匹配所有标注有<code>@NeedSecured</code>的类的所有方法，要求 annotation 的 RetentionPolity 为 <strong>CLASS</strong></p></blockquote></li></ul></li><li><p><code>@target()</code>（关注点为<strong>类级别</strong>）与 within() 一起用</p><ul><li><p><strong>@Pointcut(“@target(com.fatal.anno.NeedSecured)”)</strong></p><blockquote><p>匹配所有标注有<code>@NeedSecured</code>的类的所有方法，</p><p>要求： annotation 的 RetentionPolity 为 RUNTIME ；必须与 <strong>within()</strong> 一起用</p></blockquote></li></ul></li><li><p><code>@args()</code>（关注点为<strong>参数级别</strong>）与 within() 一起用</p><ul><li><p><strong>@Pointcut(“@args(com.fatal.anno.NeedSecured)”)</strong></p><blockquote><p>匹配传入的参数类标注有<code>@NeedSecured</code>的方法；要求必须与 <strong>within()</strong> 一起用</p></blockquote></li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541844605143.png" alt="1541844605143"></p></li></ul><h5 id="within-和-target-的区别"><a href="#within-和-target-的区别" class="headerlink" title="@within() 和 @target() 的区别"></a>@within() 和 @target() 的区别</h5><blockquote><p>在 Spring 环境下的话，也就是我们<code>演示的环境</code>，它们<code>没有任何区别</code>；当不在 Spring 环境下的时候，它们的区别如下：</p></blockquote><ul><li>要求 <strong>annotation</strong> 的 <strong>RetentPolicy</strong> 为 <strong>class</strong> 级别</li><li>要求 <strong>annotation</strong> 的 <strong>RetentPolicy</strong> 为 <strong>runtime</strong> 级别</li></ul><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>​        这里补充一下，使用 <code>@target()</code> 和 <code>@args()</code> <strong>必须指定需要扫描的类的范围</strong>，不然会报错，如视频中，去掉 <strong>within</strong> 限制 <code>@args()</code> 、 <code>@target()</code> 都会报错。</p><h4 id="3-匹配包-类"><a href="#3-匹配包-类" class="headerlink" title="3. 匹配包/类"></a>3. 匹配包/类</h4><ul><li><p><code>within()</code></p><ul><li><p><strong>@Pointcut(“within(com.fatal.service.ProductService)”)</strong></p><blockquote><p>匹配 <strong>指定类</strong> 的所有方法</p></blockquote></li><li><p><strong>@Pointcut(“within(com.fatal.service..*)”)</strong></p><blockquote><p>匹配 <strong>指定包及子包下所有类</strong> 的所有方法</p></blockquote></li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541834166211.png" alt="1541834166211"></p></li></ul><h4 id="4-匹配对象"><a href="#4-匹配对象" class="headerlink" title="4. 匹配对象"></a>4. 匹配对象</h4><ul><li><p><code>this()</code></p><ul><li><p><strong>@Pointcut(“this(com.fatal.log.Loggable)”)</strong></p><blockquote><p>匹配 <strong>指定接口</strong> 生成的组件的<code>代理对象</code>的方法</p></blockquote></li></ul></li><li><p><code>target()</code></p><ul><li><p><strong>@Pointcut(“target(com.fatal.log.Loggable)”)</strong></p><blockquote><p>匹配 <strong>指定接口</strong> 生成的组件的<code>被代理对象</code>的方法</p></blockquote></li></ul></li><li><p><code>bean()</code></p><ul><li><p><strong>@Pointcut(“bean(beanId)”)</strong></p><blockquote><p>匹配组件名为<code>beanId</code>的bean里边的方法</p><p><strong>注意</strong>：括号里边为bean的<code>id</code>。默认为类名<code>首字母小写</code></p></blockquote></li><li><p><strong>@Pointcut(“bean(*Service)”)</strong></p><blockquote><p>匹配所有 <strong>以Service结尾</strong> 的bean里头的方法</p></blockquote></li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541837636001.png" alt="1541837636001"></p></li></ul><h5 id="this-与-target-的区别"><a href="#this-与-target-的区别" class="headerlink" title="this() 与 target() 的区别"></a>this() 与 target() 的区别</h5><blockquote><p>这里和<code>引入</code>有关了</p></blockquote><ul><li><strong>this</strong>: 可以拦截 DeclareParents(Introduction)</li><li><strong>target</strong>: 不拦截 DeclareParents(Introduction)</li></ul><h4 id="5-匹配参数"><a href="#5-匹配参数" class="headerlink" title="5. 匹配参数"></a>5. 匹配参数</h4><ul><li><p><code>args()</code></p><ul><li><p><strong>@Pointcut(“args(Long) &amp;&amp; within(com.fatal.service.*)”)</strong></p><blockquote><p>匹配 <strong>指定类</strong> 中任何 <strong>以find开头而且只有一个Long参数</strong> 的方法</p></blockquote></li><li><p><strong>@Pointcut(“args(Long,..) &amp;&amp; within(com.fatal.service.*)”)</strong></p><blockquote><p>匹配 <strong>指定类</strong> 中任何 <strong>以find开头的而且第一个参数为Long型</strong> 的方法</p></blockquote></li></ul></li></ul><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541838819172.png" alt="1541838819172"></p><h3 id="wildcards（通配符）"><a href="#wildcards（通配符）" class="headerlink" title="wildcards（通配符）"></a>wildcards（通配符）</h3><ul><li><strong>*</strong>：匹配任意数量的字符</li><li><strong>+</strong>：匹配指定类及其子类</li><li><strong>..</strong>：一般用于匹配任意数的子包或参数</li></ul><h3 id="operators（运算符）"><a href="#operators（运算符）" class="headerlink" title="operators（运算符）"></a>operators（运算符）</h3><ul><li>&amp;&amp; （与）</li><li>||（或）</li><li>！（非）</li></ul><h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><ul><li><p><strong>@Before</strong>：前置通知</p></li><li><p><strong>@After</strong>：后置通知，方法执行之后（相当于<code>finally</code>）</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541944108097.png" alt="1541944108097"></p><p>测试<strong>结果</strong>：相当于<code>finally</code>。方法执行之后不管是否（抛异常方法就不能返回）正常返回都会走<code>切面逻辑</code></p></li><li><p><strong>@AfterReturning</strong>：返回通知，成功执行之后</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541944147986.png" alt="1541944147986"></p><p>测试<strong>结果</strong>：不管是否有返回值，只要方法正常执行完成就会走<code>切面逻辑</code></p></li><li><p><strong>@AfterThrowing</strong>：异常通知，抛出异常之后（只要抛异常，就会走切面逻辑）</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1541944210328.png" alt="1541944210328"></p><p>测试<strong>结果</strong>：只要方法一抛出异常，就会走<code>切面逻辑</code></p></li><li><p><strong>@Around</strong>：环绕通知（相当于其他注解的总和）</p><p><img src="/images/SpringBoot2/SpringBoot使用SpringAOP/1543482575152.png" alt="1543482575152"></p></li></ul><p>  测试<strong>结果</strong>：功能相当于<code>前置通知</code>、<code>后置通知</code>、<code>返回通知</code>、<code>环绕通知</code>的结合</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ol><li>返回通知怎么获取<code>目标方法</code>返回值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(returning = <span class="string">"result"</span>, value = <span class="string">"point()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">filter</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">探秘Spring AOP</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇笔记记录的内容：</p><ul><li>Pointcut expression 的组成部分</li><li>各种 designators 的区别</li><li>5种 advice 及参数/结果绑定</li></ul><p>​        <strong>SpringBoot</strong> <em>自动开启 AOP 功能</em>了，我们可以直接使用 <strong>@Transactional 、@Async</strong> 或者<strong>自定义</strong>的基于AOP 的注解实现切面编程</p><p>源码有点多，就不贴出来了。需要的话去 GitHub 上看。可以检出来跑跑看。。。</p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_2" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_2</a></p><h4 id="学习-apollo-0001-前辈的经验"><a href="#学习-apollo-0001-前辈的经验" class="headerlink" title="学习 apollo_0001 前辈的经验"></a>学习 <a href="https://www.imooc.com/u/239819/courses?sort=publish" target="_blank" rel="noopener">apollo_0001</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十五篇（一）：SpringAOP入门</title>
      <link href="/2018/11/08/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASpringAOP%E5%85%A5%E9%97%A8%20/"/>
      <url>/2018/11/08/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ASpringAOP%E5%85%A5%E9%97%A8%20/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>AOP</strong>，全称为“<strong>面向切面编程</strong>”。它是通过 <strong>预编译方式</strong> 和 <strong>运行期动态代理</strong> 实现程序功能统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP使用可以概括为10个字：<strong>纵向重复代码，横向抽取</strong></p><h2 id="AOP的初衷"><a href="#AOP的初衷" class="headerlink" title="AOP的初衷"></a>AOP的初衷</h2><ul><li><strong>Don’t Repeat Yourself</strong>（不要重复自己(不要写重复的代码)）</li><li><strong>Separation Of Concerns</strong>（关注点分离）<ul><li>水平分离：展示层 -&gt; 服务层 -&gt; 持久层</li><li>垂直分离：模块划分（订单、库存等）</li><li>切面分离：功能性需求 和 非功能性需求</li></ul></li></ul><p>​        它要解决的问题就是将 <strong>非功能性需求</strong> 从 <strong>功能性需求</strong> 中剥离出来，集中管理，从而实现 Don’t Repeat Yourself</p><h2 id="AOP的好处"><a href="#AOP的好处" class="headerlink" title="AOP的好处"></a>AOP的好处</h2><ol><li>集中处理某一关注点/横切逻辑</li><li>可以很方便的添加/删除关注点</li><li><strong>侵入性少</strong>，增强代码可读性与可维护性</li></ol><h2 id="AOP的理解"><a href="#AOP的理解" class="headerlink" title="AOP的理解"></a>AOP的理解</h2><ol><li>是一种编程范式，不是编程语言</li><li>解决特定问题，不能解决所有问题</li><li>是OOP的补充，不是替代</li></ol><h3 id="编程范式概览"><a href="#编程范式概览" class="headerlink" title="编程范式概览"></a>编程范式概览</h3><ol><li>面向过程编程（C语言，…）</li><li>面向对象编程（Java，C++，…）</li><li>面向接口编程（Java 开发中常见）</li><li>函数式编程（Java8 引入的函数式编程，…）</li><li>事件驱动编程（GUI 开发中常见）</li><li>面向切面编程（Spring 的 AOP）</li></ol><h2 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h2><ol><li>权限控制</li><li>缓存控制</li><li>事务控制</li><li>审计日志</li><li>性能监控</li><li>分布式追踪</li><li>异常处理</li></ol><h2 id="主角Spring-AOP"><a href="#主角Spring-AOP" class="headerlink" title="主角Spring AOP"></a>主角Spring AOP</h2><p>​        Spring 框架对 AOP 编程提供了支持，通过使用 Spring 提供的 AOP 功能，可以很方便的进行面向切面的编程，许多不容易用传统 OOP 实现的功能都可以使用 AOP 轻松对付。Spring 的 AOP 支持允许将一些通用任务如<strong>安全、事务、日志</strong>等进行<strong>集中式管理</strong>，从而提供了更好的复用。</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><p><strong>产品管理的服务</strong></p><p>要求：对产品的添加和删除操作进行权限控制，只允许管理员操作</p><h3 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h3><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.1.0.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-aop：<strong>2.1.0.RELEASE</strong></li><li>lombok：1.18.2</li></ul><h3 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 AOP 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、entity"><a href="#2、entity" class="headerlink" title="2、entity"></a>2、entity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、hodler"><a href="#3、hodler" class="headerlink" title="3、hodler"></a>3、hodler</h3><p>创建一个holder，假设用户登录用用户信息存储在该对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.hodler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户持有者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentUserHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> holder.get() == <span class="keyword">null</span> ? <span class="string">"unknown"</span> : holder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        holder.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、security"><a href="#4、security" class="headerlink" title="4、security"></a>4、security</h3><h4 id="AdminOnly-java"><a href="#AdminOnly-java" class="headerlink" title="AdminOnly.java"></a><code>AdminOnly.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义权限注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在；</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)      <span class="comment">// 限定该注解的使用对象为`方法`</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AdminOnly &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SecurityAspect-java"><a href="#SecurityAspect-java" class="headerlink" title="SecurityAspect.java"></a><code>SecurityAspect.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.hodler.CurrentUserHolder;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">// 标注该类是切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点</span></span><br><span class="line"><span class="comment">     * 注意：如果注解和切面不在同一个包，记得要用全类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(AdminOnly)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adminOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"adminOnly()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String user = CurrentUserHolder.get();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(user)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(user)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"operation not allow"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、service"><a href="#5、service" class="headerlink" title="5、service"></a>5、service</h3><h4 id="IProductService-java"><a href="#IProductService-java" class="headerlink" title="IProductService.java"></a><code>IProductService.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.serivce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Product;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Product product)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProductServiceImpl-java"><a href="#ProductServiceImpl-java" class="headerlink" title="ProductServiceImpl.java"></a><code>ProductServiceImpl.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.serivce.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.fatal.security.AdminOnly;</span><br><span class="line"><span class="keyword">import</span> com.fatal.serivce.IProductService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Product 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/8 0008 11:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title">IProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@AdminOnly</span> <span class="comment">// 加上该注解后的方法会走切面逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"添加产品成功 -- [&#123;&#125;]"</span>, product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@AdminOnly</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"删除id为[&#123;&#125;]的产品成功"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、Test"><a href="#6、Test" class="headerlink" title="6、Test"></a>6、Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.fatal.hodler.CurrentUserHolder;</span><br><span class="line"><span class="keyword">import</span> com.fatal.serivce.IProductService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter251ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户没有添加权限</span></span><br><span class="line"><span class="comment">     * 执行结果：抛异常 java.lang.RuntimeException: operation not allow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CurrentUserHolder.set(<span class="string">"tom"</span>);</span><br><span class="line">        productService.insert(<span class="keyword">new</span> Product().setId(<span class="number">1l</span>).setName(<span class="string">"product"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户具有添加权限</span></span><br><span class="line"><span class="comment">     * 执行结果：正常删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CurrentUserHolder.set(<span class="string">"admin"</span>);</span><br><span class="line">        productService.delete(<span class="number">1l</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="1、切面的模板"><a href="#1、切面的模板" class="headerlink" title="1、切面的模板"></a>1、切面的模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>     <span class="comment">// 标注该类是切面类</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 必须把切面作为一个组件放到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"Spring切面表达式"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">point</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"point()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在目标方法被调用之前调用通知功能</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在目标方法完成之后调用通知，无论方法执行成功与否</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在目标方法成功执行之后调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在目标方法抛出异常时调用通知</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 环绕通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Spring切面表达式"><a href="#2、Spring切面表达式" class="headerlink" title="2、Spring切面表达式"></a>2、Spring切面表达式</h3><p>​        案例中 <strong>@annotation(AdminOnly)</strong>  为切点表达式。表示对方法上标注有 <strong>@AdminOnly</strong> 注解的方法进行拦截。下一章将会对 <strong>Spring切面表达式</strong> 进行系统的介绍</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.imooc.com/learn/869" target="_blank" rel="noopener">探秘Spring AOP</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        <strong>SpringBoot</strong> <em>自动开启 AOP 功能</em>了，我们可以直接使用 <strong>@Transactional 、@Async</strong> 或者<strong>自定义</strong>的基于AOP 的注解实现切面编程</p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter25_1</a></p><h4 id="学习-apollo-0001-前辈的经验"><a href="#学习-apollo-0001-前辈的经验" class="headerlink" title="学习 apollo_0001 前辈的经验"></a>学习 <a href="https://www.imooc.com/u/239819/courses?sort=publish" target="_blank" rel="noopener">apollo_0001</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十四篇（三）：@Async与事务</title>
      <link href="/2018/11/02/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A@Async%E4%B8%8E%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/11/02/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A@Async%E4%B8%8E%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>​        前面两篇，聊到了使用 <strong>@Async实现异步调用，@Async与异步线程池、异步异常处理</strong>；这篇笔记将记录使用 <strong>@Transactional方法中如何解决调用异步方法实现异步，@Async如何解决异步事务</strong> 问题。</p><p>[TOC]</p><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><p>​        <strong>Spring</strong> 的异步执行注解 <strong>@Async</strong>，在 <strong>@Transactional</strong> 的方法中调用这个方法的时候发现，不对劲，耗时的逻辑我已经加入到异步去做了，怎么接口请求的响应这么慢，赶紧看日志，懵X，加了异步注解，却没有异步执行。</p><h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><p>​        在项目中用到 <strong>@Transactional</strong> 注解实现事务是必须滴，如果你还在用xml配置，那我只能说……。<br>但是有时候我们会发现在方法上加了<strong>@Transactional</strong> 注解却出现灵异事件，在方法内出现异常，数据还是插入到数据库，<strong>没有回滚</strong>，事务哪里去了，明明是加了的。</p><h2 id="Async与-Transactional"><a href="#Async与-Transactional" class="headerlink" title="@Async与@Transactional"></a>@Async与@Transactional</h2><p>​       这两个注解的共同点，都是通过 Spring AOP 的代理实现功能的。而 Spring AOP 的底层实现就是动态代理，CGLIB 和 JDK 。Spring AOP 会根据具体的实现不同，采用不同的代理方式。</p><h3 id="Transactional方法中如何解决调用异步方法实现异步"><a href="#Transactional方法中如何解决调用异步方法实现异步" class="headerlink" title="@Transactional方法中如何解决调用异步方法实现异步"></a>@Transactional方法中如何解决调用异步方法实现异步</h3><p>​        当事务方法调用了同一个类中的异步方法时，异步注解@Async不起作用，@Async注解失效原因分析和解决方案</p><p>下面给出伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function A &#123;</span><br><span class="line">        print(<span class="string">"A插入数据"</span>);</span><br><span class="line">        B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    function B &#123;</span><br><span class="line">        print(<span class="string">"B插入数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：程序运行后，由于<strong>方法 A</strong> 被 @Transactional 修饰，所以 <strong>A() 会被代理类调用</strong>（AOP 将事务嵌到方法 A 上），而 A() 中又直接调用了 <strong>方法 B</strong> ，这时候 <strong>方法 B</strong> 就变成了方法 A 中的一个<strong>普通方法</strong>，没有没代理类调用，实现不了 <strong>@Async</strong> 的功能，所以异步才会失效。</p><p>简单来说就是：<strong>@Transactional</strong> 和 <strong>@Async</strong> 标记的方法 不允许被 <strong>==同一个类中== 的其他方法 ==直接== 调用自己，同一类中直接调用则不会调用动态代理生成的ProxyClass</strong>（因为同一类中被调用方法的注解不被解析）</p><ul><li>@Transactional 调用 @Async（失效）（本文就是例子）</li><li>@Transactional 调用 @Transactional（有效，其实是第一个 @Transactional 起的作用，参考事务默认的传播行为）</li><li>@Async 调用 @Transactional（失效）</li><li>@Async 调用 @Async（失效）</li></ul><p>==三个小demo在 GitHub 上==</p><p>解决方法：</p><ol><li><p>事务方法和异步方法不要在同一个类中（<strong>推荐</strong>）</p></li><li><p>如果非要在同一个类中的话，那就使用代理类来调用异步方法即可</p><ul><li><p>在配置类（启动类也属于配置类）上加 <code>@EnableAspectJAutoProxy(exposeProxy = true)</code>（暴露代理类）</p></li><li><p>在事务方法体中使用 <code>AopContext.currentProxy()</code>获得当前类的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得当前代理对象</span></span><br><span class="line">当前类 service = (当前类) AopContext.currentProxy();</span><br><span class="line">log.info(<span class="string">"当前对象的代理对象为：[&#123;&#125;]"</span>, service.getClass());</span><br></pre></td></tr></table></figure><p>伪代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">// 启动类也属于配置类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function A &#123;</span><br><span class="line">        print(<span class="string">"A插入数据"</span>);</span><br><span class="line">        C service = (C)AopContext.currentProxy();</span><br><span class="line">        c.B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    function B &#123;</span><br><span class="line">        print(<span class="string">"B插入数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Async如何解决异步事务"><a href="#Async如何解决异步事务" class="headerlink" title="@Async如何解决异步事务"></a>@Async如何解决异步事务</h3><p>问题：事务方法调用异步方法时，怎么保证在异步方法中出现异常时，异步方法与事务方法中的事务<strong>都回滚</strong>。</p><p>​        如果在异步方法上加上 <strong>@Transactional</strong> 的话，是可以实现事务，但是由于是异步，线程不一样，所以他们两个不属于同一个事务， 不能保证异步方法出现异常，事务方法也跟着回滚。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">// 启动类也属于配置类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 事务方法</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function A  <span class="keyword">throws</span> Exception  &#123;</span><br><span class="line">        print(<span class="string">"A插入数据"</span>);</span><br><span class="line">        <span class="comment">// 使用代理仅能让后面被调用的异步方法里的事务生效（但是与本方法的事务不属于同一个）</span></span><br><span class="line">        C service = (C)AopContext.currentProxy();</span><br><span class="line">        c.B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function B <span class="keyword">throws</span> Exception  &#123;</span><br><span class="line">        print(<span class="string">"B插入数据"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(); <span class="comment">// 抛异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在异步方法抛异常后，异步方法的事务会回滚，但是事务方法的事务就没有回滚了，这不是我们想要的结果。那么我们应该怎么实现异步方法抛异常，异步方法事务回滚，事务方法事务也要回滚呢？</p><p><strong>解决方法：</strong></p><p>​        异步方法加 <strong>@Transactional</strong> 后，还需要结合  <code>try...catch...finally...</code> 使用。在方法体中 <code>try 代码块</code> 捕获异常，在 <code>catch 代码块</code> 中手动回滚事务，并把异常信息封装到 <code>Future 对象</code> 中，然后在 <code>finally 代码块</code> 中将 <code>Future 对象</code> <strong>return</strong> 回主线程。这样，在主线程中通过判断 <code>Future 对象</code> 的对象类型从而决定是否抛出异常，如果 <code>Future 对象</code> 中封装的是异常对象，那么我们可以在主线程中直接将这个异常对象抛出（手动抛出异常的话事务则会自动回滚；我们也可以选择手动回滚，看需要吧），即可达到异步方法出现异常，事务方法收到 <code>Future 对象</code>中的异常信息，加几步处理后就能使双方都事务回滚。这就解决了 <strong>异步事务</strong> 了（两个方法不属于同一个事务，但通过 <code>Future 对象</code>实现异步方法一报错，双方都回滚的效果。）</p><p>伪代码如下：（想要解决异步事务，下面的<strong>姿势</strong>还算可以的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">// 启动类也属于配置类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 事务方法</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function A <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        print(<span class="string">"A插入数据"</span>);</span><br><span class="line">        C service = (C)AopContext.currentProxy();</span><br><span class="line">        Future&lt;Object&gt; future = c.B();</span><br><span class="line">        <span class="comment">// 调用结果处理方法</span></span><br><span class="line">        deal(future);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    function Future&lt;Object&gt; B <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        Future&lt;Object&gt; future = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            print(<span class="string">"B插入数据"</span>);</span><br><span class="line">            msg = <span class="string">"判断是否正常插入，封装插入结果信息，成功或失败"</span>;</span><br><span class="line">            <span class="comment">// throw new RuntimeException(); // 抛异常（去掉注释即异步方法抛异常）</span></span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(Thread.currentThread().getName() + msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="keyword">new</span> RuntimeException(e));</span><br><span class="line">            <span class="comment">// 异步方法出现异常后 --&gt; 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异步返回结果处理方法</span></span><br><span class="line">    <span class="function">fucntion <span class="title">deal</span><span class="params">(Future future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object o = future.get(<span class="number">5000</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            <span class="comment">// 异步方法返回异常结果</span></span><br><span class="line">            Exception e = (Exception) o;</span><br><span class="line">            <span class="comment">// 手动回滚</span></span><br><span class="line">             TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 抛出 RuntimeException 让它自动回滚（需要全局异常处理器统一</span></span><br><span class="line"><span class="comment">             * 出来的话则抛个异常咯，不需要的话就手动回滚吧）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            log.info(<span class="string">"[异步方法成功返回] --&gt; &#123;&#125;"</span>, o);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 异步方法返回正常结果的业务逻辑</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>mysql-connector-java：8.0.13</li><li>druid-spring-boot-starter：1.1.9</li><li>lombok：1.18.2</li><li>spring-boot-starter-data-jpa：<strong>2.0.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- druid 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># druid 相关配置</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># 基本属性</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter24_3?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line">    <span class="comment"># 显示 sql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 数据库类型</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># JPA 配置</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line">      <span class="comment">#  update：每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 指定生成的表的引擎为InnoDB类型（默认是MyISAM，MyISAM不支持事务）</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL57InnoDBDialect</span></span><br></pre></td></tr></table></figure><h2 id="3、entity"><a href="#3、entity" class="headerlink" title="3、entity"></a>3、entity</h2><h3 id="Order-java"><a href="#Order-java" class="headerlink" title="Order.java"></a><code>Order.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Order 订单实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 金额 */</span></span><br><span class="line">    <span class="keyword">private</span> Long amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 订单id */</span></span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 联系方式 */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户id */</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Message-java"><a href="#Message-java" class="headerlink" title="Message.java"></a><code>Message.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Message 订单结果消息实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 内容 */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 接收器 */</span></span><br><span class="line">    <span class="keyword">private</span> String receiver;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、dao"><a href="#4、dao" class="headerlink" title="4、dao"></a>4、dao</h2><h3 id="OrderRepository-java"><a href="#OrderRepository-java" class="headerlink" title="OrderRepository.java"></a><code>OrderRepository.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Order 数据库访问组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Order</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MessageRepository-java"><a href="#MessageRepository-java" class="headerlink" title="MessageRepository.java"></a><code>MessageRepository.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Message 数据库访问组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Message</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、component"><a href="#5、component" class="headerlink" title="5、component"></a>5、component</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.message.MessageRepository;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Message;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Order;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/3 0003 10:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageRepository messageRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步推送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;Object&gt; <span class="title">sendMessage</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        Future&lt;Object&gt; future = <span class="keyword">null</span>;</span><br><span class="line">        Long id = order.getId();</span><br><span class="line">        String messageStr = <span class="string">""</span>;</span><br><span class="line">        String messageLog = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messageStr = <span class="string">"下单成功(异步组件)"</span>;</span><br><span class="line">                <span class="comment">// 推送逻辑...</span></span><br><span class="line">                messageLog = <span class="string">"[ --&gt; 消息发送成功](异步组件)"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                messageStr = <span class="string">"下单失败"</span>;</span><br><span class="line">                messageLog = <span class="string">"[ --&gt; 消息发送失败](异步组件)"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存数据</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message().setContent(messageStr).setReceiver(<span class="string">"接收器"</span>);</span><br><span class="line">            Message save = messageRepository.save(message);</span><br><span class="line"><span class="comment">//            int i = 1/0; // 在异步组件中测试异步事务</span></span><br><span class="line">            <span class="keyword">if</span> (save != <span class="keyword">null</span> &amp;&amp; save.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">"保存订单结果成功(异步组件)[message = &#123;&#125;]"</span>, save);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"保存订单结果失败(异步组件)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread() + messageLog);</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(Thread.currentThread().getName() + messageLog);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="keyword">new</span> RuntimeException(e));</span><br><span class="line">            <span class="comment">// 异步方法出现异常后 --&gt; 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            System.out.println(<span class="string">"~~~~~~~~~~~~~~  "</span> + Thread.currentThread().getName()+ <span class="string">" -- 异步方法抛异常啦    ~~~~~~~~~~~~~~"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、service"><a href="#6、service" class="headerlink" title="6、service"></a>6、service</h2><h3 id="IOrderService-java"><a href="#IOrderService-java" class="headerlink" title="IOrderService.java"></a><code>IOrderService.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Order 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用同一类中的异步方法（异步失效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Order <span class="title">saveAndAsyncNoWithProxy</span><span class="params">(Order order)</span>  <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内通过代理类调用同一类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Order <span class="title">saveAndIdenticalClassAsyncWithProxy</span><span class="params">(Order order)</span>  <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用不同类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Order <span class="title">saveAndDifferentClassAsyncWithProxy</span><span class="params">(Order order)</span>  <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OrderServiceImpl-java"><a href="#OrderServiceImpl-java" class="headerlink" title="OrderServiceImpl.java"></a><code>OrderServiceImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.order.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.component.AsyncComponent;</span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.message.MessageRepository;</span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.order.OrderRepository;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Message;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.order.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AopContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 10:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">IOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageRepository messageRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncComponent asyncComponent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用同一类中的异步方法（异步失效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">saveAndAsyncNoWithProxy</span><span class="params">(Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderRepository.save(order);</span><br><span class="line">        <span class="comment">// 推送消息</span></span><br><span class="line">        <span class="keyword">if</span> (save != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Future&lt;Object&gt; future = sendMessage(save);</span><br><span class="line">            Object o = future.get(<span class="number">5000</span>, TimeUnit.SECONDS);</span><br><span class="line">            dealWithFuture(future);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(Thread.currentThread() + <span class="string">"[ --&gt; 下单结束：mark]"</span>);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内通过代理类调用同一类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">saveAndIdenticalClassAsyncWithProxy</span><span class="params">(Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderRepository.save(order);</span><br><span class="line"><span class="comment">//        int i = 1/0; // 测试事务</span></span><br><span class="line">        <span class="comment">// 推送消息</span></span><br><span class="line">        <span class="keyword">if</span> (save != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得当前代理对象</span></span><br><span class="line">            OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();</span><br><span class="line">            log.info(<span class="string">"OrderServiceImpl代理对象为：[&#123;&#125;]"</span>, orderService.getClass());</span><br><span class="line">            log.info(<span class="string">"OrderServiceImpl对象为：[&#123;&#125;]"</span>, <span class="keyword">this</span>.getClass());</span><br><span class="line">            <span class="comment">// 调用异步方法获得调用结果，并对结果进行处理</span></span><br><span class="line">            Future&lt;Object&gt; future = orderService.sendMessage(save);</span><br><span class="line">            dealWithFuture(future);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(Thread.currentThread() + <span class="string">"[ --&gt; 下单结束：mark]"</span>);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用不同类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">saveAndDifferentClassAsyncWithProxy</span><span class="params">(Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderRepository.save(order);</span><br><span class="line"><span class="comment">//        int i = 1/0; // 测试事务</span></span><br><span class="line">        <span class="comment">// 推送消息</span></span><br><span class="line">        <span class="keyword">if</span> (save != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用异步方法获得调用结果，并对结果进行处理</span></span><br><span class="line">            Future&lt;Object&gt; future = asyncComponent.sendMessage(save);</span><br><span class="line">            dealWithFuture(future);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(Thread.currentThread() + <span class="string">"[ --&gt; 下单结束：mark]"</span>);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步推送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;Object&gt; <span class="title">sendMessage</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        Future&lt;Object&gt; future = <span class="keyword">null</span>;</span><br><span class="line">        Long id = order.getId();</span><br><span class="line">        String messageStr = <span class="string">""</span>;</span><br><span class="line">        String messageLog = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messageStr = <span class="string">"下单成功"</span>;</span><br><span class="line">                <span class="comment">// 推送逻辑...</span></span><br><span class="line">                messageLog = <span class="string">"[ --&gt; 消息发送成功]"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                messageStr = <span class="string">"下单失败"</span>;</span><br><span class="line">                messageLog = <span class="string">"[ --&gt; 消息发送失败]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存数据</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message().setContent(messageStr).setReceiver(<span class="string">"接收器"</span>);</span><br><span class="line">            Message save = messageRepository.save(message);</span><br><span class="line"><span class="comment">//            int i = 1/0; // 测试异步事务</span></span><br><span class="line">            <span class="keyword">if</span> (save != <span class="keyword">null</span> &amp;&amp; save.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">"保存订单结果成功[message = &#123;&#125;]"</span>, save);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"保存订单结果失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(Thread.currentThread() + messageLog);</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(Thread.currentThread().getName() + messageLog);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="keyword">new</span> RuntimeException(e));</span><br><span class="line">            <span class="comment">// 异步方法出现异常后 --&gt; 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            System.out.println(<span class="string">"~~~~~~~~~~~~~~  "</span> + Thread.currentThread().getName()+ <span class="string">" -- 异步方法抛异常啦    ~~~~~~~~~~~~~~"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> future;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步结果出来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dealWithFuture</span><span class="params">(Future future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object o = future.get(<span class="number">5000</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            Exception e = (Exception) o;</span><br><span class="line">            System.out.println(<span class="string">"~~~~~~~~~~~~~~  "</span> + Thread.currentThread().getName()+ <span class="string">" -- 事务方法抛异常啦    ~~~~~~~~~~~~~~"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 手动回滚</span></span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 抛出 RuntimeException 让它自动回滚（需要全局异常处理器统一出来</span></span><br><span class="line"><span class="comment">             * 的话则抛个异常咯，不需要的话就手动回滚吧）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            log.info(<span class="string">"[异步方法成功返回] --&gt; &#123;&#125;"</span>, o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Application"><a href="#7、Application" class="headerlink" title="7、Application"></a>7、Application</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy = <span class="keyword">true</span>) <span class="comment">// 开启对AspectJ自动代理，并暴露代理组件</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter243Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter243Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Test"><a href="#8、Test" class="headerlink" title="8、Test"></a>8、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.order.IOrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 <span class="doctag">@Transactional</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/2 0002 10:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        order = <span class="keyword">new</span> Order().setOrderId(<span class="string">"ORDER_123456"</span>)</span><br><span class="line">                .setUserId(<span class="string">"USER_123456"</span>)</span><br><span class="line">                .setAmount(<span class="number">100000l</span>)</span><br><span class="line">                .setPhone(<span class="string">"137504123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用同一类中的异步方法（异步失效）</span></span><br><span class="line"><span class="comment">     * 注掉 int i = 1/0;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndAsyncNoWithProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderService.saveAndAsyncNoWithProxy(order);</span><br><span class="line">        log.info(<span class="string">"新增订单成功[order = &#123;&#125;]"</span>, save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内通过代理类调用同一类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     * 测试1：不打开 int i = 1/0; 测试 <span class="doctag">@Async</span>是否起作用</span></span><br><span class="line"><span class="comment">     * 测试2：打开 int i = 1/0; 测试 <span class="doctag">@Transactionl</span> + <span class="doctag">@Async</span> 异步事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndIdenticalClassAsyncWithProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderService.saveAndIdenticalClassAsyncWithProxy(order);</span><br><span class="line">        log.info(<span class="string">"新增订单成功[order = &#123;&#125;]"</span>, save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务方法内直接调用不同类中的异步方法（异步生效）</span></span><br><span class="line"><span class="comment">     * 测试1：不打开 int i = 1/0; 测试<span class="doctag">@Async</span>是否起作用</span></span><br><span class="line"><span class="comment">     * 测试2：打开 int i = 1/0; 测试 <span class="doctag">@Transactionl</span> + <span class="doctag">@Async</span> 异步事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndDifferentClassAsyncWithProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Order save = orderService.saveAndDifferentClassAsyncWithProxy(order);</span><br><span class="line">        log.info(<span class="string">"新增订单成功[order = &#123;&#125;]"</span>, save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><p><strong>测试内容</strong>：事务方法内直接调用同一类中的异步方法（异步失效）。要求注掉 sendMessage() 中的 <code>int i = 1/0;</code></p><p>运行 <code>TransactionalTests.saveAndAsyncNoWithProxy();</code></p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Async/1541469082331.png" alt="1541469082331"></p><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><p><strong>测试内容</strong>：事务方法内通过代理类调用同一类中的异步方法（异步生效）</p><p>运行 <code>TransactionalTests.saveAndIdenticalClassAsyncWithProxy();</code></p><ol><li><p>不打开 int i = 1/0; 测试 @Async是否起作用</p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Async/1541468943333.png" alt="1541468943333"></p></li><li><p>打开 int i = 1/0; 测试 @Transactionl + @Async 异步事务</p><p><strong>显示</strong></p></li></ol><p>   <img src="/images/SpringBoot2/SpringBoot整合Async/@Async事务.png" alt="1541470294795"></p><p>   打开数据库，可以发现数据都回滚了</p><h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3><p><strong>测试内容</strong>：事务方法内直接调用不同类中的异步方法（异步生效）</p><p>运行 <code>TransactionalTests.saveAndDifferentClassAsyncWithProxy();</code></p><ol><li><p>不打开 int i = 1/0; 测试 @Async是否起作用</p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Async/1541469423120.png" alt="1541469423120"></p></li><li><p>打开 int i = 1/0; 测试 @Transactionl + @Async 异步事务</p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Async/@Async事务2.png" alt="1541470950731"></p><p>打开数据库，可以发现数据都回滚了</p></li></ol><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ol><li><p>抛异常后还能return吗？</p><p>不能，但是我们可以用 try…catch…finally… ，在捕获到异常后，我们在 catch 代码块 中对异常进行处理，然后在 finally 代码块中我们 return 即可</p></li><li><p>@Transactional 标注的方法怎么手动回滚事务。</p><p><strong>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</strong></p></li><li><p>@Async 结合 @Transactional 使用，异步是有效果的。</p></li><li><p>Future 的返回值为 void 的话，则可用于只有单边操作数据库的。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynFatal/springboot2-learning/tree/master/chapter24_3" target="_blank" rel="noopener">https://github.com/ynFatal/springboot2-learning/tree/master/chapter24_3</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十四篇（二）：@Async与异步线程池、异步异常处理</title>
      <link href="/2018/10/31/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A@Async%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81%E5%BC%82%E6%AD%A5%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2018/10/31/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A@Async%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81%E5%BC%82%E6%AD%A5%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本片文章对异步线程池、异步异常处理做了个Demo</p><p>[TOC]</p><h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a><strong>@Async</strong></h2><p>​       在Spring中，基于<code>@Async</code> 标注的方法，称之为 <strong>异步方法</strong>；这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。在<strong>Spring Boot</strong>中，我们只需要通过使用<code>@Async</code>注解就能简单的将原来的同步函数变为异步函数。</p><h3 id="异步方法分为两种："><a href="#异步方法分为两种：" class="headerlink" title="异步方法分为两种："></a>异步方法分为两种：</h3><ol><li>返回值为void</li><li>返回值为Future<t></t></li></ol><h3 id="对应的异常处理操作："><a href="#对应的异常处理操作：" class="headerlink" title="对应的异常处理操作："></a>对应的异常处理操作：</h3><ol><li><strong>void</strong>  -&gt;  异步异常处理类 <code>AsyncUncaughtExceptionHandler</code> 来捕获并处理</li><li><strong>Future<t></t></strong>  -&gt;  在异步方法中 <code>try...catch...(处理)</code> ，然后将异常信息封装到 <code>AsyncResult</code> 对象中返回</li></ol><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、config"><a href="#2、config" class="headerlink" title="2、config"></a>2、config</h2><p>​        异步配置类，实现接口 <code>AsyncConfigurer</code> 。配置类上加<code>@EnableAsync</code> 开启异步功能。配置类中配置两部分内容：异步线程池（组件）和异步异常处理类（组件）。</p><p>​        当我们使用@Async时，SpringBoot如果判断出容器中有<code>AsyncConfigurer</code>类型的配置组件,它就会在该组件中是否有<code>Executor</code>类型的线程池组件，如果没有，则会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步配置类</span></span><br><span class="line"><span class="comment"> * 配置异常线程池，异步异常处理类</span></span><br><span class="line"><span class="comment"> * 当我们使用<span class="doctag">@Async</span>时，SpringBoot如果判断出容器中有`AsyncConfigurer`类型的配置组件,</span></span><br><span class="line"><span class="comment"> * 它就会判断，在该组件中是否有`Executor`类型的线程池组件，如果没有，则会报错。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/31 0031 11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableAsync</span><span class="comment">// 开启异步功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncConfigurer</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">/** 创建一个该类型的组件放到Spring容器中 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">/** 核心线程数10：线程池创建时候初始化的线程数 */</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">/** 最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程 */</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">/** 用来缓冲执行任务的队列 */</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">/** 允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁 */</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">/** 线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池 */</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"taskExecutor-"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，</span></span><br><span class="line"><span class="comment">         *  该策略会直接在 execute 方法调用的线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyAsyncExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异步方法返回类型为void的异常处理类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Desc</span>: 返回值为void的异步方法出现异常，就会被这个处理类捕获</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAsyncExceptionHandler</span> <span class="keyword">implements</span> <span class="title">AsyncUncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleUncaughtException</span><span class="params">(Throwable throwable, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"Exception message - "</span> + throwable.getMessage());</span><br><span class="line">            log.info(<span class="string">"Method name - "</span> + method.getName());</span><br><span class="line">            <span class="keyword">for</span> (Object param : objects) &#123;</span><br><span class="line">                log.info(<span class="string">"Parameter value - "</span> + param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、component"><a href="#3、component" class="headerlink" title="3、component"></a>3、component</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试异步注解<span class="doctag">@Async</span>的组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/31 0031 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[----------开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[----------执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"----------完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[++++++++++开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[++++++++++执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"++++++++++完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[**********开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[**********执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"**********完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试异常处理类捕获异步方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncReturnVoidWithException</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[测试异步方法(void)中处理异常,parameter=&#123;&#125;]"</span>, param);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">asyncReturnFutureWithException</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[测试异步方法(Future&lt;String&gt;)中处理异常,parameter=&#123;&#125;]"</span>, param);</span><br><span class="line">        Future&lt;String&gt; future;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Thread.sleep(10000); // 测试Future的get(x,y)方法</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(param);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"success to catch: [&#123;&#125;]"</span>, param);</span><br><span class="line">            future = <span class="keyword">new</span> AsyncResult&lt;String&gt;(param);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Test"><a href="#4、Test" class="headerlink" title="4、Test"></a>4、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.component.Task;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter242ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task task;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用自定义异步线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPool</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; taskOne = task.doTaskOne();</span><br><span class="line">        Future&lt;String&gt; taskTwo = task.doTaskTwo();</span><br><span class="line">        Future&lt;String&gt; taskThree = task.doTaskThree();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断异步方法是否执行完成</span></span><br><span class="line">            <span class="keyword">if</span> (taskOne.isDone() &amp;&amp; taskTwo.isDone() &amp;&amp; taskThree.isDone()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务全部完成，总耗时：&#123;&#125; 毫秒"</span>, (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试异常处理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncExceptionReturnVoid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        task.asyncReturnVoidWithException(<span class="string">"testAsyncExceptionReturnVoid"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试Future&lt;String&gt;处理异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncExceptionReturnFuture</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">            ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        Future&lt;String&gt; future = task.asyncReturnFutureWithException(<span class="string">"testAsyncExceptionReturnFuture"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * V get(long timeout, TimeUnit unit)</span></span><br><span class="line"><span class="comment">         * timeout: 值</span></span><br><span class="line"><span class="comment">         * unit: 单位</span></span><br><span class="line"><span class="comment">         * 表示超过此时间会抛出超时异常，该线程就被释放会线程池，从而防止线程阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        log.info(<span class="string">"[在返回类型为Future&lt;String&gt;异步方法里捕获的异常] &#123;&#125;"</span>, future.get(<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、显示"><a href="#5、显示" class="headerlink" title="5、显示"></a>5、显示</h2><ol><li>访问 <code>Chapter242ApplicationTests.testPool()</code> 显示</li></ol><p><img src="/images/SpringBoot2/SpringBoot整合Async/1540985504829.png" alt="1540985504829"></p><ol start="2"><li>访问 <code>Chapter242ApplicationTests.testAsyncExceptionReturnVoid()</code> 显示</li></ol><p><img src="/images/SpringBoot2/SpringBoot整合Async/1540985626587.png" alt="1540985626587"></p><ol start="3"><li>访问 <code>Chapter242ApplicationTests.testAsyncExceptionReturnFuture()</code> 显示</li></ol><p><img src="/images/SpringBoot2/SpringBoot整合Async/1540985751141.png" alt="1540985751141"></p><p>   打开 <code>Task.asyncReturnFutureWithException</code> 中<code>Thread.sleep(10000);</code>注释</p><p><img src="/images/SpringBoot2/SpringBoot整合Async/1540988965666.png" alt="1540988965666"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="异步线程池的配置"><a href="#异步线程池的配置" class="headerlink" title="异步线程池的配置"></a>异步线程池的配置</h3><p>上面我们通过使用<code>ThreadPoolTaskExecutor</code>创建了一个线程池，同时设置了以下这些参数：</p><ul><li><strong>corePoolSize</strong> 核心线程数10：线程池创建时候初始化的线程数</li><li><strong>maxPoolSize</strong> 最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</li><li><strong>queueCapacity</strong> 缓冲队列200：用来缓冲执行任务的队列</li><li><strong>keepAliveSeconds</strong> 允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</li><li><strong>threadNamePrefix</strong> 线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</li><li><strong>rejectedExecutionHandler</strong> 线程池对拒绝任务的处理策略：这里采用了<code>CallerRunsPolicy</code>策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</li></ul><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><h4 id="什么是Future类型？"><a href="#什么是Future类型？" class="headerlink" title="什么是Future类型？"></a>什么是Future类型？</h4><p>​        <code>Future</code>是 <strong>对</strong> 于具体的<code>Runnable</code>或者<code>Callable</code>任务的 <strong>执行结果进行取消</strong>、<strong>查询是否完成</strong>、<strong>获取结果的接口</strong>。必要时可以通过 <code>get()</code> 方法获取执行结果，该方法会 <strong>阻塞</strong> 直到任务返回结果。</p><h4 id="它的接口定义如下："><a href="#它的接口定义如下：" class="headerlink" title="它的接口定义如下："></a>它的接口定义如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法解析："><a href="#方法解析：" class="headerlink" title="方法解析："></a>方法解析：</h4><ul><li><p><strong>cancel</strong> 方法用来取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。</p><p>参数 <em>mayInterruptIfRunning</em> 表示是否允许取消<strong>正在执行却没有执行完毕</strong>的任务。</p><p>（true 表允许，false 表不允许）</p><p>如果 <strong>任务已经完成</strong>，则无论 <em>mayInterruptIfRunning</em> 为 true 还是 false，此方法肯定返回 false；即如果取消已经完成的任务一定取消失败；</p><p>如果 <strong>任务正在执行</strong>，若<em>mayInterruptIfRunning</em> 设置为 true，则返回 true（取消成功），若 <em>mayInterruptIfRunning</em> 设置为 false，则返回false（取消失败）；</p><p>如果 <strong>任务还没有执行</strong>，则无论 <em>mayInterruptIfRunning</em> 为 true 还是 false，肯定返回 true；即如果取消已经完成的任务一定取消成功。</p></li><li><p><strong>isCancelled</strong> 方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true。</p></li><li><p><strong>isDone</strong> 方法表示任务是否已经完成，若任务完成，则返回 true；</p></li><li><p><strong>get()</strong> 方法用来获取执行结果，这个方法会产生<strong>阻塞</strong>，会一直等到任务执行完毕才返回；</p></li><li><p><strong>get(long timeout, TimeUnit unit)</strong> 用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回 null。</p></li></ul><p>也就是说Future提供了三种功能：</p><ol><li>判断任务是否完成；</li><li>能够中断任务；</li><li>能够获取任务执行结果。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/hry2015/article/details/67640534" target="_blank" rel="noopener">Spring Boot系列二 Spring @Async异步线程池用法总结</a></p><p><a href="http://blog.didispace.com/springbootasync-2/" target="_blank" rel="noopener">Spring Boot使用@Async实现异步调用：自定义线程池</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>步骤：</strong></p><ol><li>配置类（加<code>@EnableAsync</code>）配置 <strong>异步线程池</strong>、<strong>异步异常处理类</strong></li><li>在指定方法上加 <code>@Async</code> 即可</li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter/24_2" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter/24_2</a></p><h4 id="学习-翟永超-、-hry2015-前辈的经验"><a href="#学习-翟永超-、-hry2015-前辈的经验" class="headerlink" title="学习 翟永超 、 hry2015 前辈的经验"></a>学习 <a href="http://blog.didispace.com/" target="_blank" rel="noopener">翟永超</a> 、 <a href="https://me.csdn.net/hry2015" target="_blank" rel="noopener">hry2015</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十四篇（一）：使用@Async实现异步调用</title>
      <link href="/2018/10/31/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8@Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
      <url>/2018/10/31/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8@Async%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>什么是“异步调用”？</p><p>​        “异步调用”对应的是“同步调用”，<strong><em>同步调用</em></strong> 指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；<strong><em>异步调用</em></strong> 指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。</p><p>[TOC]</p><h2 id="Async"><a href="#Async" class="headerlink" title="@Async"></a><strong>@Async</strong></h2><p>​       在Spring中，基于<code>@Async</code> 标注的方法，称之为 <strong>异步方法</strong>；这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。在<strong>Spring Boot</strong>中，我们只需要通过使用<code>@Async</code>注解就能简单的将原来的同步函数变为异步函数。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、component"><a href="#2、component" class="headerlink" title="2、component"></a>2、component</h2><p>​        <code>Task组件</code> 的异步方法中使用<code>Future&lt;String&gt;</code>作为返回类型，通过调用 <code>isDone()</code> 方法来达到判断异步方法是否执行成功的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试异步注解<span class="doctag">@Async</span>的组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/31 0031 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[----------开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[----------执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"----------完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[++++++++++开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[++++++++++执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"++++++++++完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[**********开始执行任务]"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"[**********执行任务完成] 耗时："</span> + (end-start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"**********完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Application"><a href="#3、Application" class="headerlink" title="3、Application"></a>3、Application</h2><p>在配置类上加上<code>@EnableAsync</code>打开异步功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter241Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter241Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Test"><a href="#4、Test" class="headerlink" title="4、Test"></a>4、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.component.Task;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter241ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task task;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Future&lt;String&gt; taskOne = task.doTaskOne();</span><br><span class="line">        Future&lt;String&gt; taskTwo = task.doTaskTwo();</span><br><span class="line">        Future&lt;String&gt; taskThree = task.doTaskThree();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断异步方法是否执行完成</span></span><br><span class="line">            <span class="keyword">if</span> (taskOne.isDone() &amp;&amp; taskTwo.isDone() &amp;&amp; taskThree.isDone()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务全部完成，总耗时："</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、显示"><a href="#5、显示" class="headerlink" title="5、显示"></a>5、显示</h2><p>执行 <code>Chapter241ApplicationTests.contextLoads()</code> 方法显示</p><p><img src="/images/SpringBoot2/SpringBoot整合Async/1540953744818.png" alt="1540953744818"></p><p>可以看到，通过异步调用，让任务一、二、三并发执行，<strong>有效的减少了程序的总运行时间</strong>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.didispace.com/springbootasync/" target="_blank" rel="noopener">Spring Boot中使用@Async实现异步调用</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>步骤：</p><ol><li>在方法上加上 <code>@Async</code></li><li>在配置类（启动类也属于配置类）上加上 <code>@EnableAsync</code></li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter24_1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter24_1</a></p><h4 id="学习-翟永超-前辈的经验"><a href="#学习-翟永超-前辈的经验" class="headerlink" title="学习 翟永超 前辈的经验"></a>学习 <a href="http://blog.didispace.com/" target="_blank" rel="noopener">翟永超</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十三篇：错误处理机制</title>
      <link href="/2018/10/29/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AF%87%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/10/29/SpringBoot2%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AF%87%20%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>​        我们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。接下来来看看SpringBoot的<strong>错误处理机制</strong>。（本文章以整合模板引擎 <strong>thymeleaf</strong> 为例）</p><p>[TOC]</p><h2 id="SpringBoot默认的错误处理机制"><a href="#SpringBoot默认的错误处理机制" class="headerlink" title="SpringBoot默认的错误处理机制"></a>SpringBoot默认的错误处理机制</h2><h3 id="1、默认效果（自适应）"><a href="#1、默认效果（自适应）" class="headerlink" title="1、默认效果（自适应）"></a>1、默认效果（自适应）</h3><blockquote><p>自适应：指访问<code>浏览器</code>响应<code>错误页面</code>，访问<code>客户端</code>响应 <code>JSON 数据</code>（适用于传统项目）；不支持自适应指不管访问的是<code>浏览器</code>还是<code>客户端</code>，响应的都是 <code>JSON 数据</code>（适用于前后端分离）。</p></blockquote><ol><li>浏览器访问，如果出现错误，SpringBoot会返回一个默认的 <strong>错误页面</strong></li></ol><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540819390719.png" alt="1540819390719"></p><ol start="2"><li><p>其他客户端访问，如果出现错误，SpringBoot默认会响应一串 <strong>json数据</strong></p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540865532344.png" alt="1540865532344"></p></li></ol><h3 id="2、底层-–-ErrorMvcAutoConfiguration"><a href="#2、底层-–-ErrorMvcAutoConfiguration" class="headerlink" title="2、底层 – ErrorMvcAutoConfiguration"></a>2、底层 – ErrorMvcAutoConfiguration</h3><p>SpringBoot的错误处理机制是由 <strong>ErrorMvcAutoConfiguration</strong> <code>自动配置组件</code>实现的。</p><p>下面看看这个配置组件中有什么重要的组件</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="ErrorPageCustomizer"><a href="#ErrorPageCustomizer" class="headerlink" title="ErrorPageCustomizer"></a>ErrorPageCustomizer</h5><blockquote><p>用于错误页面定制</p></blockquote><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/错误页面定制器.png" alt="错误页面定制器"></p><p>其中 <code>@Value(&quot;${error.path:/error}&quot;)</code> 用的语法是 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若在配置文件中找不到 hello 属性，则默认赋值为 defaultValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;hello:defaultValue&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String hello;</span><br></pre></td></tr></table></figure><h5 id="BasicErrorController"><a href="#BasicErrorController" class="headerlink" title="BasicErrorController"></a>BasicErrorController</h5><blockquote><p>根据<code>请求头的 Accept</code> 控制，调用<code>指定</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 响应html页面的处理方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line"> &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 响应json数据的处理方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"> <span class="meta">@RequestMapping</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DefaultErrorAttributes"><a href="#DefaultErrorAttributes" class="headerlink" title="DefaultErrorAttributes"></a>DefaultErrorAttributes</h5><blockquote><p>接受处理方法中的request域，<code>定制</code>返回的格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorAttributes</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ErrorAttributes</span>, <span class="title">HandlerExceptionResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">addStatus(errorAttributes, webRequest);</span><br><span class="line">addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">addPath(errorAttributes, webRequest);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DefaultErrorViewResolver"><a href="#DefaultErrorViewResolver" class="headerlink" title="DefaultErrorViewResolver"></a>DefaultErrorViewResolver</h5><blockquote><p>默认错误视图解析器：通过解析，根据<code>模板引擎</code>的<strong>类别</strong>、<strong>是否存在</strong>，返回<strong>指定</strong>的视图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 默认SpringBoot去找一个页面 error/404</span></span><br><span class="line">        String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        <span class="comment">// 获得模板引擎提供者</span></span><br><span class="line">TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>​        一旦系统出现了4xx或5xx之类的错误；<strong>ErrorPageCustomizer</strong>（定制错误页面规则）就会生效；然后定制器会发送 <strong>/error</strong> 请求，该请求会被 BasicErrorController 处理。 <strong>BasicErrorController</strong> 会根据请求头的 <strong>Accept</strong> 调用对应的方法 <strong>errorHtml</strong> 或 <strong>error</strong>（自适应），在这两个方法中，都调用了父类<code>AbstractErrorController</code>的方法 getErrorAttributes() <code>（父类通过构造方法注入组件ErrorAttributes）</code>，getErrorAttributes()中调用了 ErrorAttributes组件的 getErrorAttributes()，在该方法中对返回的数据进行封装，详细请看源码~~</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>该控制器是如何做到对浏览器响应页面，对其他客户端响应 json 数据的呢？</p><p>访问浏览器</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540889338496.png" alt="1540889338496"></p><p>访问客户端</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540889629457.png" alt="1540889629457"></p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540889658631.png" alt="1540889658631"></p><p>BasicErrorController 根据这两种方式定制了两个方法 <strong>errorHtml</strong> 和 error 来匹配请求</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540889796980.png" alt="1540889796980"></p><h3 id="3、如何定制错误响应"><a href="#3、如何定制错误响应" class="headerlink" title="3、如何定制错误响应"></a>3、如何定制错误响应</h3><p>​       虽然，<code>Spring Boot</code> 中实现了默认的 error 映射，但是在实际应用中，上面你的错误页面对用户来说并不够友好，我们通常需要去<strong>实现我们自己的异常提示</strong>。</p><h4 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h4><h5 id="templates-文件夹"><a href="#templates-文件夹" class="headerlink" title="templates 文件夹"></a>templates 文件夹</h5><p>​        <code>SpringBoot</code> 默认先去 <strong>templates 文件夹</strong> 下找资源 ==error/状态码.html==，将匹配的页面返回 （所以我们在使用的时候，直接将错误页面命名为 <strong>状态码.html</strong>，放在 <strong>template/error/</strong> 下即可。<code>SpringBoot</code> 就会去找与错误状态码对应的页面）</p><blockquote><p>那么问题就来了？错误码这么多。难道我们需要定制n个错误页面吗？</p></blockquote><p>当然不用。</p><p>​        <code>Spring Boot</code> 已经帮我们想好了这个问题，<code>DefaultErrorViewResolver</code> 组件中可以看到，对于同一系列的错误码，我们可以使用 <strong>前缀xx</strong> 的格式定制错误页面。如 ==4xx、5xx==。如果我们需要对指定的状态码做特殊的处理，这时候我们可以单独给这个状态码做一个页面，如 404.html 。SpringBoot 匹配的时候会优先查找 <strong>精确的状态.html</strong>，后模糊匹配。（<code>先精确后模糊</code>）</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1540869426354.png" alt="1540869426354"></p><p>数据模板（定制的时候，一些非自定义的异常。通过下面格式拿数据，实现统一格式。自定义的可以建个父异常，然后在<code>自定义的 ErrorAttributes</code> 中根据<strong>是否继承</strong>分类讨论）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="string">"2019-07-26T01:21:48.384+0000"</span>, <span class="comment">//时间戳</span></span><br><span class="line">    <span class="string">"status"</span>: <span class="number">405</span>, <span class="comment">// 状态码</span></span><br><span class="line">    <span class="string">"error"</span>: <span class="string">"Method Not Allowed"</span>,<span class="comment">// 错误提示</span></span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Request method 'POST' not supported"</span>, <span class="comment">// 异常消息</span></span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/categories/nesting"</span> <span class="comment">// 请求方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种没有自定义的，从默认的取信息，改成符合的自己`统一返回VO`咯。例如：</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">405</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Request method 'POST' not supported"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="static-文件夹"><a href="#static-文件夹" class="headerlink" title="static 文件夹"></a>static 文件夹</h5><p>​        如果在 <strong>templates</strong> 下找不到错误页面，<strong>SpringBoot</strong> 接下来会去 <strong>static</strong> 下找；如果都这个两个文件夹都没有，那么 <strong>SpringBoot</strong> 会返回默认的错误页面</p><h4 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h4><p>当客户端访问报错后，显示的 json 数据是固定的。那么我们如何定制自己的 json 数据呢。</p><h5 id="自适应（推荐）"><a href="#自适应（推荐）" class="headerlink" title="自适应（推荐）"></a><code>自适应</code>（推荐）</h5><blockquote><p>定制自己想要的 json 格式的数据，保持自适应效果。<strong><code>即使浏览器的不需要也无妨，我们只用它客户端的姿势就行。</code></strong></p></blockquote><p>需要 <code>ExceptionHandler</code> + <code>ErrorAttributes</code> 两个组件共同实现</p><ol><li><p>在异常处理方法中，我们将想要的数据放到 map 中</p><blockquote><p>要求：</p><ol><li>返回类型为 <code>String</code></li><li>返回值为 <code>&quot;forward:/error&quot;</code></li><li>request域 中放我们自己的状态码，不放默认为 200</li><li>数据放在 <code>request域</code> 中</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试定制json数据（保持自适应效果）的异常处理方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(AdaptiveException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adaptive</span><span class="params">(Exception e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传入自己的错误状态码，如 4xx,5xx 不传默认200</span></span><br><span class="line">    request.setAttribute(CUSTOM_STATUS_CODE, <span class="number">500</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"adaptive.code"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    request.setAttribute(<span class="string">"ext"</span>, map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在getErrorAttributes() 中我们 <strong>定制返回的 json 数据的格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个方法有点像代理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> webRequest ：接受异常处理方法中的request(可参考源码)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> includeStackTrace</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个map就是最后返回的数据，如果你想改格式，改这个map即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">    <span class="comment">// 后面的scope知道你对哪个域存取数据</span></span><br><span class="line">    Map&lt;String, Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>, <span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">"ext"</span>, ext);</span><br><span class="line">    map.put(<span class="string">"where"</span>, <span class="string">"进入自定义ErrorAttributes的getErrorAttributes中了~~"</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="不自适应"><a href="#不自适应" class="headerlink" title="不自适应"></a><code>不自适应</code></h5><blockquote><p>缺点：没有自适应效果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试传统定制json数据的异常处理方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(TraditionalException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">fatal</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"traditional.code"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-thymeleaf：<strong>2.0.6.RELEASE</strong></li><li>lombok：1.16.20</li></ul><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Thymeleaf 模板引擎依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>指定三个错误页面</p><h3 id="4xx-html"><a href="#4xx-html" class="headerlink" title="4xx.html"></a>4xx.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"$&#123;status&#125;"</span>&gt;</span>4xx<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>4xx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>时间戳:[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>状态码:[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>错误提示:[[$&#123;error&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5xx-html"><a href="#5xx-html" class="headerlink" title="5xx.html"></a>5xx.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"$&#123;status&#125;"</span>&gt;</span>5xx<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>5xx<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>状态码:[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>错误提示:[[$&#123;error&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>时间戳:[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="404-html"><a href="#404-html" class="headerlink" title="404.html"></a>404.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404错误页面（这是特制的~~）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404定制页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>时间戳:[[$&#123;timestamp&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>状态码:[[$&#123;status&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>错误提示:[[$&#123;error&#125;]]<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目录如下：（一定要放在<code>templates</code>下的<code>error</code>中）</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564379969025.png" alt="1564379969025"></p><h2 id="FatalErrorAttributes"><a href="#FatalErrorAttributes" class="headerlink" title="FatalErrorAttributes"></a>FatalErrorAttributes</h2><p>自定义一个 <code>ErrorAttributes</code> 组件，用于<strong>定制返回的（统一的） JSON 格式</strong></p><blockquote><p>为什么说统一呢？因为如果你直接在 <code>ExceptionHandler</code> 上面，加了<code>@RequestBody</code>，那么没被你拦截到的异常显示的格式是什么样子，还是 <strong>timestamp</strong> 那一串默认的 json。也许你会说，我加个 <code>ExceptionHandler</code>专门处理剩下来的所有异常，<code>code</code>都返回 <strong>500</strong>。这可不行哦，这种用法很危险，你还有很多 <strong>4xx</strong> 类型的错误呢。比方说，前端搞错请求方式，把 <code>GET</code> 搞成了 <code>POST</code>，一顿操作，真的报 <strong>500</strong> ，他截图发了句，你这个接口有 bug，你看了下日志，发现是对方请求方式不对，但是你怎么跟他说，百口难辩呀。一定程度下还降低了双方对接的效率…</p><p>但是，如果你自定义这个组件，就不同了，根据<code>是否自定义</code>来封装返回的属性；就能达到<strong>自定义的ExceptionHandler</strong>可以返回<code>定制的错误提示</code>，<strong>未自定义的ExceptionHandler</strong>能返回<code>默认的错误提示</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.attribute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义 ErrorAttributes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/30 0030 15:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法有点像代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webRequest ：接收异常处理方法中的request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> includeStackTrace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个map就是最后返回的数据，如果你想改格式，改这个map即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        <span class="comment">// 后面的scope知道你对哪个域存取数据，可以参考 RequestAttributes类</span></span><br><span class="line">        Map&lt;String, Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"ext"</span>, ext);</span><br><span class="line">        map.put(<span class="string">"where"</span>, <span class="string">"进入自定义ErrorAttributes的getErrorAttributes中了~~"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Custom-Exception"><a href="#Custom-Exception" class="headerlink" title="Custom Exception"></a>Custom Exception</h2><h3 id="TraditionalException"><a href="#TraditionalException" class="headerlink" title="TraditionalException"></a>TraditionalException</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试定制json数据异常（不自适应）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/30 0030 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraditionalException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraditionalException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"这是一个测试定制json数据的异常（不自适应）"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AdaptiveException"><a href="#AdaptiveException" class="headerlink" title="AdaptiveException"></a>AdaptiveException</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试定制json数据异常（自适应）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/30 0030 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptiveException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdaptiveException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"这是一个测试定制json数据的异常（自适应）"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GlobalExceptionHandler"><a href="#GlobalExceptionHandler" class="headerlink" title="GlobalExceptionHandler"></a>GlobalExceptionHandler</h2><p>写一个<code>全局异常处理器</code>，里边可以自定义处理各种异常的处理器（<code>ExceptionHandler</code>）。类上标记注解<code>@ControllerAdvice</code>声明该组件是<code>全局异常处理器</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.exception.AdaptiveException;</span><br><span class="line"><span class="keyword">import</span> com.fatal.exception.TraditionalException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义全局异常处理器</span></span><br><span class="line"><span class="comment"> * 子类的处理方法优先于父类获得处理权，若子类不存在，就近原则，离子类最近的父类的处理方法获得处理权</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/30 0030 14:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 状态码键名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String CUSTOM_STATUS_CODE = <span class="string">"javax.servlet.error.status_code"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不自适应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(TraditionalException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">fatal</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"traditional.code"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自适应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AdaptiveException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">adaptive</span><span class="params">(Exception e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入自己的错误状态码，如 4xx,5xx 不传默认200</span></span><br><span class="line">        request.setAttribute(CUSTOM_STATUS_CODE, <span class="number">500</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"adaptive.code"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        request.setAttribute(<span class="string">"ext"</span>, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FatalController"><a href="#FatalController" class="headerlink" title="FatalController"></a>FatalController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.exception.AdaptiveException;</span><br><span class="line"><span class="keyword">import</span> com.fatal.exception.TraditionalException;</span><br><span class="line"><span class="keyword">import</span> com.fatal.handler.GlobalExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/30 0030 14:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GlobalExceptionHandler handler;</span><br><span class="line"></span><br><span class="line">    FatalController(GlobalExceptionHandler handler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟 400 错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/400"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error400</span> <span class="params">(@RequestParam(value = <span class="string">"data"</span>, required = <span class="keyword">true</span>)</span> String data) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试传统定制的json数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/traditional"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">errorTraditional500</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TraditionalException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试定制的json数据（保持自适应效果）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/adaptive"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">errorAdaptive500</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AdaptiveException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.controller.FatalController;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter23ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FatalController controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试构造方法注入组件不需要在构造方法上加注解`<span class="doctag">@Autowired</span>`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(controller.getHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目</p><h3 id="400"><a href="#400" class="headerlink" title="400"></a>400</h3><p><a href="http://localhost:8080/400" target="_blank" rel="noopener">http://localhost:8080/400</a></p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564404928215.png" alt="1564404928215"></p><h3 id="404"><a href="#404" class="headerlink" title="404"></a>404</h3><p><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564404950090.png" alt="1564404950090"></p><h3 id="不自适应-1"><a href="#不自适应-1" class="headerlink" title="不自适应"></a>不自适应</h3><p>浏览器</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564405143417.png" alt="1564405143417"></p><p>客户端</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564405357640.png" alt="1564405357640"></p><h3 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h3><p>自适应</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564405268422.png" alt="1564405268422"></p><p>客户端</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564405292375.png" alt="1564405292375"></p><h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><p>启动 <code>Chapter23ApplicationTests.contextLoads()</code>，显示如下</p><p><img src="/images/SpringBoot2/SpringBoot错误处理机制/1564405772877.png" alt="1564405772877"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><p>在全局异常处理器中，各个处理方法都遵循两个原则</p><ul><li>子类的处理方法优先于父类获得处理权</li><li>若子类不存在，就近原则，离子类最近的父类的处理方法获得处理权</li></ul><h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><p><code>可以不用在构造方法上加注解，只需要将组件作为构造方法参数即可</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="定制错误页面"><a href="#定制错误页面" class="headerlink" title="定制错误页面"></a>定制错误页面</h3><p>​        在 <strong>templates/error</strong> 下定制 <strong>状态码.html</strong>（可以 <strong>指定</strong> 某个状态码，也可以使用 <strong>前缀xx</strong> 的格式进行模糊匹配）。<strong>SpringBoot</strong> 会优先匹配精确的，再匹配模糊的。</p><h3 id="定制json数据（保持自适应）"><a href="#定制json数据（保持自适应）" class="headerlink" title="定制json数据（保持自适应）"></a>定制json数据（保持自适应）</h3><p>步骤：</p><ol><li>创建全局异常处理器（对处理方法的要求：返回类型必须是 <code>String</code>；返回值为 <code>&quot;forward:/error&quot;</code> ；request域 中放我们自己的状态码，不放默认为 200；数据放在 <code>request域</code> 中）</li><li>创建自定义 <strong>ErrorAttrubute</strong></li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter23" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter23</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十二篇：使用JavaMailSender发送邮件</title>
      <link href="/2018/10/28/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8JavaMailSender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2018/10/28/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8JavaMailSender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>​        相信使用过Spring的众多开发者都知道Spring提供了非常好用的<code>JavaMailSender</code>接口实现邮件发送。在Spring Boot的Starter模块中也为此提供了自动化配置。下面通过实例看看如何在Spring Boot中使用<code>JavaMailSender</code>发送邮件。这里以 <strong>QQ邮件</strong> 为例</p><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-mail： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 JavaMailSender 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mail:</span></span><br><span class="line"><span class="attr">    default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="comment"># SMTP server host. For instance, `smtp.example.com`.</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment"># 账号</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">xxx@qq.com</span></span><br><span class="line">    <span class="comment"># 密码（授权码）</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">xxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="comment"># 协议默认为 SMTP</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">smtp</span></span><br></pre></td></tr></table></figure><h3 id="如何获得授权码？"><a href="#如何获得授权码？" class="headerlink" title="如何获得授权码？"></a>如何获得授权码？</h3><p>打开<code>我的邮箱</code>，选择<code>设置</code></p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540784160579.png" alt="1540784160579"></p><p>选择<code>账户</code> ，找到服务，点击<code>开启</code></p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540784255454.png" alt="1540784255454"></p><p>发送短信，签证成功后既可获得<code>授权码</code></p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540784318779.png" alt="1540784318779"></p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540784373938.png" alt="1540784373938"></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter22ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        SimpleMailMessage mailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        </span><br><span class="line">        mailMessage.setFrom(<span class="string">"634137063@qq.com"</span>);    <span class="comment">// 发送者</span></span><br><span class="line">        mailMessage.setTo(<span class="string">"2235535456@qq.com"</span>);     <span class="comment">// 接收者</span></span><br><span class="line">        mailMessage.setSubject(<span class="string">"您好，这是fatal的一份邮件"</span>);  <span class="comment">// 标题</span></span><br><span class="line">        mailMessage.setText(<span class="string">"Hello world!"</span>);    <span class="comment">// 内容</span></span><br><span class="line">        </span><br><span class="line">        sender.send(mailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>启动程序测试方法 Chapter22ApplicationTests.sendSimpleMail()</p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540784594122.png" alt="1540784594122"></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>​        在上例中，我们通过使用<code>SimpleMailMessage</code>实现了简单的邮件发送，但是实际使用过程中，我们还可能会带上附件、或是使用邮件模块等。这个时候我们就需要使用<code>MimeMessage</code>来设置复杂一些的邮件内容，下面我们就来依次实现一下。下面的例子会以 <strong>发送附件</strong> 和 <strong>嵌入静态资源</strong> 为例</p><h3 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter22ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String FILENAME = <span class="string">"娜美桌面壁纸"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String PATHNAME = <span class="string">"E:/Pictures/桌面壁纸/娜美.png"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第二个参数表示是否创建多部分消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        helper.setFrom(<span class="string">"634137063@qq.com"</span>);    <span class="comment">// 发送者</span></span><br><span class="line">        helper.setTo(<span class="string">"2235535456@qq.com"</span>);     <span class="comment">// 接收者</span></span><br><span class="line">        helper.setSubject(<span class="string">"桌面壁纸"</span>);  <span class="comment">// 标题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 嵌入静态资源</span></span><br><span class="line">        helper.setText(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;&lt;/h1&gt;&lt;img style='max-width: 500px' src=\"cid:wallpaper\" &gt;&lt;/body&gt;&lt;/html&gt;"</span>, <span class="keyword">true</span>); <span class="comment">// 内容</span></span><br><span class="line">        <span class="comment">// FileSystemResource 加载绝对路径的流</span></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(PATHNAME));</span><br><span class="line">        <span class="comment">// 设置 contentId 及其对应的 `文件资源`（Resource）</span></span><br><span class="line">        helper.addInline(<span class="string">"wallpaper"</span>, file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在邮件中添加附件，添加多个附件可以使用多条</span></span><br><span class="line">        <span class="comment">// helper.addAttachment(附件名, 附件对象);</span></span><br><span class="line">        helper.addAttachment(FILENAME, file);</span><br><span class="line">        </span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里需要注意的是addInline函数中资源名称==wallpaper==需要与正文中==cid:wallpaper==对应起来</strong>。</p><h3 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h3><p>启动程序测试方法 Chapter22ApplicationTests.sendAttachmentsMail()</p><p><img src="/images/SpringBoot2/SpringBoot使用JavaMailSender发送邮件/1540789898187.png" alt="1540789898187"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>如果需要设置替代文本或添加内联元素或附件，则通过构造函数创建适当的MimeMessageHelper，该构造函数采用“multipart”标志。</p><p><code>MimeMessageHelper(MimeMessage mimeMessage)</code></p><p><code>MimeMessageHelper(MimeMessage mimeMessage, boolean multipart)</code></p><p>使用第一个构造方法会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Not in multipart mode - create an appropriate MimeMessageHelper via a constructor that takes a &apos;multipart&apos; flag if you need to set alternative texts or add inline elements or attachments.</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.didispace.com/springbootmailsender/" target="_blank" rel="noopener">Spring Boot中使用JavaMailSender发送邮件</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter22" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter22</a></p><h4 id="学习-翟永超-前辈的经验"><a href="#学习-翟永超-前辈的经验" class="headerlink" title="学习 翟永超 前辈的经验"></a>学习 <a href="http://blog.didispace.com/" target="_blank" rel="noopener">翟永超</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十一篇：使用@Scheduled实现定时任务</title>
      <link href="/2018/10/27/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8@Scheduled%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2018/10/27/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8@Scheduled%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>下面使用 <strong>Spring</strong> 的 <strong>@Scheduled</strong> 注解实现定时任务</p><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、component"><a href="#2、component" class="headerlink" title="2、component"></a>2、component</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/27 0027 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0/5 * * * * *")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"scheduled1 现在时间："</span> + format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Application"><a href="#3、Application" class="headerlink" title="3、Application"></a>3、Application</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableScheduling</span>   <span class="comment">// 开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter21Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter21Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、显示"><a href="#4、显示" class="headerlink" title="4、显示"></a>4、显示</h2><p><img src="/images/SpringBoot2/SpringBoot使用@Scheduled实现定时任务/1540634463215.png" alt="1540634463215"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="Scheduled详解"><a href="#Scheduled详解" class="headerlink" title="@Scheduled详解"></a>@Scheduled详解</h3><p>在上面的入门例子中，使用了<code>@Scheduled(fixedRate = 5000)</code> 注解来定义每过5秒执行的任务，对于<code>@Scheduled</code>的使用可以总结如下几种方式：</p><ul><li><code>@Scheduled(fixedRate = 5000)</code> ：上一次开始执行时间点之后5秒再执行</li><li><code>@Scheduled(fixedDelay = 5000)</code> ：上一次执行完毕时间点之后5秒再执行</li><li><code>@Scheduled(initialDelay=1000, fixedRate=5000)</code> ：第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次</li><li><code>@Scheduled(cron=&quot;*/5 * * * * *&quot;)</code> ：通过cron表达式定义规则</li></ul><h3 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><p>​        <strong>cron</strong> 的表达式是字符串，实际上是由 <strong>七个子表达式</strong> 构成，描述个别细节的时间表。这些子表达式是分开的空白，代表：</p><table><thead><tr><th>序号</th><th>名字</th><th>描述（每一个表达式都有一套可以指定有效值）</th></tr></thead><tbody><tr><td>1</td><td><strong>Seconds</strong></td><td>可以用数字 <strong>0－59</strong> 表示</td></tr><tr><td>2</td><td><strong>Minutes</strong></td><td>可以用数字 <strong>0－59</strong> 表示</td></tr><tr><td>3</td><td><strong>Hours</strong></td><td>可以用数字 <strong>0 - 23</strong> 表</td></tr><tr><td>4</td><td><strong>Day-of-Month</strong></td><td>可以用数字 <strong>1-31</strong> 中的任一一个值，但要注意一些特别的月份</td></tr><tr><td>5</td><td><strong>Month</strong></td><td>可以用 <strong>0-11</strong> 或用字符串  <strong>“JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC”</strong> 表示</td></tr><tr><td>6</td><td><strong>Day-of-Week</strong></td><td>可以用数字 <strong>1 - 7</strong> 表示<strong>（1 ＝ 星期日）</strong>或用字符口串 <strong>“SUN, MON, TUE, WED, THU, FRI and SAT”</strong> 表示</td></tr><tr><td>7</td><td><strong>Year (可选字段)</strong></td><td>可以用数字 <strong>1977－2099</strong> 表示</td></tr></tbody></table><p>例 ：”0 0 12 ? * WED” 在每星期三下午12:00 执行</p><p>析：个别子表达式可以包含 <strong>范围</strong>，例如，在前面的例子里(“WED”)可以替换成 <strong>“MON-FRI”</strong>, <strong>“MON, WED, FRI”</strong>甚至<strong>“MON-WED,SAT”</strong>.</p><h4 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2. 特殊字符"></a>2. 特殊字符</h4><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><strong>*</strong></td><td>代表整个时间段.</td></tr><tr><td><strong>/</strong></td><td>表示为“每”。如“0/15”表示每隔15分钟执行一次，“0”表示为从“0”分开始， “3/20”表示表示每隔20分钟执行一次，“3”表示从第3分钟开始执行</td></tr><tr><td><strong>?</strong></td><td>表示每月的某一天，或每周的某一天</td></tr><tr><td><strong>L</strong></td><td>用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几。如“6L”放在<strong>Day-of-Week</strong>上，表示“每月的最后一个星期五”（6：每月的周五；L：在这里代表最后一周）</td></tr><tr><td><strong>W</strong></td><td>表示为最近工作日，如“15W”放在每月（day-of-month）字段上表示为“到本月15日最近的工作日”</td></tr><tr><td><strong>#</strong></td><td>是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为”6#3” or “FRI#3” 则表示“每月第三个星期五”</td></tr><tr><td><strong>,</strong> 逗号</td><td>分隔表达式中的数值</td></tr><tr><td><strong>-</strong> 横杆</td><td>用在两个数值中间表示 <strong>范围</strong></td></tr></tbody></table><h4 id="3-格式"><a href="#3-格式" class="headerlink" title="3. 格式"></a>3. 格式</h4><table><thead><tr><th>名字</th><th>允许的值</th><th>允许的值</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>小时</td><td>0-23</td><td>, - * ? / L W C</td></tr><tr><td>日</td><td>1-31</td><td>, - * /</td></tr><tr><td>月</td><td>1-12 or JAN-DEC</td><td>, - * ? / L C #</td></tr><tr><td>周</td><td>1-7 or SUN-SAT</td><td>, - * /</td></tr><tr><td>年 (可选字段)</td><td>empty，1970-2099</td><td>, - * /</td></tr></tbody></table><h4 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h4><ul><li><p>每隔5秒执行一次：<em>/5 </em> <em> </em> * ?</p></li><li><p>每隔1分钟执行一次：0 <em>/1 </em> <em> </em> ?</p></li><li>每天23点执行一次：0 0 23 <em> </em> ?</li><li>每天凌晨1点执行一次：0 0 1 <em> </em> ?</li><li>每月1号凌晨1点执行一次：0 0 1 1 * ?</li><li>每月最后一天23点执行一次：0 0 23 L * ?</li><li>每周星期天凌晨1点实行一次：0 0 1 ? * L</li><li>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?</li><li>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 <em> </em> ?</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.didispace.com/springbootscheduled/" target="_blank" rel="noopener">Spring Boot中使用@Scheduled创建定时任务</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 <strong>SpringBoot</strong> 中使用 <strong>Spring</strong> 注解 <strong>@Scheduled</strong> 注解实现定时任务很简单，只需两步：</p><ul><li>在配置类上加 <strong>@EnableScheduling</strong>（开启定时任务功能）</li><li>在定时方法上加 <strong>@Scheduled</strong></li></ul><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter21" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter21</a></p><h4 id="学习-翟永超-前辈的经验"><a href="#学习-翟永超-前辈的经验" class="headerlink" title="学习 翟永超 前辈的经验"></a>学习 <a href="http://blog.didispace.com/" target="_blank" rel="noopener">翟永超</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二十篇：使用SpringBoot上传文件</title>
      <link href="/2018/10/26/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2018/10/26/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8SpringBoot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>​        在工作中用的都是工具类，对 <strong>IO流</strong> 的使用也忘得差不多了，写个 Demo 来复习一下。<strong>spring boot</strong> 的文件上传与 <strong>spring mvc</strong> 的文件上传基本一致，只需注意一些配置即可。</p><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-thymeleaf： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Thymeleaf 模板引擎依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line">      <span class="comment"># 设置单个文件最大值</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">10</span><span class="string">MB</span></span><br><span class="line">      <span class="comment"># 设置总上传数据最大值</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">10</span><span class="string">MB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传路径</span></span><br><span class="line"><span class="attr">upload:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="attr">E:/upload/fatal/</span></span><br><span class="line"><span class="comment">#  path: /usr/local/upload/fatal/</span></span><br></pre></td></tr></table></figure><h2 id="3、templates"><a href="#3、templates" class="headerlink" title="3、templates"></a>3、templates</h2><h3 id="upload-html"><a href="#upload-html" class="headerlink" title="upload.html"></a><code>upload.html</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring Boot file upload example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="uploadStatus-html"><a href="#uploadStatus-html" class="headerlink" title="uploadStatus.html"></a><code>uploadStatus.html</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传状态<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring Boot - Upload Status<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;files&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:text</span>=<span class="string">"$&#123;files&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、FileUtil"><a href="#4、FileUtil" class="headerlink" title="4、FileUtil"></a>4、FileUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/21 0021 12:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;upload.path&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uploadPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传一个或多个文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFiles</span><span class="params">(MultipartFile[] files)</span> </span>&#123;</span><br><span class="line">        Arrays.stream(files)</span><br><span class="line">                .forEach(<span class="keyword">this</span>::uploadByFiles);</span><br><span class="line"><span class="comment">//                .forEach(this::uploadByFileStream);</span></span><br><span class="line"><span class="comment">//                .forEach(this::uploadByMultipartFile);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名（包括后缀）</span></span><br><span class="line"><span class="comment">     * private void uploadByxxx(MultipartFile file)</span></span><br><span class="line"><span class="comment">     * 注意：这三个方法都一样，如果图片名字格式相同，则会覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FileStreams</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadByFileStream</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            String filename = file.getOriginalFilename();</span><br><span class="line">            in = (FileInputStream)file.getInputStream();</span><br><span class="line">            File directory = <span class="keyword">new</span> File(uploadPath);</span><br><span class="line">            initDirectory(directory);</span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(uploadPath + filename);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">"【文件 &#123;&#125; 上传耗时】 [&#123;&#125;]"</span>, filename, end - start);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in!= <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * nio</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadByFiles</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            String filename = file.getOriginalFilename();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            Path path = Paths.get(uploadPath + filename);</span><br><span class="line">            File directory = <span class="keyword">new</span> File(uploadPath);</span><br><span class="line">            initDirectory(directory);</span><br><span class="line">            Files.write(path, bytes);</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">"【文件 &#123;&#125; 上传耗时】 [&#123;&#125;]"</span>, filename, end - start);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringMVC 封装的上传文件的方法 MultipartFile.transferTo(File dest)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadByMultipartFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            String filename = file.getOriginalFilename();</span><br><span class="line">            File directory = <span class="keyword">new</span> File(uploadPath);</span><br><span class="line">            initDirectory(directory);</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(uploadPath + filename));</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">"【文件 &#123;&#125; 上传耗时】 [&#123;&#125;]"</span>, filename, end - start);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDirectory</span><span class="params">(File directory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断文件是否存在，不存在则新建一个</span></span><br><span class="line">        <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> mkdirs = directory.mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (!mkdirs) &#123;</span><br><span class="line">                log.error(<span class="string">"【文件上传】 文件夹创建失败 -[&#123;&#125;]"</span>, uploadPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、handler"><a href="#5、handler" class="headerlink" title="5、handler"></a>5、handler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/26 0026 11:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler</span><span class="params">(RuntimeException e, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">        redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/uploadStatus"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、controller"><a href="#6、controller" class="headerlink" title="6、controller"></a>6、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.utils.FileUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/25 0025 19:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileUtil fileUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"upload"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/uploadStatus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"uploadStatus"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile[] files,</span></span><br><span class="line"><span class="function">                                   RedirectAttributes redirectAttributes) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (files.length == <span class="number">0</span>) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Select at least one file to upload"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:uploadStatus"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileUtil.uploadFiles(files);</span><br><span class="line">            List&lt;String&gt; fileNames = Arrays.stream(files)</span><br><span class="line">                    .map(MultipartFile::getOriginalFilename)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"Successful file uploaded"</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">"files"</span>, fileNames);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"uploaded fail"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/uploadStatus"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h2><p>启动项目</p><p>访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>选择上传文件</p><p><img src="/images/SpringBoot2/SpringBoot上传文件/1563704716326.png" alt="1563704716326"></p><p>点击submit</p><p><img src="/images/SpringBoot2/SpringBoot上传文件/1563704776526.png" alt="1563704776526"></p><p>看看控制台</p><p><img src="/images/SpringBoot2/SpringBoot上传文件/1563704880753.png" alt="1563704880753"></p><p>看看文件是否上传成功</p><p><img src="/images/SpringBoot2/SpringBoot上传文件/1563704817867.png" alt="1563704817867"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ityouknow.com/springboot/2018/01/12/spring-boot-upload-file.html" target="_blank" rel="noopener">Spring Boot(十七)：使用 Spring Boot 上传文件</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter20" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter20</a></p><h4 id="学习-纯洁的微笑-前辈的经验"><a href="#学习-纯洁的微笑-前辈的经验" class="headerlink" title="学习 纯洁的微笑 前辈的经验"></a>学习 <a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十九篇：整合RabbitMQ（生产案例）</title>
      <link href="/2018/10/23/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_5%EF%BC%88%E7%94%9F%E4%BA%A7%E6%A1%88%E4%BE%8B%EF%BC%89/"/>
      <url>/2018/10/23/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_5%EF%BC%88%E7%94%9F%E4%BA%A7%E6%A1%88%E4%BE%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>​        前面 4 篇笔记对<code>RabbitMQ</code>做了初步的描述：<code>简单入门</code>、<code>交换机类型 + 手动 ack</code> 、<code>生产者确认</code>、<code>延迟队列</code>。那么消息中间件如何处理消费失败的消息？假设有两个系统 <strong>A系统</strong> 和 <strong>B系统</strong>，A系统是生产者，B系统则是消费者。A系统负责发送消息到 <code>MQ</code>，B系统负责从 <code>MQ</code> 拿到消息后进行消费，AB双方互不干涉互不影响；A不管也不需要知道消费者是谁，B也不需要知道生产者是谁，这样的通信方式，就是所谓的“<code>异步</code>”通信方式。它的好处就是可以实现系统之间的<code>解耦</code>，提高整套系统的容错性。</p><p>[TOC]</p><h2 id="生产案例：购物平台"><a href="#生产案例：购物平台" class="headerlink" title="生产案例：购物平台"></a>生产案例：购物平台</h2><p>​        以淘宝为例，从我们选择商品到下单、付款，再到快递员派送。快递到了手之前，它有多少流程呢？其它的业务就不提了，就说说 <code>MQ</code> 的使用场景吧。就提两种吧，其一：用户下单后，如果 30 分钟内完成付款，订单就会自动取消，这个功能可以通过 <code>MQ</code> 的延迟队列来实现。其二：用户下单并完成付款后，<strong>订单系统</strong>会生产一条 <code>MQ</code> 消息，而<strong>仓库系统</strong>负责消费这条消息，调用<strong>独立仓库系统</strong>发货和通知<strong>第三方物流系统</strong>进行配送，为了防止<strong>仓库系统</strong>出错导致消息丢失，我们需要使用 <code>MQ</code> 的死信队列提升系统的健壮性。</p><p><strong>核心问题：</strong></p><p>如果消费者服务在消费消息途中失败了，这种情况怎么处理？</p><p><strong>解决方案：</strong></p><p>使用死信队列处理失败的消息~~</p><p>一般生产环境中，如果你有丰富的架构设计经验，都会在使用 <code>MQ</code> 的时候设计两个队列：一个是<code>核心业务队列</code>，一个是<code>死信队列</code>。核心业务队列，比如上面的<strong>订单系统</strong>到<strong>仓库系统</strong>；死信队列，用来处理异常情况的。</p><h2 id="RabbitMQ-持久化"><a href="#RabbitMQ-持久化" class="headerlink" title="RabbitMQ 持久化"></a>RabbitMQ 持久化</h2><p><code>持久化</code>可以提高 <code>RabbitMQ</code>的可靠性，以防在异常情况下（重启、关闭、宕机）数据丢失。<code>RabbitMQ</code> 的持久化：<strong>交换机的持久化</strong>（对于一个长期使用的交换机来说，建议将其设置为持久化）、<strong>队列的持久化</strong>和<strong>消息的持久化</strong>。“皮之不存，毛将焉附”，只设置消息的持久化，而忽略了交换机和队列，那也起不了作用，我们必须将<code>交换机、队列、消息</code>三个都设置为持久化，才能保证消息的持久化。通过消息的投递模式（<code>MessageProperties</code> 中的 <code>DeliveryMode</code>）即可实现消息的持久化。<code>SpringBoot</code>已经将这些信息封装好了。</p><p>注意：</p><p>可以将所有的消息都设置为持久化，但是这样会严重影响 <code>RabbitMQ</code> 的性能，写入磁盘的速度比写入内存的速度慢得不是一点点。对于可靠性不是那么高的消息可以不采用持久化处理以提高整体的吞吐量。在选择是否要消息持久化时，需要在<strong>可靠性</strong>和<strong>吞吐量</strong>之间做一个权衡。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.1.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-amqp： <strong>2.1.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><ul><li><code>fastjson</code>：用于反序列化</li><li><code>spring-boot-starter-amqp</code>：RabbitMQ 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span>    <span class="comment"># 默认为`localhost`</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>  <span class="comment"># 默认为 5672</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 手动ACK，不开启自动ACK，目的是为了防止报错后未正确处理消息丢失，默认为`none`，不 ACK</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><h2 id="3、utils"><a href="#3、utils" class="headerlink" title="3、utils"></a>3、utils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.GetResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/19 0019 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Json 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> getResponse </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(GetResponse getResponse, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] body = getResponse.getBody();</span><br><span class="line">        <span class="keyword">return</span> (T) JSONObject.parseObject(body, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、config"><a href="#4、config" class="headerlink" title="4、config"></a>4、config</h2><ul><li><code>ExceptionHandlerExchange</code>：异常处理交换机（死信交换机），接收消息失败的消息</li><li><code>ExceptionHandlerQueue</code>：异常处理队列（死信队列）</li><li><code>TaskExchange</code>：任务交换机（Direct Exchange）</li><li><code>TaskQueue</code>：任务队列</li><li><code>RabbitTemplate</code>：自定义 <code>RabbitTemplate</code> 模板，将序列化方式由默认的 <code>Jdk 序列化</code> 改为 <code>Json序列化</code></li><li><code>SimpleRabbitListenerContainerFactory</code>：自定义 <code>RabbitMQ</code> 监听容器工厂，在默认配置的基础上将序列化方式由默认的 <code>Jdk 序列化</code> 改为 <code>Json序列化</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactoryConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/12 0012 8:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE = <span class="string">"task_queue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_EXCHANGE = <span class="string">"task_exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_ROUTING_KEY = <span class="string">"task"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理相关配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEPTION_HANDLING_QUEUE_NAME = <span class="string">"exception_handling_queue_name"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEPTION_HANDLING_EXCHANGE_NAME = <span class="string">"exception_handling_exchange_name"</span>;</span><br><span class="line">    <span class="comment">// 一般使用原队列的路由键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCEPTION_HANDLING_ROUTING_KEY = <span class="string">"task"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列中用来关联`死信交换机`的交换机键名，路由键键名（这是参数值是`固定`的）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DEAD_LETTER_EXCHANGE = <span class="string">"x-dead-letter-exchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DEAD_LETTER_ROUTING_KEY = <span class="string">"x-dead-letter-routing-key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************   JSON 序列化与反序列化   ***********************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RabbitTemplate 的消息转换器设置为 Jackson2JsonMessageConverter（默认转换器是 SimpleMessageConverter）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">        rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 SpringBoot 整合 RabbitMQ 的组件 SimpleRabbitListenerContainerFactory</span></span><br><span class="line"><span class="comment">     * 默认配置的基础上，将 MessageConverter（默认是 SimpleMessageConverter，该转换器基于 Jdk 序列化）</span></span><br><span class="line"><span class="comment">     * 设置为 Jackson2JsonMessageConverter（基于 Json 序列化，性能更好）</span></span><br><span class="line"><span class="comment">     * 下面的组件是从源码中找的，我们在这个组件的基础上进行修改的话，可以保留配置的属性。要是写个新的，很多</span></span><br><span class="line"><span class="comment">     * 配置就没意义了，比如，你在外面设置的手动ack没有了。它用的还是默认的 no ack。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"rabbitListenerContainerFactory"</span>)</span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.rabbitmq.listener"</span>, name = <span class="string">"type"</span>, havingValue = <span class="string">"simple"</span>,</span><br><span class="line">            matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">simpleRabbitListenerContainerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SimpleRabbitListenerContainerFactoryConfigurer configurer, ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        configurer.configure(factory, connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **********************   JSON 序列化与反序列化 end   *********************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************   异常处理交换机相关配置   ***********************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">exceptionHandlerQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(EXCEPTION_HANDLING_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">exceptionHandlerExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(EXCEPTION_HANDLING_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 将`死信队列`、`死信交换机（DLX）`、`DEAD_LETTER_ROUTING_KEY`路由键 三者绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">dlxBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(exceptionHandlerQueue())</span><br><span class="line">                .to(exceptionHandlerExchange())</span><br><span class="line">                .with(EXCEPTION_HANDLING_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **********************   异常处理交换机相关配置(end)   **********************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// **************************   Task交换机相关配置   **************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 与`死信交换机`绑定，并指定`死信`携带的路由键，不需要设置消息的过期时间。</span></span><br><span class="line"><span class="comment">     *      消息只要是被 basicReject(requeue:true)、basicNack(requeue:true) 回来的，</span></span><br><span class="line"><span class="comment">     *      都会被转移到死信交换机那边。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">taskQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; configs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        configs.put(X_DEAD_LETTER_EXCHANGE, EXCEPTION_HANDLING_EXCHANGE_NAME);</span><br><span class="line">        configs.put(X_DEAD_LETTER_ROUTING_KEY, EXCEPTION_HANDLING_ROUTING_KEY);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(TASK_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, configs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">taskExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(TASK_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">taskBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(taskQueue())</span><br><span class="line">                .to(taskExchange())</span><br><span class="line">                .with(TASK_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************   Task交换机相关配置(end)   ************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、entity"><a href="#5、entity" class="headerlink" title="5、entity"></a>5、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/12 0012 8:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、consumer"><a href="#6、consumer" class="headerlink" title="6、consumer"></a>6、consumer</h2><h3 id="6-1、TaskConsumer"><a href="#6-1、TaskConsumer" class="headerlink" title="6.1、TaskConsumer"></a>6.1、<code>TaskConsumer</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/12 0012 9:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = RabbitMQConfig.TASK_QUEUE)</span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskConsumer</span><span class="params">(@Payload User user, Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【taskConsumer 消费消息】 - [消费时间] - [&#123;&#125;] - [&#123;&#125;]"</span>, LocalDateTime.now(), user);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟业务异常</span></span><br><span class="line"><span class="comment">//            int i = 1/0;</span></span><br><span class="line">            <span class="comment">// 模拟 Ack 失败</span></span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"taskConsumer Ack失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【taskConsumer Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="comment">// 消息转移</span></span><br><span class="line">            basicNack(message, channel);</span><br><span class="line">            <span class="comment">// 抛出异常，让消费端事务回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【taskConsumer 消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="comment">// 消息转移</span></span><br><span class="line">            basicNack(message, channel);</span><br><span class="line">            <span class="comment">// 抛出异常，让消费端事务回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将消费失败的信息转移到死信队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">basicNack</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟 Nack 失败</span></span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 拒绝消息。multiple 设置为 true，如果调用此方法过程中报错了，消息就会变为 unacked 状态，那么下次调用就需要</span></span><br><span class="line"><span class="comment">             * 拒绝传递标签之前（包括提供的传递标签）的所有消息（当然，如果只有一条消费失败的消息运气不好，因为网络问题调用不了</span></span><br><span class="line"><span class="comment">             * basicNack 方法，那么这条消息就会变成 unacked 状态，那怎么办呢？目前我的想法是给消息设置个过期时间）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@method</span> void basicNack(long deliveryTag, boolean multiple, boolean requeue) throws IOException</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@deliveryTag</span> 指定队列要拒绝的已接收消息的标签（也叫传递标签）。新的队列默认的传递标签为0，代表接收过0条消息；</span></span><br><span class="line"><span class="comment">             *      队列接收消息后，传递标签会从0开始累加。（传递标签de值也可以看成该队列接收的第n条消息）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@multiple</span> true: 用于拒绝提供的传递标签之前（包括提供的传递标签）指向的所有消息；</span></span><br><span class="line"><span class="comment">             *      false: 仅拒绝提供的传递标签指向的那条消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@requeue</span> true: 拒绝的消息重新排队</span></span><br><span class="line"><span class="comment">             *      false: 判断该队列是否有绑定死信交换机，没有则丢弃；有则转移到死信交换机做后续处理</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@desc</span> basicNack 与 basicReject 的唯一区别：basicNack 可以选择拒绝传递标签之前（包括提供的传递标签）的所有消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//            channel.basicReject(message.getMessageProperties().getDeliveryTag(), false);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"【taskConsumer Nack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * basicRecover 在这里解决消费端ack和nack失败和断网问题。怎么说呢？</span></span><br><span class="line"><span class="comment">             *  1. ack和nack失败 通过重新排队，直到这两个方法正常调用为止</span></span><br><span class="line"><span class="comment">             *  2. 断网问题 消费失败的消息会变成 unacked，那么当网络正常了，系统重新启动会再次消费 这个 unacked 的消息。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@method</span> Basic.RecoverOk basicRecover(boolean requeue) throws IOException;</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@requeue</span> true: 消息将被重新排队并可能传递给其他使用者（默认）</span></span><br><span class="line"><span class="comment">             *      false: 消息将被重新排队并传递给同一使用者</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicRecover();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、ExceptionHandlingConsumer"><a href="#6-2、ExceptionHandlingConsumer" class="headerlink" title="6.2、ExceptionHandlingConsumer"></a>6.2、<code>ExceptionHandlingConsumer</code></h3><p><code>exceptionHandlingConsumer</code>：定时器，用于处理 由第三方物流系统异常引起的消费端消费失败 的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.GetResponse;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.Connection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 异常处理消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span>: 处理消费失败的消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/12 0012 17:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlingConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExceptionHandlingConsumer</span><span class="params">(CachingConnectionFactory cachingConnectionFactory)</span> </span>&#123;</span><br><span class="line">        Connection connection = cachingConnectionFactory.createConnection();</span><br><span class="line">        <span class="keyword">this</span>.channel = connection.createChannel(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时器判断第三方物流系统是否正常</span></span><br><span class="line"><span class="comment">     * 若正常，则从死信队列拿到消息进行消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionHandlingConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 判断第三方系统是否正常了。</span></span><br><span class="line">        <span class="keyword">if</span> (!listener()) &#123;</span><br><span class="line">            log.warn(<span class="string">"【exceptionHandlingConsumer 监听第三方物流系统】 - [监听时间] - [&#123;&#125;] 第三方系统异常，重试"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 主动取队列去消息，并获得 GetResponse</span></span><br><span class="line">        GetResponse getResponse = channel.basicGet(RabbitMQConfig.EXCEPTION_HANDLING_QUEUE_NAME, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Optional.ofNullable(getResponse).isPresent()) &#123;</span><br><span class="line">            log.info(<span class="string">"【exceptionHandlingConsumer 监听队列 &#123;&#125;】 - [监听时间] - [&#123;&#125;] 暂无消息"</span>,</span><br><span class="line">                    RabbitMQConfig.EXCEPTION_HANDLING_QUEUE_NAME, LocalDateTime.now());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得消息</span></span><br><span class="line">            User user = RabbitMQUtil.parseObject(getResponse, User.class);</span><br><span class="line">            log.info(<span class="string">"【exceptionHandlingConsumer 监听到消息】 - [操作时间] - [&#123;&#125;] -[&#123;&#125;]"</span>, LocalDateTime.now(), user);</span><br><span class="line">            <span class="comment">// 模拟业务异常</span></span><br><span class="line"><span class="comment">//            int i = 1/0;</span></span><br><span class="line">            <span class="comment">// 模拟 Ack 失败</span></span><br><span class="line">            <span class="comment">/*int number = random.nextInt(100);</span></span><br><span class="line"><span class="comment">            if (number % 2 == 0) &#123;</span></span><br><span class="line"><span class="comment">                throw new IOException("Ack失败");</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            channel.basicAck(getResponse.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"【exceptionHandlingConsumer Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 消息将被重新排队</span></span><br><span class="line">            channel.basicRecover();</span><br><span class="line">            <span class="comment">// 抛出异常，让消费端事务回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"【exceptionHandlingConsumer 消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="comment">// 业务出现异常，保存到数据库后并手动 ack</span></span><br><span class="line">            channel.basicAck(getResponse.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 抛出异常，让消费端事务回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟监听第三方是否正常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">listener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、controller"><a href="#7、controller" class="headerlink" title="7、controller"></a>7、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/12 0012 8:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User()</span><br><span class="line">                .setUsername(<span class="string">"fatal"</span>)</span><br><span class="line">                .setPassword(<span class="string">"123456"</span>)</span><br><span class="line">                .setBirthday(<span class="keyword">new</span> Date())</span><br><span class="line">                .setId(<span class="number">1L</span>);</span><br><span class="line">        log.info(<span class="string">"[Task 发送时间] - [&#123;&#125;]"</span>, LocalDateTime.now());</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.TASK_EXCHANGE, RabbitMQConfig.TASK_ROUTING_KEY, user, message -&gt; &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 将发送的消息设置为持久化</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Application"><a href="#8、Application" class="headerlink" title="8、Application"></a>8、Application</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启定时任务</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter195Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter195Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、测试"><a href="#9、测试" class="headerlink" title="9、测试"></a>9、测试</h2><p>启动项目</p><p>访问 <a href="http://localhost:8080/task" target="_blank" rel="noopener">http://localhost:8080/task</a></p><h3 id="TaskConsumer-Ack-成功"><a href="#TaskConsumer-Ack-成功" class="headerlink" title="TaskConsumer Ack 成功"></a><code>TaskConsumer</code> Ack 成功</h3><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1563515422790.png" alt="1563515422790"></p><h3 id="TaskConsumer-Ack-失败，Nack-成功"><a href="#TaskConsumer-Ack-失败，Nack-成功" class="headerlink" title="TaskConsumer Ack 失败，Nack 成功"></a><code>TaskConsumer</code> Ack 失败，Nack 成功</h3><p>消息在死信队列中消费了</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1563515512291.png" alt="1563515512291"></p><h3 id="TaskConsumer-Ack-成功，Nack-失败"><a href="#TaskConsumer-Ack-成功，Nack-失败" class="headerlink" title="TaskConsumer Ack 成功，Nack 失败"></a><code>TaskConsumer</code> Ack 成功，Nack 失败</h3><p>消息被压回队列重新消费</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1563515265014.png" alt="1563515265014"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>Broker：</strong>简单来说就是消息队列服务器实体<br><strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列<br><strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列<br><strong>Binding：</strong>绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来，在绑定的时候一定会指定一个绑定键“<code>Binding Key</code>”<br><strong>Routing Key：</strong>路由关键字，<code>exchange</code>根据这个关键字进行消息投递<br><strong>vhost：</strong>虚拟主机，一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离<br><strong>producer：</strong>消息生产者，就是投递消息的程序<br><strong>consumer：</strong>消息消费者，就是接受消息的程序<br><strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>@Payload：指定被修饰的参数来接收消息的 body</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="basicNack"><a href="#basicNack" class="headerlink" title="basicNack"></a><code>basicNack</code></h4><ul><li><code>deliveryTag</code>：指定队列要拒绝的已接收消息的标签（也叫传递标签）。新的队列默认的传递标签为0，代表接收过0条消息；队列接收消息后，传递标签会从0开始累加。（传递标签de值也可以看成该队列接收的第n条消息）</li><li><code>multiple</code>：<ul><li>true：用于拒绝提供的传递标签之前（包括提供的传递标签）指向的所有消息</li><li>false：仅拒绝提供的传递标签指向的那条消息</li></ul></li><li><code>requeue</code>：<ul><li>true：拒绝的消息重新排队</li><li>false：判断该队列是否有绑定死信交换机，没有则丢弃；有则转移到死信交换机做后续处理</li></ul></li></ul><h4 id="basicReject"><a href="#basicReject" class="headerlink" title="basicReject"></a><code>basicReject</code></h4><ul><li><code>deliveryTag</code>：同上</li><li><code>requeue</code>：同上</li></ul><h4 id="basicRecover"><a href="#basicRecover" class="headerlink" title="basicRecover"></a><code>basicRecover</code></h4><ul><li><code>requeue</code>：<ul><li>true：消息将被重新排队并可能传递给其他使用者（默认）</li><li>false：消息将被重新排队并传递给同一使用者</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s/hPxnaw6qwLB8OSPFeyPQ2w" target="_blank" rel="noopener">【真实生产案例】消息中间件如何处理消费失败的消息？</a></p><p><a href="https://blog.battcn.com/2018/05/23/springboot/v2-queue-rabbitmq-delay/" target="_blank" rel="noopener">一起来学SpringBoot | 第十三篇：RabbitMQ延迟队列</a></p><p>RabbitMQ 实战指南</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_5" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_5</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习 唐亚峰  前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>  前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十九篇：整合RabbitMQ（延迟队列）</title>
      <link href="/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_4%EF%BC%88%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%EF%BC%89/"/>
      <url>/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_4%EF%BC%88%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>​        本篇文章写 <strong><code>RabbitMQ</code></strong> 一个强大的功能 <strong>延迟队列</strong>。 在<code>AMQP</code>协议中，或者 <code>RabbitMQ</code> 本身没有直接支持延迟队列的功能，    但是它可以通过<code>过期时间（TTL）</code>和<code>死信交换机（DLX）</code>模拟出延迟队列的功能。</p><p>[TOC]</p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>​        <code>延迟队列</code>存储的对象是对应的延迟消息。所谓“延迟消息”是指当消息被发送以后，并不想让消费者立刻拿到消息，而是在等待指定的时间后，消费者才能拿到这个消息进行消费。</p><p>延迟队列能做什么？</p><ul><li><strong>订单业务：</strong> 在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li><li><strong>短信通知：</strong> 下单成功后 60s 之后给用户发送短信通知。</li><li><strong>失败重试：</strong> 业务操作失败后，间隔一定的时间进行失败重试。</li></ul><p>​        这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮询数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用<strong>Java中的<code>DelayQueue</code> 位于<code>java.util.concurrent</code>包下，本质是由<code>PriorityQueue</code>和<code>BlockingQueue</code>实现的阻塞优先级队列。</strong>这玩意最大的问题就是<strong>不支持分布式与持久化</strong>。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562890837061.png" alt="1562890837061"></p><h2 id="Time-To-Live-Extensions"><a href="#Time-To-Live-Extensions" class="headerlink" title="Time-To-Live Extensions"></a>Time-To-Live Extensions</h2><p>​        <strong>RabbitMQ支持为队列或者消息设置TTL（time to live 存活时间）</strong>。TTL表明了一条消息可在队列中存活的最大时间。当某条消息被设置了TTL或者当某条消息进入了设置了TTL的队列时，这条消息会在TTL时间后<strong>死亡成为Dead Letter</strong>。==如果既配置了消息的TTL，又配置了队列的TTL，那么较小的那个值会被取用==（一般情况下只需要设置其中一个就行了）。</p><h2 id="Dead-Letter-Exchange"><a href="#Dead-Letter-Exchange" class="headerlink" title="Dead Letter Exchange"></a>Dead Letter Exchange</h2><p>​        <strong>死信交换机</strong>，上文中提到设置了 TTL 的消息或队列最终会成为<code>Dead Letter</code>。如果为队列设置了<code>Dead Letter Exchange（DLX）</code>，那么这些<code>Dead Letter</code>就会被重新发送到<code>Dead Letter Exchange</code>中，然后通过<code>Dead Letter Exchange</code>路由到其他队列，即可实现延迟队列的功能。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-amqp： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span>    <span class="comment"># 默认为`localhost`</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>  <span class="comment"># 默认为 5672</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 手动ACK，不开启自动ACK，目的是为了防止报错后未正确处理消息丢失，默认为`none`，不 ACK</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><h2 id="3、config"><a href="#3、config" class="headerlink" title="3、config"></a>3、config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/23 0023 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟相关名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_QUEUE_NAME = <span class="string">"delay_queue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_EXCHANGE_NAME = <span class="string">"delay_exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_ROUTING_KEY = <span class="string">"delay_book"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信相关名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_QUEUE_NAME = <span class="string">"dead_letter_queue"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_EXCHANGE_NAME = <span class="string">"dead_letter_exchange"</span>;</span><br><span class="line">    <span class="comment">// 一般使用原队列的路由键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_LETTER_ROUTING_KEY = <span class="string">"delay_book"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列中用来关联`死信交换机`的交换机键名，路由键键名和存活时间键名（这是参数值是`固定`的）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DEAD_LETTER_EXCHANGE = <span class="string">"x-dead-letter-exchange"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_DEAD_LETTER_ROUTING_KEY = <span class="string">"x-dead-letter-routing-key"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_MESSAGE_TTL = <span class="string">"x-message-ttl"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **************************   死信交换机相关配置   **************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">dlxQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_LETTER_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DLX（死信交换机）：dead letter发送到的exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 本质上是一个普通的交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">dlxExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DEAD_LETTER_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 将`死信队列`、`死信交换机（DLX）`、`DEAD_LETTER_ROUTING_KEY`路由键 三者绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">dlxBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(dlxQueue())</span><br><span class="line">                .to(dlxExchange())</span><br><span class="line">                .with(DEAD_LETTER_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************   死信交换机相关配置(end)   ************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// **************************   延迟交换机相关配置   **************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 与`死信交换机`绑定，并指定`死信`携带的路由键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; configs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// `x-dead-letter-exchange` 关联`DLX（死信交换机）`</span></span><br><span class="line">        configs.put(X_DEAD_LETTER_EXCHANGE, DEAD_LETTER_EXCHANGE_NAME);</span><br><span class="line">        <span class="comment">// `x-dead-letter-routing-key` 声明了死信在转发时携带的 routing-key。</span></span><br><span class="line">        configs.put(X_DEAD_LETTER_ROUTING_KEY, DEAD_LETTER_ROUTING_KEY);</span><br><span class="line">        <span class="comment">// `x-message-ttl`设置该队列中消息的存活时间（队列属性设置，队列中所有消息都有相同的过期时间）</span></span><br><span class="line"><span class="comment">//        configs.put(X_MESSAGE_TTL, 5 * 1000);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> durable 声明持久化队列，则为true。（该队列在服务器重启之后继续存在）</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> exclusive 如果声明独占队列，则该队列将仅由声明者的连接使用</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> autoDelete 如果服务器不存在的时候应该将队列删除，则为true</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> arguments 用于声明队列的参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAY_QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, configs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DELAY_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span>: 将`延迟队列`、`延迟交换机`、`DELAY_ROUTING_KEY`路由键 三者绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayQueue())</span><br><span class="line">                .to(delayExchange())</span><br><span class="line">                .with(DELAY_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************   延迟交换机相关配置(end)   ************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、entity"><a href="#4、entity" class="headerlink" title="4、entity"></a>4、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/23 0023 12:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、consumer"><a href="#5、consumer" class="headerlink" title="5、consumer"></a>5、consumer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/23 0023 14:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = RabbitMQConfig.DEAD_LETTER_QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerDelayQueue</span><span class="params">(Book book, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[listenerDelayQueue 监听的消息] - [监听时间] - [&#123;&#125;] - [&#123;&#125;]"</span>, LocalDateTime.now(), book);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、controller"><a href="#6、controller" class="headerlink" title="6、controller"></a>6、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Book;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/23 0023 12:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用构造方法注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookController</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book(<span class="number">1L</span>, <span class="string">"六月与便士"</span>);</span><br><span class="line">        <span class="comment">// 添加延迟队列</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE_NAME,</span><br><span class="line">                RabbitMQConfig.DELAY_ROUTING_KEY, book, message -&gt; &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@desc</span>: 对消息本身进行单独设置，每条消息的TTL可以不同。</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@careful</span>: 如果你在`延迟队列`中配置了params.put("x-message-ttl", 5 * 1000);那么下面</span></span><br><span class="line"><span class="comment">                     *  这句就可以省略，二选一即可</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    message.getMessageProperties().setExpiration(String.valueOf(<span class="number">5</span> * <span class="number">1000</span>));</span><br><span class="line">                    <span class="keyword">return</span> message;</span><br><span class="line">                &#125;);</span><br><span class="line">        log.info(<span class="string">"[发送时间] - [&#123;&#125;]"</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、显示"><a href="#7、显示" class="headerlink" title="7、显示"></a>7、显示</h2><p>访问 <a href="http://localhost:8080/books" target="_blank" rel="noopener">http://localhost:8080/books</a></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562891211968.png" alt="1562891211968"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>Broker：</strong>简单来说就是消息队列服务器实体<br><strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列<br><strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列<br><strong>Binding：</strong>绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来，在绑定的时候一定会指定一个绑定键“<code>Binding Key</code>”<br><strong>Routing Key：</strong>路由关键字，<code>exchange</code>根据这个关键字进行消息投递<br><strong>vhost：</strong>虚拟主机，一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离<br><strong>producer：</strong>消息生产者，就是投递消息的程序<br><strong>consumer：</strong>消息消费者，就是接受消息的程序<br><strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/qq315737546/article/details/54176560#commentBox" target="_blank" rel="noopener">RabbitMQ(四)消息确认(发送确认,接收确认)</a></p><p><a href="https://blog.battcn.com/2018/05/23/springboot/v2-queue-rabbitmq-delay/" target="_blank" rel="noopener">一起来学SpringBoot | 第十三篇：RabbitMQ延迟队列</a></p><p>RabbitMQ 实战指南</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_4" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_4</a></p><h4 id="学习-唐亚峰-、北京-小北-前辈的经验"><a href="#学习-唐亚峰-、北京-小北-前辈的经验" class="headerlink" title="学习 唐亚峰 、北京-小北 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> 、<a href="https://me.csdn.net/qq315737546" target="_blank" rel="noopener">北京-小北</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十九篇：整合RabbitMQ（生产者确认）</title>
      <link href="/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_3%EF%BC%88%E7%94%9F%E4%BA%A7%E8%80%85%E7%A1%AE%E8%AE%A4%EF%BC%89/"/>
      <url>/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_3%EF%BC%88%E7%94%9F%E4%BA%A7%E8%80%85%E7%A1%AE%E8%AE%A4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>SpringBoot</strong> 集成 <strong>RabbitMQ</strong> 非常简单，如果只是简单的使用配置非常少，<strong>SpringBoot</strong> 提供了 <strong>spring-boot-starter-amqp</strong> 项目对消息各种支持。</p><p>[TOC]</p><h2 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h2><p>​        <strong>AMQP</strong>，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<strong>AMQP</strong> 的主要特征是 <em>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</em>。</p><p>​        <strong>RabbitMQ</strong> 是实现 <strong>AMQP</strong>（<strong>高级消息队列协议</strong>）的消息中间件的一种，最初起源于<strong>金融系统</strong>，用于在分布式系统中存储转发消息，在 <em><code>易用性、扩展性、高可用性</code></em> 等方面表现不俗。<strong>RabbitMQ</strong> 服务器端用 <strong>Erlang 语言</strong> 编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。支持<code>延迟队列（这是一个非常有用的功能）</code>….</p><h2 id="生产者确认"><a href="#生产者确认" class="headerlink" title="生产者确认"></a>生产者确认</h2><p>​        当消息的生产者将消息发送出去之后，消息到底有没有正确的到达服务器呢？如果不进行特殊配置，默认情况下发送消息这个操作是不会返回任何信息给生产者的，也就是默认情况下生产者不知道消息有没有正确地到达服务器。</p><p>RabbitMQ 针对这个问题，提供了两种解决方案：</p><ul><li>通过事务机制实现；</li><li>通过发送方确认机制实现。</li></ul><h3 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h3><p>​       <code>RabbitMQ</code> 客户端提供了与事务机制的三个方法：channel.txSelect()、channel.txCommit() 和 channel.txRollback()。 <code>事务机制</code> 跟数据库事务<strong><code>不一样</code></strong>，这种事务是为了保证消息被<code>RabbitMQ</code>接收，如果事务提交成功，那么消息一定被<code>RabbitMQ</code>接收。提交之前如果报错，我们便可以将它捕获，进而通过执行 channel.txRollback() 方法来实现当前 channel 事务的回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    channel.txSelect();</span><br><span class="line">    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    channel.txCommit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    channel.txRollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>严重降低了 <code>RabbitMQ</code> 的消息吞吐量。</p><h3 id="发送方确认机制"><a href="#发送方确认机制" class="headerlink" title="发送方确认机制"></a>发送方确认机制</h3><p>​        <code>RabbitMQ</code>的事务机制在性能上得不到保证，所以引入了一种轻量级的方式 —— 发送方确认（publisher confirm）机制。该机制可以弥补<code>事务机制</code>的缺陷，提高了整体的吞吐量。使用 SrpingBoot 整合 RabbitMQ，如何实现发送方确认机制呢？</p><ol><li><strong>application.yml</strong> 文件需要启用 <code>publisher-confirms</code>、<code>publisher-returns</code></li><li>在 <code>RabbitMQ</code> 配置类中，自定义 <code>RabbitTempalte</code>，设置<code>setMandatory(true)</code>，否则消息路由失败不会回调 ReturnCallback；通过调用 <code>setConfirmCallback()</code>、<code>setReturnCallback()</code>传入它们的实现。</li></ol><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-amqp： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RabbitMQ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span>    <span class="comment"># 默认为`localhost`</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>  <span class="comment"># 默认为 5672</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 手动ACK，不开启自动ACK，目的是为了防止报错后未正确处理消息丢失，默认为`none`，不 ACK</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">    <span class="comment"># 启用发布服务器确认</span></span><br><span class="line"><span class="attr">    publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 启动发布服务器返回</span></span><br><span class="line"><span class="attr">    publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3、config"><a href="#3、config" class="headerlink" title="3、config"></a>3、config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/20 0020 9:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_QUEUE = <span class="string">"confirm_queue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_EXCHANGE = <span class="string">"confirm_exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"book"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 日志模板 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String EXIST = <span class="string">"RabbitMQ Block 的 Exchange(&#123;&#125;)接收到消息"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String NOT_EXIST = <span class="string">"RabbitMQ Block 不存在此交换机 (&#123;&#125;)"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义 RabbitTemplate，CachingConnectionFactory 是必须的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">        rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置 mandatory 为 true，否则消息路由失败不会回调 ReturnCallback</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置确认回调函数</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt;</span><br><span class="line">                log.info((ack ? EXIST : NOT_EXIST) + <span class="string">"：time(&#123;&#125;), ack(&#123;&#125;),cause(&#123;&#125;)"</span>,</span><br><span class="line">                        correlationData.getId(), LocalDateTime.now(), ack, cause));</span><br><span class="line">        <span class="comment">// 设置返回回调函数</span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt;</span><br><span class="line">                log.info(<span class="string">"消息路由失败：time(&#123;&#125;),message(&#123;&#125;), replyCode(&#123;&#125;), replyText(&#123;&#125;), exchange(&#123;&#125;), routingKey(&#123;&#125;)"</span>,</span><br><span class="line">                        LocalDateTime.now(), message, replyCode, replyText, exchange, routingKey));</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmBookQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(CONFIRM_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">confirmExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(CONFIRM_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, DirectExchange confirmExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue)</span><br><span class="line">                .to(confirmExchange)</span><br><span class="line">                .with(ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、entity"><a href="#4、entity" class="headerlink" title="4、entity"></a>4、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/20 0020 9:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>因为要通过<code>网络传输</code>发送给 RabbitMQ 服务器，所以需要实现<code>序列化</code></p><h2 id="5、receiver"><a href="#5、receiver" class="headerlink" title="5、receiver"></a>5、receiver</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 消费者</span></span><br><span class="line"><span class="comment"> * 同时监听两个队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/20 0020 10:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;RabbitMQConfig.CONFIRM_QUEUE&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenerReceiver</span><span class="params">(Book book, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【listenerReceiver 监听的消息】 - [监听时间] - [&#123;&#125;] - [&#123;&#125;]"</span>, LocalDateTime.now(), book);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、controller"><a href="#6、controller" class="headerlink" title="6、controller"></a>6、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Book;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.support.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/20 0020 9:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调的相关数据（我拿来放交换机名称用了。。。）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CorrelationData correlationData = <span class="keyword">new</span> CorrelationData();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookController</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">        correlationData.setId(RabbitMQConfig.CONFIRM_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String NO = <span class="string">"no"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机和路由键都正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book().setId(<span class="string">"1"</span>).setName(<span class="string">"米彩"</span>);</span><br><span class="line">        log.info(<span class="string">"[发送时间] - [&#123;&#125;]"</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 发送到confirmExchange交换机</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.CONFIRM_EXCHANGE, RabbitMQConfig.ROUTING_KEY, book, correlationData);</span><br><span class="line">        <span class="comment">// 发送到默认交换机（默认交换机隐式的绑定到每个队列，路由键等于队列的名称）</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.CONFIRM_QUEUE, book, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机正确，路由键错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book().setId(<span class="string">"1"</span>).setName(<span class="string">"米彩"</span>);</span><br><span class="line">        log.info(<span class="string">"[发送时间] - [&#123;&#125;]"</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(RabbitMQConfig.CONFIRM_EXCHANGE,RabbitMQConfig.ROUTING_KEY + NO, book, correlationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机错误（不管路由键是否正确）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book().setId(<span class="string">"1"</span>).setName(<span class="string">"米彩"</span>);</span><br><span class="line">        log.info(<span class="string">"[发送时间] - [&#123;&#125;]"</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(RabbitMQConfig.CONFIRM_EXCHANGE + NO, RabbitMQConfig.ROUTING_KEY, book, correlationData);</span><br><span class="line"><span class="comment">//        this.rabbitTemplate.convertAndSend(RabbitMQConfig.CONFIRM_EXCHANGE + NO, RabbitMQConfig.ROUTING_KEY + NO, book, correlationData);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、显示"><a href="#7、显示" class="headerlink" title="7、显示"></a>7、显示</h2><p>启动项目</p><h3 id="7-1、交换机和路由键都正确"><a href="#7-1、交换机和路由键都正确" class="headerlink" title="7.1、交换机和路由键都正确"></a>7.1、交换机和路由键都正确</h3><p>访问 <a href="http://localhost:8080/books/1" target="_blank" rel="noopener">http://localhost:8080/books/1</a></p><p>控制台如下：</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562928687568.png" alt="1562928687568"></p><p>你可以在<code>BookReceiver</code>的31行打个断点。再次访问，然后去看 <code>RabbitMQ</code>客户端</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562823185092.png" alt="1562823185092"></p><p>你会发现，这个队列确实接收到两条消息，其中一条是通过<code>默认交换机</code>接收的。</p><p><strong>析：</strong>消息正确地到达了交换机，触发了 <code>ConfirmRollback</code>，ack 为 <code>true</code>；路由键正确所以路由成功，不触发 <code>ReturnRollback</code>。</p><h3 id="7-2、交换机正确、路由键错误"><a href="#7-2、交换机正确、路由键错误" class="headerlink" title="7.2、交换机正确、路由键错误"></a>7.2、交换机正确、路由键错误</h3><p>访问 <a href="http://localhost:8080/books/2" target="_blank" rel="noopener">http://localhost:8080/books/2</a></p><p>控制台如下：</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562823493590.png" alt="1562823493590"></p><p><strong>析：</strong>消息正确地到达了交换机，触发了 <code>ConfirmRollback</code>，ack 为 <code>true</code>；路由键错误所以路由失败，触发了 <code>ReturnRollback</code>。</p><h3 id="7-3、交换机错误（不管路由键是否正确）"><a href="#7-3、交换机错误（不管路由键是否正确）" class="headerlink" title="7.3、交换机错误（不管路由键是否正确）"></a>7.3、交换机错误（不管路由键是否正确）</h3><p>访问 <a href="http://localhost:8080/books/3" target="_blank" rel="noopener">http://localhost:8080/books/3</a></p><p>控制台如下：</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562825937096.png" alt="1562825937096"></p><p><strong>析：</strong>消息正确地没有到达了交换机，触发了 <code>ConfirmRollback</code> ，ack 为 <code>false</code>；交换机都错了，所以没有路由操作，自然也不存在路由失败与成功，所以 <code>ReturnRollbak</code> 不被触发。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>Broker：</strong>简单来说就是消息队列服务器实体<br><strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列<br><strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列<br><strong>Binding：</strong>绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来，在绑定的时候一定会指定一个绑定键“<code>Binding Key</code>”<br><strong>Routing Key：</strong>路由关键字，<code>exchange</code>根据这个关键字进行消息投递<br><strong>vhost：</strong>虚拟主机，一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离<br><strong>producer：</strong>消息生产者，就是投递消息的程序<br><strong>consumer：</strong>消息消费者，就是接受消息的程序<br><strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</p><h3 id="ConfirmRollback-和-ReturnRollback"><a href="#ConfirmRollback-和-ReturnRollback" class="headerlink" title="ConfirmRollback 和 ReturnRollback"></a>ConfirmRollback 和 ReturnRollback</h3><ul><li>消息到达 <code>exchange</code>，则 <code>ConfirmCallback</code> 回调，返回 true</li><li>消息没有到达 <code>exchange</code>，则 <code>ConfirmCallback</code> 回调，返回 <code>false</code></li><li>消息路由成功，则不回调 <code>ReturnCallback</code></li><li>消息路由失败，则回调 <code>ReturnCallback</code></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ityouknow.com/springboot/2016/11/30/spring-boot-rabbitMQ.html" target="_blank" rel="noopener">springboot(八)：RabbitMQ详解</a></p><p><a href="https://blog.battcn.com/2018/05/22/springboot/v2-queue-rabbitmq/" target="_blank" rel="noopener">一起来学SpringBoot | 第十二篇：初探RabbitMQ消息队列</a></p><p>RabbitMQ 实战指南</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_3" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_3</a></p><h4 id="学习-唐亚峰、纯洁的微笑-前辈的经验"><a href="#学习-唐亚峰、纯洁的微笑-前辈的经验" class="headerlink" title="学习 唐亚峰、纯洁的微笑 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十九篇：整合RabbitMQ（交换机类型 + 手动 ack）</title>
      <link href="/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_2%EF%BC%88%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B%20+%20%E6%89%8B%E5%8A%A8%20ack%EF%BC%89/"/>
      <url>/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_2%EF%BC%88%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%B1%BB%E5%9E%8B%20+%20%E6%89%8B%E5%8A%A8%20ack%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>SpringBoot</strong> 集成 <strong>RabbitMQ</strong> ，如果只是简单的使用配置非常少，<strong>SpringBoot</strong> 提供了 <strong>spring-boot-starter-amqp</strong> 项目对消息各种支持。上一篇基于默认消息交换机（direct），下面对三种常用的<strong>交换机（Direct、Topic、Fanout）</strong>进行演示</p><p>[TOC]</p><h2 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h2><p>​        <strong>AMQP</strong>，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<strong>AMQP</strong> 的主要特征是 <em>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</em>。</p><p>​        <strong>RabbitMQ</strong> 是实现 <strong>AMQP</strong>（<strong>高级消息队列协议</strong>）的消息中间件的一种，最初起源于<strong>金融系统</strong>，用于在分布式系统中存储转发消息，在 <em><code>易用性、扩展性、高可用性</code></em> 等方面表现不俗。<strong>RabbitMQ</strong> 服务器端用 <strong>Erlang 语言</strong> 编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。支持<code>延迟队列（这是一个非常有用的功能）</code>….</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-amqp： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RabbitMQ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span>    <span class="comment"># 默认为`localhost`</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>  <span class="comment"># 默认为 5672</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 手动ACK，不开启自动ACK，目的是为了防止报错后未正确处理消息丢失；默认为`none`，不 ack</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><p>##Direct</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.direct.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/6 0006 23:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_EXCHANGE = <span class="string">"direct_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECT_QUEUE = <span class="string">"direct_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"ynfatal"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单参构造器（默认持久化）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DIRECT_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单参构造器（默认持久化）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directBinding</span><span class="params">(@Qualifier(<span class="string">"directQueue"</span>)</span> Queue queue, DirectExchange directExchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue)</span><br><span class="line">                .to(directExchange)</span><br><span class="line">                .with(ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sender"><a href="#sender" class="headerlink" title="sender"></a>sender</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.direct.sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.direct.config.DirectRabbitConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/7 0007 0:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectSender</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String message = <span class="string">"测试 DirectExchange"</span>;</span><br><span class="line">        log.info(<span class="string">"【DirectSender发布消息】 -- [&#123;&#125;]"</span>, message);</span><br><span class="line">        rabbitTemplate.convertAndSend(DirectRabbitConfig.DIRECT_EXCHANGE,</span><br><span class="line">                DirectRabbitConfig.ROUTING_KEY, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.direct.receive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.direct.config.DirectRabbitConfig;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/7 0007 0:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;DirectRabbitConfig.DIRECT_QUEUE&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String messages, Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【DirectReceiver接收到消息】 -- [&#123;&#125;]"</span>, messages);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@method</span> void basicAck(long deliveryTag, boolean multiple) throws IOException</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@deliveryTag</span> 指定队列要确认的已接收消息的标签（也叫传递标签）。新的队列默认的传递标签为0，代表接收过0条消息；</span></span><br><span class="line"><span class="comment">             *      队列接收消息后，传递标签会从0开始累加。（传递标签de值也可以看成该队列接收的第n条消息）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@multiple</span> true: 用于确认提供的传递标签之前（包括提供的传递标签）指向的所有消息；</span></span><br><span class="line"><span class="comment">             *      false: 仅确认提供的传递标签指向的那条消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.direct.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.direct.sender.DirectSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/7 0007 0:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/direct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DirectSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectController</span><span class="params">(DirectSender sender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender = sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>访问 <a href="http://localhost:8080/direct" target="_blank" rel="noopener">http://localhost:8080/direct</a>方法</p><p>控制台如下</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562805836308.png" alt="1562805836308"></p><h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><p><strong>Fanout</strong> 就是我们熟悉的 <strong>广播模式或者发布/订阅模式</strong>，给 <strong>Fanout交换机</strong> 发送消息，绑定了这个交换机的所有队列都收到这个消息。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540200618305.png" alt="1540200618305"></p><h3 id="config-1"><a href="#config-1" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.fanout.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FanoutRabbit 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span>: A、B、C三个队列绑定到Fanout交换机上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 16:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutRabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE = <span class="string">"fanout_exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_A = <span class="string">"fanout.A"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_B = <span class="string">"fanout.B"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_C = <span class="string">"fanout.C"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_A);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Fanout交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBindingA</span><span class="params">(Queue queueA, FanoutExchange fanoutExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queueA)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBindingB</span><span class="params">(Queue queueB, FanoutExchange fanoutExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queueB)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBindingC</span><span class="params">(Queue queueC, FanoutExchange fanoutExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queueC)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sender-1"><a href="#sender-1" class="headerlink" title="sender"></a>sender</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.fanout.sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.fanout.config.FanoutRabbitConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FanoutSender</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String message = <span class="string">"测试FanoutExchange实现发布与订阅"</span>;</span><br><span class="line">        log.info(<span class="string">"【FanoutSender发布消息】 -- [&#123;&#125;]"</span>, message);</span><br><span class="line">        rabbitTemplate.convertAndSend(FanoutRabbitConfig.FANOUT_EXCHANGE, <span class="string">""</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-1"><a href="#receiver-1" class="headerlink" title="receiver"></a>receiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.fanout.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.fanout.config.FanoutRabbitConfig;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收者（订阅）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 17:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;FanoutRabbitConfig.FANOUT_A&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageA</span><span class="params">(String messages, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【FanoutReceiverA接收到消息】 -- [&#123;&#125;]"</span>, messages);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@method</span> void basicAck(long deliveryTag, boolean multiple) throws IOException</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@deliveryTag</span> 指定队列要确认的已接收消息的标签（也叫传递标签）。新的队列默认的传递标签为0，代表接收过0条消息；</span></span><br><span class="line"><span class="comment">             *      队列接收消息后，传递标签会从0开始累加。（传递标签de值也可以看成该队列接收的第n条消息）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@multiple</span> true: 用于确认提供的传递标签之前（包括提供的传递标签）指向的所有消息；</span></span><br><span class="line"><span class="comment">             *      false: 仅确认提供的传递标签指向的那条消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;FanoutRabbitConfig.FANOUT_B&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageB</span><span class="params">(String messages, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【FanoutReceiverB接收到消息】 -- [&#123;&#125;]"</span>, messages);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;FanoutRabbitConfig.FANOUT_C&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageC</span><span class="params">(String messages, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【FanoutReceiverC接收到消息】 -- [&#123;&#125;]"</span>, messages);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.fanout.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.fanout.sender.FanoutSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/6 0006 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fanout"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FanoutSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FanoutController</span><span class="params">(FanoutSender sender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender = sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h3><p>访问 <a href="http://localhost:8080/fanout" target="_blank" rel="noopener">http://localhost:8080/fanout</a> 方法</p><p>控制台如下</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562805963245.png" alt="1562805963245"></p><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p><strong>topic</strong> 是 <strong>RabbitMQ</strong> 中最灵活的一种方式，可以根据 <strong>routing_key</strong> 自由的绑定不同的队列</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540200631359.png" alt="1540200631359"></p><h3 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h3><p><strong>注意：</strong>因为要通过<code>网络传输</code>发送给 RabbitMQ 服务器，所以需要实现<code>序列化</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.topic.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="config-2"><a href="#config-2" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.topic.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicRabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE = <span class="string">"topic_exchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE = <span class="string">"topic_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BINDING_KEY = <span class="string">"fatal.#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Topic交换机 */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPIC_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  binding组件</span></span><br><span class="line"><span class="comment">     *  `<span class="doctag">@Qualifier</span>`: 当容器中出现同种类型的多个组件上，需要用`<span class="doctag">@Qualifier</span>`来指定使用哪个</span></span><br><span class="line"><span class="comment">     *  将队列与交换机进行绑定并设置其`路由`</span></span><br><span class="line"><span class="comment">     *  `fatal.#`:这里的`#`表示匹配所有的意思</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding</span><span class="params">(@Qualifier(<span class="string">"topicQueue"</span>)</span> Queue queue, TopicExchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(queue)</span><br><span class="line">                .to(exchange)</span><br><span class="line">                .with(BINDING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用这种方式也可以一个消费者同时订阅多个queue</span></span><br><span class="line"><span class="comment">     * 这种方式与在消费者中用<span class="doctag">@RabbitListener</span>、<span class="doctag">@RabbitListener</span>+<span class="doctag">@RabbitHandler</span>组合 两种指定队列的方式效果一致。</span></span><br><span class="line"><span class="comment">     * 注意：三种方式的消费者记得加 <span class="doctag">@Component</span>。因为它必须是个组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public SimpleMessageListenerContainer container(ConnectionFactory connectionFactory,</span></span><br><span class="line"><span class="comment">                                             MessageListenerAdapter listenerAdapter) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();</span></span><br><span class="line"><span class="comment">        container.setConnectionFactory(connectionFactory);</span></span><br><span class="line"><span class="comment">        container.setQueueNames(TopicRabbitMQConfig.TOPIC_QUEUE);</span></span><br><span class="line"><span class="comment">        container.setMessageListener(listenerAdapter);</span></span><br><span class="line"><span class="comment">        return container;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public MessageListenerAdapter listenerAdapter(TopicReceiver topicReceiver) &#123;</span></span><br><span class="line"><span class="comment">        // 对接收者`Receiver`进行封装，指定接收消息de方法为`receiveMessage`</span></span><br><span class="line"><span class="comment">        return new MessageListenerAdapter(topicReceiver, "receiveMessage");</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sender-2"><a href="#sender-2" class="headerlink" title="sender"></a>sender</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.topic.sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.topic.config.TopicRabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.topic.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopicSender</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"fatal"</span>, <span class="string">"123"</span>);</span><br><span class="line">        log.info(<span class="string">"【Sender发布的User信息】：[&#123;&#125;]"</span>, user);</span><br><span class="line">        rabbitTemplate.convertAndSend(TopicRabbitMQConfig.TOPIC_EXCHANGE, <span class="string">"fatal.user"</span> ,user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="receiver-2"><a href="#receiver-2" class="headerlink" title="receiver"></a>receiver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.topic.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.topic.config.TopicRabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.fatal.topic.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = TopicRabbitMQConfig.TOPIC_QUEUE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(User user, Message message, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"【接收的User信息】--[&#123;&#125;]"</span>, user);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@method</span> void basicAck(long deliveryTag, boolean multiple) throws IOException</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@deliveryTag</span> 指定队列要确认的已接收消息的标签（也叫传递标签）。新的队列默认的传递标签为0，代表接收过0条消息；</span></span><br><span class="line"><span class="comment">             *      队列接收消息后，传递标签会从0开始累加。（传递标签de值也可以看成该队列接收的第n条消息）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@multiple</span> true: 用于确认提供的传递标签之前（包括提供的传递标签）指向的所有消息；</span></span><br><span class="line"><span class="comment">             *      false: 仅确认提供的传递标签指向的那条消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Ack失败的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【Ack失败】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO 业务异常的后续处理</span></span><br><span class="line">            log.error(<span class="string">"【消费失败，业务异常】 time = &#123;&#125;"</span>, LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.topic.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.topic.sender.TopicSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/6 0006 8:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/topic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TopicSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TopicController</span><span class="params">(TopicSender sender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender = sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示-2"><a href="#显示-2" class="headerlink" title="显示"></a>显示</h3><p>访问 <a href="http://localhost:8080/topic" target="_blank" rel="noopener">http://localhost:8080/topic</a> 方法</p><p>控制台如下</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562806132416.png" alt="1562806132416"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>Broker：</strong>简单来说就是消息队列服务器实体<br><strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列<br><strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列<br><strong>Binding：</strong>绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来，在绑定的时候一定会指定一个绑定键“<code>Binding Key</code>”<br><strong>Routing Key：</strong>路由关键字，<code>exchange</code>根据这个关键字进行消息投递<br><strong>vhost：</strong>虚拟主机，一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离<br><strong>producer：</strong>消息生产者，就是投递消息的程序<br><strong>consumer：</strong>消息消费者，就是接受消息的程序<br><strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</p><h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h3><ol><li>邮箱发送：用户注册后投递消息到<code>rabbitmq</code>中，由消息的消费方异步的发送邮件，提升系统响应速度</li><li>流量削峰：一般在 <strong>秒杀活动</strong> 中应用广泛，秒杀会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。用于控制活动人数，将超过此一定阀值的订单直接丢弃。缓解短时间的高流量压垮应用。</li><li>订单超时：利用<code>rabbitmq</code>的 <strong>延迟队列</strong>，可以很简单的实现 <strong>订单超时</strong> 的功能，比如用户在下单后30分钟未支付取消订单</li><li>还有更多应用场景就不一一列举了…..</li></ol><h3 id="怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？"><a href="#怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？" class="headerlink" title="怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？"></a>怎么知道没有配置交换机的时候是使用<code>Direct</code>作为默认交换机呢？</h3><p>点开 <strong>RabbitTemplate</strong> 的源码来看一下</p><p>它这里定义了一个常量 <strong>DEFAULT_EXCHANGE</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540028823076.png" alt="1540028823076"></p><p>然后，当我们使用 <strong>RabbitTemplate</strong> 发布消息的时候，如果我们没有指定交换机，那么调用的方法类似下面的 <code>convertAndSend(String routingKey, final Object object)</code> ，可以看出，它帮我们指定了默认的交换机了。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540028970290.png" alt="1540028970290"></p><h3 id="配置监听器订阅内容de三种方式"><a href="#配置监听器订阅内容de三种方式" class="headerlink" title="配置监听器订阅内容de三种方式"></a>配置监听器订阅内容de三种方式</h3><p><strong>1、SimpleMessageListenerContainer + MessageListenerAdapter</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540197612577.png" alt="1540197612577"></p><p><strong>2、@RabbitListener</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540197641901.png" alt="1540197641901"></p><p><strong>3、@RabbitListener + @RabbitHandler</strong>（后面提及的序列化将会对此方法展开描述）</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540197674924.png" alt="1540197674924"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ityouknow.com/springboot/2016/11/30/spring-boot-rabbitMQ.html" target="_blank" rel="noopener">springboot(八)：RabbitMQ详解</a></p><p><a href="https://blog.battcn.com/2018/05/22/springboot/v2-queue-rabbitmq/" target="_blank" rel="noopener">一起来学SpringBoot | 第十二篇：初探RabbitMQ消息队列</a></p><p><a href="https://spring.io/guides/gs/messaging-rabbitmq/" target="_blank" rel="noopener">Messaging with RabbitMQ</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_2" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_2</a></p><h4 id="学习-唐亚峰、纯洁的微笑-前辈的经验"><a href="#学习-唐亚峰、纯洁的微笑-前辈的经验" class="headerlink" title="学习 唐亚峰、纯洁的微笑 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十九篇：整合RabbitMQ（简单入门）</title>
      <link href="/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_1%EF%BC%88%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%EF%BC%89/"/>
      <url>/2018/10/22/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88RabbitMQ_1%EF%BC%88%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>​</p><p align="right"><strong>—— 基于点对点（自动 Ack）</strong></p><br>​        <strong>SpringBoot</strong> 集成 <strong>RabbitMQ</strong>，如果只是简单的使用，配置非常少，<strong>SpringBoot</strong> 提供了 <strong>spring-boot-starter-amqp</strong> 项目对消息各种支持。本文以简单版（一个生产者和一个消费者）的形式入门，使用 <strong>默认</strong>的<strong>消息交换机</strong>（<strong>Direct Exchange</strong>）<p></p><p>[TOC]</p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>​        <code>消息队列中间件</code>指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。 <code>消息队列中间件</code> 也称为 <code>消息队列</code> 和 <code>消息中间件</code>。它一般有两种传递模式：<strong>点对点模式</strong> 和 <strong>发布/订阅模式</strong>。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562331552570.png" alt="1562331552570"></p><h2 id="消息中间件的作用"><a href="#消息中间件的作用" class="headerlink" title="消息中间件的作用"></a>消息中间件的作用</h2><ul><li><code>解耦</code>：消息中间件在处理过程中插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一层接口，这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束即可。</li><li><code>存储</code>：在某些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化处理直到它们已经被完全处理，通过这一方式规避了数据丢失的风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确指出该消息已经被处理完成，从而确保你的数据被安全的保存直到你使用完毕。</li><li><code>削峰</code>：在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以处理这类峰值为标准投入资源，无疑是巨大的浪费。使用消息中间件能够使用关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩溃。</li><li><code>可恢复性</code>：当系统的一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入消息中间件的消息仍然可以在系统恢复后进行处理。<br>顺序保证：在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</li><li><code>缓冲</code>：在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率的执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制和优化数据流经过系统的速度。</li><li><code>异步通性</code>：在很多时候应用不想也不需要立即处理消息。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但不立即处理它，在之后需要的时候再慢慢处理。</li></ul><h2 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h2><p>​        <strong>AMQP</strong>，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<strong>AMQP</strong> 的主要特征是 <em>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</em>。</p><p>​        <strong>RabbitMQ</strong> 是实现 <strong>AMQP</strong>（<strong>高级消息队列协议</strong>）的消息中间件的一种，最初起源于<strong>金融系统</strong>，用于在分布式系统中存储转发消息，在 <em><code>易用性、扩展性、高可用性</code></em> 等方面表现不俗。<strong>RabbitMQ</strong> 服务器端用 <strong>Erlang 语言</strong> 编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。支持<code>延迟队列（这是一个非常有用的功能）</code>….</p><blockquote><p>JMS 是指一套规范，它是有 Sun 公司提出来的，实际就是指 JMS API，旨在为 java 应用提供一套统一的 API（类似 JPA 吧）。AMQP 则是一种协议，RabbitMQ 则是基于这种协议产生的消息中间件。RabbitMQ 还能作为 JMS 的实现，因为它支持 JMS 这种客户端（类似 Spring Cache，可以有很多实现，其中之一就是 Spring Data Redis，前面的整合笔记用过呢）。</p></blockquote><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.6.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-amqp： <strong>2.0.6.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RabbitMQ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span>    <span class="comment"># 默认为`guest`</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span>    <span class="comment"># 默认为`localhost`</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span>  <span class="comment"># 默认为 5672</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 开启自动ACK，默认为`none`（no ack）</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h2 id="3、config"><a href="#3、config" class="headerlink" title="3、config"></a>3、config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"fatal"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个队列`QUEUE_NAME`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          在 RabbitMQ 服务器上创建一个 `QUEUE_NAME` 队列</span></span><br><span class="line"><span class="comment">          由于没有指定交换机，所以会与`RabbitMQ 服务器`的默认交换机(AMQP default)绑定，</span></span><br><span class="line"><span class="comment">          路由键为该队列的名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、sender"><a href="#4、sender" class="headerlink" title="4、sender"></a>4、sender</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 10:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FatalSender</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">"现在时刻"</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        log.info(<span class="string">"【FatalSender】发布de消息：[&#123;&#125;]"</span>, context);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.QUEUE_NAME, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、receiver"><a href="#5、receiver" class="headerlink" title="5、receiver"></a>5、receiver</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/22 0022 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = RabbitMQConfig.QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【FatalReceiver】处理了：[&#123;&#125;]"</span>, context);</span><br><span class="line">        <span class="comment">// 模拟消费者业务异常，观察自动 ack 的弊端。</span></span><br><span class="line">        <span class="comment">// 当消费者出现异常导致消费失败，这会导致消费者循环消费。</span></span><br><span class="line">        <span class="comment">// int i = 1/0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、controller"><a href="#6、controller" class="headerlink" title="6、controller"></a>6、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.sender.FatalSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/7/5 0005 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/send"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FatalSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SenderController</span><span class="params">(FatalSender sender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender = sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h2><h3 id="7-1、测试抛正常的-autoAck"><a href="#7-1、测试抛正常的-autoAck" class="headerlink" title="7.1、测试抛正常的 autoAck"></a>7.1、测试抛正常的 <code>autoAck</code></h3><p>注掉<code>FatalReceiver</code>类 22 行的<code>int i = 1/0;</code>的注释，然后运行项目</p><p>访问<a href="http://localhost:8080/send" target="_blank" rel="noopener">http://localhost:8080/send</a></p><p><strong>RabbitMQ 客户端：</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562325193396.png" alt="1562325158518"></p><p><strong>控制台：</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562325158518.png" alt="1562325158518"></p><h3 id="7-2、测试抛异常的-autoAck"><a href="#7-2、测试抛异常的-autoAck" class="headerlink" title="7.2、测试抛异常的 autoAck"></a>7.2、测试抛异常的 <code>autoAck</code></h3><p>打开<code>FatalReceiver</code>类 22 行的<code>int i = 1/0;</code>，然后运行项目</p><p>访问<a href="http://localhost:8080/send" target="_blank" rel="noopener">http://localhost:8080/send</a></p><p>你会发现循环异常，这时候终止程序。。。</p><p><strong>RabbitMQ 客户端：</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562325449677.png" alt="1562325449677"></p><p><strong>控制台：</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562330795400.png" alt="1562330795400"></p><p>这是简单的入门，使用<strong>自动 Ack</strong> 的方式。当然咯，缺陷如 <strong>7.2</strong> 的测试结果一样，所以不推荐使用 <strong>自动 Ack</strong></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>通常我们谈到队列服务, 会有三个概念： 发消息者、队列、收消息者，RabbitMQ 在这个基本概念之上, 多做了一层抽象, 在发消息者和 队列之间, 加入了交换器 (Exchange). 这样发消息者和队列就没有直接联系, 转而变成发消息者把消息给交换器, 交换器根据调度策略再把消息再给队列。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1558714445588.png" alt="1558714445588"></p><ul><li>左侧 P 代表 生产者，也就是往 RabbitMQ 发消息的程序。</li><li>中间即是 RabbitMQ Broker，<em>其中包括了 交换机 和 队列。</em></li><li>右侧 C 代表 消费者，也就是往 RabbitMQ 拿消息的程序。</li></ul><p><strong>Broker：</strong>简单来说就是消息队列服务器实体<br><strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列<br><strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列<br><strong>Binding：</strong>绑定，它的作用就是把<code>exchange</code>和<code>queue</code>按照路由规则绑定起来，在绑定的时候一定会指定一个绑定键“<code>Binding Key</code>”<br><strong>Routing Key：</strong>路由关键字，<code>exchange</code>根据这个关键字进行消息投递<br><strong>vhost：</strong>虚拟主机，一个<code>broker</code>里可以开设多个<code>vhost</code>，用作不同用户的权限分离<br><strong>producer：</strong>消息生产者，就是投递消息的程序<br><strong>consumer：</strong>消息消费者，就是接受消息的程序<br><strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个<code>channel</code>，每个<code>channel</code>代表一个会话任务</p><h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h3><ol><li>邮箱发送：用户注册后投递消息到<code>rabbitmq</code>中，由消息的消费方异步的发送邮件，提升系统响应速度</li><li>流量削峰：一般在 <strong>秒杀活动</strong> 中应用广泛，秒杀会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。用于控制活动人数，将超过此一定阀值的订单直接丢弃。缓解短时间的高流量压垮应用。</li><li>订单超时：利用<code>rabbitmq</code>的 <strong>延迟队列</strong>，可以很简单的实现 <strong>订单超时</strong> 的功能，比如用户在下单后30分钟未支付取消订单</li><li>还有更多应用场景就不一一列举了…..</li></ol><h3 id="怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？"><a href="#怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？" class="headerlink" title="怎么知道没有配置交换机的时候是使用Direct作为默认交换机呢？"></a>怎么知道没有配置交换机的时候是使用<code>Direct</code>作为默认交换机呢？</h3><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540200585317.png" alt="1540200585317"></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>点开 <strong>RabbitTemplate</strong> 的源码来看一下</p><p>它这里定义了一个常量 <strong>DEFAULT_EXCHANGE</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540028823076.png" alt="1540028823076"></p><p>然后，当我们使用 <strong>RabbitTemplate</strong> 发布消息的时候，如果我们没有指定交换机，那么调用的方法类似下面的 <code>convertAndSend(String routingKey, final Object object)</code> ，可以看出，它帮我们指定了默认的交换机了。</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1540028970290.png" alt="1540028970290"></p><h4 id="RabbitMQ-客户端"><a href="#RabbitMQ-客户端" class="headerlink" title="RabbitMQ 客户端"></a>RabbitMQ 客户端</h4><p>RabbitMQ 已经帮我们初始化了一些交换机，其中就包括<code>默认交换机</code></p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562373829677.png" alt="1562373829677"></p><p>点进去查看它的 Bindings，你可以看到一串描述</p><p><img src="/images/SpringBoot2/SpringBoot整合RabbitMQ/1562373897956.png" alt="1562373897956"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The <span class="keyword">default</span> exchange is implicitly bound to every queue, with a routing key equal to the queue name. It is not possible to explicitly bind to, or unbind from the <span class="keyword">default</span> exchange. It also cannot be deleted.</span><br><span class="line">翻译为：</span><br><span class="line">默认交换机隐式的绑定到每个队列，路由键等于队列的名称。不能显示绑定到默认交换机，或者从默认交换机中解绑，也不能删除。</span><br><span class="line">发送到默认交换机的方式</span><br><span class="line">rabbitTemplate.convertAndSend(队列名称(路由键), 数据);</span><br><span class="line">第三篇会做个 Direct 交换机，然后用上面的方式，发送消息到默认交换机。也就是说，参数指定了交换机，那么就发送到该交换机，没有指定交换机的话那么路由键必须用队列名，就会默认发送到默认交换机</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ityouknow.com/springboot/2016/11/30/spring-boot-rabbitMQ.html" target="_blank" rel="noopener">springboot(八)：RabbitMQ详解</a></p><p><a href="https://blog.battcn.com/2018/05/22/springboot/v2-queue-rabbitmq/" target="_blank" rel="noopener">一起来学SpringBoot | 第十二篇：初探RabbitMQ消息队列</a></p><p>RabbitMQ 实战指南</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter19_1</a></p><h4 id="学习-唐亚峰、纯洁的微笑-前辈的经验"><a href="#学习-唐亚峰、纯洁的微笑-前辈的经验" class="headerlink" title="学习 唐亚峰、纯洁的微笑 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十八篇：使用 Redis 实现消息队列</title>
      <link href="/2018/10/18/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8%20Redis%20%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2018/10/18/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AF%87%EF%BC%9A%E4%BD%BF%E7%94%A8%20Redis%20%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>​</p><p align="right"><strong>—— 基于 Lettuce 的发布与订阅</strong></p><p></p><p>​        使用 <strong>Spring Data Redis</strong> 作为发布消息的方式听起来可能很奇怪，但是您将发现，Redis不仅提供NoSQL数据存储，而且<strong>还提供消息传递系统</strong>。</p><p>[TOC]</p><h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>​        JMS即<a href="https://baike.baidu.com/item/Java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">Java消息服务</a>（Java Message Service）应用程序接口，是一个<a href="https://baike.baidu.com/item/Java%E5%B9%B3%E5%8F%B0" target="_blank" rel="noopener">Java平台</a>中关于面向<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/5899771" target="_blank" rel="noopener">消息中间件</a>（MOM）的<a href="https://baike.baidu.com/item/API/10154" target="_blank" rel="noopener">API</a>，用于在两个应用程序之间，或<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336" target="_blank" rel="noopener">分布式系统</a>中发送消息，进行异步通信。</p><p>​       JMS消息通常有两种类型：</p><ul><li>点对点（Point-to-Point）：在点对点的消息系统中，消息分发给一个单独的使用者。点对点消息往往与队列（javax.jms.Queue）相关联。被概括为：<strong>只有一个消费者将获得消息</strong>。</li><li>发布/订阅（Publish/Subscribe）：发布/订阅消息系统支持一个<code>事件驱动模型</code>，消息生产者和消费者都参与消息的传递。生产者发布事件，而使用者订阅感兴趣的事件，并使用事件。该类型消息一般与特定的主题（javax.jms.Topic）关联。被概括为：<strong>多个消费者可以获得消息</strong>。</li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-data-redis：<strong>2.0.5.RELEASE</strong></li><li>commons-pool2：2.5.0 </li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 整合Lettuce Redis需要commons-pool2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br></pre></td></tr></table></figure><h2 id="3、message（消费者）"><a href="#3、message（消费者）" class="headerlink" title="3、message（消费者）"></a>3、message（消费者）</h2><h3 id="ReceiverOne-java"><a href="#ReceiverOne-java" class="headerlink" title="ReceiverOne.java"></a><code>ReceiverOne.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者One</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/18 0018 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用`<span class="doctag">@Autowired</span>`的Setter方法注入方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceiverOne</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 方法名随你起，不过必须和配置类中的消息监听器组件内容保持一致 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【消费者 ReceiverOne】：我消费了&lt;"</span> + message + <span class="string">"&gt;"</span>);</span><br><span class="line">        <span class="comment">// Decrements the count of the latch, releasing all waiting threads if the count reaches zero.</span></span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReceiverTwo-java"><a href="#ReceiverTwo-java" class="headerlink" title="ReceiverTwo.java"></a><code>ReceiverTwo.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者Two</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/18 0018 15:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用`<span class="doctag">@Autowired</span>`的Setter方法注入方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceiverTwo</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【消费者 ReceiverTwo】：我消费了&lt;"</span> + message + <span class="string">"&gt;"</span>);</span><br><span class="line">        <span class="comment">// Decrements the count of the latch, releasing all waiting threads if the count reaches zero.</span></span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、config"><a href="#4、config" class="headerlink" title="4、config"></a>4、config</h2><p><strong>Spring Data Redis</strong> 提供了所有与 <strong>Redis</strong> 发送和接收消息所需的组件。具体来说，您需要配置：</p><ul><li>A connection factory（连接工厂）</li><li>A message listener container（消息监听器容器）</li><li>A Redis template（RedisTemplate）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.message.ReceiverOne;</span><br><span class="line"><span class="keyword">import</span> com.fatal.message.ReceiverTwo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `消息服务`配置类</span></span><br><span class="line"><span class="comment"> * `<span class="doctag">@Bean</span>`修饰含参方法时，参数从Spring容器中取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/18 0018 15:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Spring容器注入`消费者One`和`消费者Two`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ReceiverOne <span class="title">receiverOne</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReceiverOne(latch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ReceiverTwo <span class="title">receiverTwo</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReceiverTwo(latch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CountDownLatch <span class="title">countDownLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置闩锁的计数为 2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">redisMessageListenerContainer</span><span class="params">(RedisConnectionFactory factory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                            MessageListenerAdapter adapterOne,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                MessageListenerAdapter adapterTwo)</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        <span class="comment">/** 设置连接工厂 */</span></span><br><span class="line">        container.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">/** 添加两个消息监听器，设置监听的主题为`topic` */</span></span><br><span class="line">        container.addMessageListener(adapterOne, <span class="keyword">new</span> PatternTopic(<span class="string">"topic"</span>));</span><br><span class="line">        container.addMessageListener(adapterTwo, <span class="keyword">new</span> PatternTopic(<span class="string">"topic"</span>));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">adapterOne</span><span class="params">(ReceiverOne receiverOne)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 对`ReceiverOne`进行封装，指定接受消息de方法为`receiverMessage` */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiverOne, <span class="string">"receiveMessage"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">adapterTwo</span><span class="params">(ReceiverTwo receiverTwo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 对`ReceiverTwo`进行封装，指定接受消息de方法为`receiverMessage` */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiverTwo, <span class="string">"receiveMessage"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        因为 <strong>ReceiverOne、ReceiverTwo</strong> 两个类是都是<strong>POJO</strong>，所以它需要包装在一个消息监听器适配器中（<code>MessageListenerAdapter</code>），该适配器实现  <strong>MessageListener </strong>接口 。消息监听适配器还配置为当消息到达时调用接收器上的用来接收消息的方法（<code>receiveMessage</code>）。</p><h2 id="5、controller"><a href="#5、controller" class="headerlink" title="5、controller"></a>5、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Message 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/18 0018 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/message"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sendRedisMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedisMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【控制器 MessageController】：生产者发布了&lt;"</span> + message + <span class="string">"&gt;"</span>);</span><br><span class="line">        stringRedisTemplate.convertAndSend(<span class="string">"config"</span>, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使当前线程等待直到闩锁计数为零，除非线程被中断。</span></span><br><span class="line">        latch.await();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束程序</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、显示"><a href="#6、显示" class="headerlink" title="6、显示"></a>6、显示</h2><p>运行工程</p><p><img src="/images/SpringBoot2/SpringBoot使用Redis实现消息队列/1539856884275.png" alt="1539856884275"></p><h3 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h3><p>访问 <strong>sendRedisMessage</strong> 接口发布消息</p><p>POST：<a href="http://localhost:8080/message/sendRedisMessage" target="_blank" rel="noopener">http://localhost:8080/message/sendRedisMessage</a></p><p><img src="/images/SpringBoot2/SpringBoot使用Redis实现消息队列/1539856959699.png" alt="1539856959699"></p><p><img src="/images/SpringBoot2/SpringBoot使用Redis实现消息队列/1539857052006.png" alt="1539857052006"></p><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><p><img src="/images/SpringBoot2/SpringBoot使用Redis实现消息队列/1539857112708.png" alt="1539857112708"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://spring.io/guides/gs/messaging-redis/" target="_blank" rel="noopener">Messaging-Redis</a></p><p><a href="https://blog.csdn.net/forezp/article/details/71023652#commentBox" target="_blank" rel="noopener">SpringBoot非官方教程 | 第十四篇：在springboot中用redis实现消息队列</a></p><p>CountDownLatch 源码</p><h2 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h2><p>The following guides may also be helpful:</p><ul><li><a href="https://spring.io/guides/gs/messaging-rabbitmq/" target="_blank" rel="noopener">Messaging with RabbitMQ</a></li><li><a href="https://spring.io/guides/gs/messaging-jms/" target="_blank" rel="noopener">Messaging with JMS</a></li><li><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">Building an Application with Spring Boot</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="CountDownLatch介绍"><a href="#CountDownLatch介绍" class="headerlink" title="CountDownLatch介绍"></a>CountDownLatch介绍</h3><p><code>CountDownLatch</code>一种同步辅助工具，允许一个或多个线程等到在其它线程中执行的一组操作完成为止。</p><p>使用给定的计数初始化<code>CountDownLatch</code>。调用 <strong><code>await()</code></strong> 方法让线程阻塞，直到当前计数到达 <strong><code>0</code></strong> 触发 <strong><code>countDown()</code></strong> 方法的调用，释放所有等待的线程，再继续执行 <strong><code>await()</code></strong> 方法的后续调用。这是一种一次性现象——计数无法重置。如果需要重置计数的版本，可以考虑使用 <code>Cyclicbarrier</code>。</p><p>用一个计数初始化的<code>CountDownLatch</code>充当一个简单的开/关闩锁，或门：所有调用了 <strong><code>await()</code></strong> 方法的线程在门外等待直到其中一个线程调用了 <strong><code>countDown()</code></strong> 方法将门打开。 初始化为 <strong>N</strong> 的<code>CountDownLatch</code> 可用于让一个线程等待直到 <strong>N</strong> 个线程完成某些操作，或者某些操作完成 <strong>N</strong> 次。</p><p><code>CountDownLatch</code> 一个有用的属性就是它不要求调用 <strong><code>countDown()</code></strong> 在继续之前等待计数达到 <strong><code>0</code></strong>，它只是为了阻止任何线程在所有的线程都能通过之前继续通过 <strong><code>await()</code></strong> （倒计时到 0 时，开门放一群或一只狗）</p><h3 id="CountDownLatch原理"><a href="#CountDownLatch原理" class="headerlink" title="CountDownLatch原理"></a>CountDownLatch原理</h3><p>CountDownLatch是通过一个计数器来实现的，计数器的初始化值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就相应得减1。当计数器到达0时，表示所有的线程都已完成任务，然后在闭锁上等待的线程就可以恢复执行任务。</p><p><code>注</code>：这里为了演示，才使用 <code>CountDownLatch</code> 的。使用时不必加上它。</p><p>详细了解 <a href="http://www.importnew.com/15731.html" target="_blank" rel="noopener">CountDownLatch</a></p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter18" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter18</a></p><h4 id="学习-方志朋-前辈的经验"><a href="#学习-方志朋-前辈的经验" class="headerlink" title="学习 方志朋 前辈的经验"></a>学习 <a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 | 第十七篇：集成Swagger2在线调试（battcn版）</title>
      <link href="/2018/10/17/Spring%20Boot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AF%87%EF%BC%9A%E9%9B%86%E6%88%90Swagger2%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%EF%BC%88battcn%E7%89%88%EF%BC%89/"/>
      <url>/2018/10/17/Spring%20Boot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AF%87%EF%BC%9A%E9%9B%86%E6%88%90Swagger2%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%EF%BC%88battcn%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>​        随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了：<strong>前端渲染</strong>、<strong>前后端分离</strong>的形态，而且前端技术和后端技术在各自的道路上越走越远。</p><p>​        前端和后端 <strong>唯一联系</strong>，变成了 <strong>API</strong> 接口；<em>API文档</em> 自然就成了前后端开发人员联系的纽带，变得尤为的重要，<code>swagger</code>就是一款让你更好的书写API文档的框架。</p><p>​         <strong>Swagger</strong> 是一款自动生成 <strong>在线文档 + 接口调试</strong> 的工具。在 WEB 开发中不可否认的是我们需要给客户端提供 API 接口，这个时候需要借助 <strong>postman、rap 等工具</strong> 进行调试，以便于接口能正常交付给客户端人员，用过其它工具的应该知道一个 POST 请求一堆参数是非常枯燥且烦人的事情，而 <strong>Swagger</strong> 就是让你摆脱这种束缚感….</p><blockquote><p><strong><code>swagger</code> 优缺点</strong></p></blockquote><ul><li>集成方便，功能强大</li><li>在线调试与文档生成</li><li>代码耦合，需要注解支持，但不影响程序性能</li></ul><h2 id="swagger-spring-boot-starter"><a href="#swagger-spring-boot-starter" class="headerlink" title="swagger-spring-boot-starter"></a>swagger-spring-boot-starter</h2><p>​        <strong>SpringBoot</strong> 没有为 <strong>swagger</strong> 做  <strong>starter</strong> ，所以 <strong>swagger</strong> 的配置较为麻烦。 <strong><em>swagger-spring-boot-starter</em></strong> 是 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">battcn</a> 前辈对 swagger 封装做成的 starter ，它是一款建立在<code>swagger</code>基础之上的工具包，利用 <strong>SpringBoot</strong> 自动装配的特性，简化了传统<code>swagger</code>的繁琐配置。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li><strong>swagger-spring-boot-starter：<em>2.1.0-RELEASE</em> </strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入battcn前辈封装的starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.battcn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><p>​        配置<code>spring.swagger.enabled</code>开启<code>swagger</code>的使用，如果在生产环境中不想用可以在对应的<code>profile</code>下面将它设置为<code>spring.swagger.enabled=false</code>，这样一来接口就不存在暴露的风险</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  swagger:</span></span><br><span class="line">    <span class="comment"># 启动swagger，默认为 true</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 扫描的包路径,默认扫描所有</span></span><br><span class="line"><span class="attr">    base-package:</span> <span class="string">com.fatal</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line">      <span class="comment"># true: 开启后访问 swagger-ui.html 会自动路由到登陆页面，保障接口信息不被暴露）</span></span><br><span class="line"><span class="attr">      filter-plugin:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置账号、密码</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    contact:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">      url:</span> <span class="string">fatal's</span> <span class="string">url</span></span><br><span class="line"><span class="attr">      email:</span> <span class="number">634137063</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="comment"># 描述</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Spring</span> <span class="string">Boot2</span> <span class="string">集成Swagger2在线调试（battcn版）</span></span><br><span class="line">    <span class="comment"># 版本</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539781059756.png" alt="1539781059756"></p><h2 id="3、entity"><a href="#3、entity" class="headerlink" title="3、entity"></a>3、entity</h2><p><code>swagger</code> 提供了非常齐全的注解，为<code>POJO</code>提供了<code>@ApiModel</code>、<code>@ApiModelProperty</code>，以便更好的渲染最终结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/16 0016 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、controller"><a href="#4、controller" class="headerlink" title="4、controller"></a>4、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.battcn.boot.swagger.model.DataType;</span><br><span class="line"><span class="keyword">import</span> com.battcn.boot.swagger.model.ParamType;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/16 0016 14:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"1.1"</span>,description = <span class="string">"用户管理"</span>, value = <span class="string">"用户管理"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"条件查询"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, dataType = DataType.STRING, paramType = ParamType.QUERY),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"password"</span>, value = <span class="string">"密码"</span>, dataType = DataType.STRING, paramType = ParamType.QUERY)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">query</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"多个参数用  @ApiImplicitParams"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1L</span>, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"主键查询"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户编号"</span>, dataType = DataType.LONG, paramType = ParamType.PATH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"单个参数用  @ApiImplicitParam"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"米琪"</span>, <span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"删除用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户编号"</span>, dataType = DataType.LONG, paramType = ParamType.PATH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"单个参数用  @ApiImplicitParam"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"添加用户"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"如果是 POST PUT 这种带 @RequestBody 的可以不用写 @ApiImplicitParam"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"修改用户"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(@PathVariable Long id, User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"如果你不想写 @ApiImplicitParam 那么 swagger 也会使用默认的参数名作为描述信息 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##5、显示</p><p>启动工程，打开浏览器输入 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 即可</p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539790333458.png" alt="1539790333458"></p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539790363924.png" alt="1539790363924"></p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539827322329.png" alt="1539827322329"></p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539790413989.png" alt="1539790413989"></p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539790483773.png" alt="1539790483773"></p><h2 id="6、笔记"><a href="#6、笔记" class="headerlink" title="6、笔记"></a>6、笔记</h2><h3 id="注解描述"><a href="#注解描述" class="headerlink" title="注解描述"></a>注解描述</h3><ul><li><strong>@Api：</strong> 描述<code>Controller</code></li><li><strong>@ApiIgnore：</strong> 忽略该<code>Controller</code>，指不对当前类做扫描</li><li><strong>@ApiOperation：</strong> 描述<code>Controller</code>类中的<code>method</code>接口</li><li><strong>@ApiParam：</strong> 描述单个入参信息，与<code>@ApiImplicitParam</code>不同的是，他是写在参数左侧的。如（<strong>@ApiParam(name = “username”,value = “用户名”) String username</strong>）</li><li><strong>@ApiModel：</strong> 描述<code>POJO</code>对象</li><li><strong>@ApiModelProperty：</strong> 描述<code>POJO</code>对象中的属性值</li><li><strong>@ApiImplicitParam：</strong> 描述单个入参信息，如果请求参数在url上，<em>@ApiImplicitParam</em> 上加<em>paramType = “path”</em></li><li><strong>@ApiImplicitParams：</strong> 描述多个入参信息</li><li><strong>@ApiResponse：</strong> 描述单个出参信息</li><li><strong>@ApiResponses：</strong> 描述多个出参信息</li><li><strong>@ApiError：</strong> 接口错误所返回的信息</li></ul><blockquote><ol><li>当我们指定了 Swagger 的扫描路径后，很多注解我们不写，它会取参数信息为默认值。</li><li><strong>2.X 版本后无需添加 @EnableSwagger2Doc</strong></li></ol></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>更多使用方式请参考 <a href="https://github.com/battcn/swagger-spring-boot" target="_blank" rel="noopener">swagger-spring-boot</a></p><p><a href="https://blog.battcn.com/2018/05/16/springboot/v2-config-swagger/" target="_blank" rel="noopener">一起来学SpringBoot | 第十一篇：集成Swagger在线调试</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter17_2" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter17_2</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习  唐亚峰  前辈的经验"></a>学习  <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>  前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 | 第十七篇：集成Swagger2在线调试（官方版）</title>
      <link href="/2018/10/17/Spring%20Boot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AF%87%EF%BC%9A%E9%9B%86%E6%88%90Swagger2%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%EF%BC%88%E5%AE%98%E6%96%B9%E7%89%88%EF%BC%89/"/>
      <url>/2018/10/17/Spring%20Boot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AF%87%EF%BC%9A%E9%9B%86%E6%88%90Swagger2%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%EF%BC%88%E5%AE%98%E6%96%B9%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>​        随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了：<strong>前端渲染</strong>、<strong>前后端分离</strong>的形态，而且前端技术和后端技术在各自的道路上越走越远。</p><p>​        前端和后端 <strong>唯一联系</strong>，变成了 <strong>API</strong> 接口；<em>API文档</em> 自然就成了前后端开发人员联系的纽带，变得尤为的重要，<code>swagger</code>就是一款让你更好的书写API文档的框架。</p><p>​         <strong>Swagger</strong> 是一款自动生成 <strong>在线文档 + 接口调试</strong> 的工具。在 WEB 开发中不可否认的是我们需要给客户端提供 API 接口，这个时候需要借助 <strong>postman、rap 等工具</strong> 进行调试，以便于接口能正常交付给客户端人员，用过其它工具的应该知道一个 POST 请求一堆参数是非常枯燥且烦人的事情，而 <strong>Swagger</strong> 就是让你摆脱这种束缚感….</p><blockquote><p><strong><code>swagger</code> 优缺点</strong></p></blockquote><ul><li>集成方便，功能强大</li><li>在线调试与文档生成</li><li>代码耦合，需要注解支持，但不影响程序性能</li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li><strong>springfox-swagger2：<em>2.8.0</em></strong></li><li><strong>springfox-swagger-ui：<em>2.8.0</em></strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><p><strong>swagger</strong> 需要的依赖有两个：<strong>springfox-swagger2</strong> 和 <strong>springfox-swagger-ui</strong>，版本要求一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  swagger2 begin   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  swagger2 end   --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、config"><a href="#2、config" class="headerlink" title="2、config"></a>2、config</h2><p><strong>@EnableSwagger2</strong> 开启 <strong>swagger2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/17 0017 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">// 开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.fatal.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"标题：用户信息管理系统-接口文档"</span>)</span><br><span class="line">                .description(<span class="string">"描述：about xxx"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"fatal"</span>, <span class="string">"fatal's url"</span>, <span class="string">"fatal's email"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、entity"><a href="#3、entity" class="headerlink" title="3、entity"></a>3、entity</h2><p>​        <code>swagger</code> 提供了非常齐全的注解，为<code>POJO</code>提供了<code>@ApiModel</code>、<code>@ApiModelProperty</code>，以便更好的渲染最终结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/17 0017 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(name = <span class="string">"password"</span>, value = <span class="string">"密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、controller"><a href="#4、controller" class="headerlink" title="4、controller"></a>4、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/17 0017 15:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查询所有"</span>, notes = <span class="string">"获取用户列表"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = Arrays.asList(<span class="keyword">new</span> User(<span class="number">0L</span>, <span class="string">"米彩"</span>, <span class="string">"123"</span>),</span><br><span class="line">                <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"米琪"</span>, <span class="string">"123"</span>));</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"添加用户"</span>, notes = <span class="string">"添加用户操作"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"更新用户"</span>, notes = <span class="string">"更新用户操作"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(@ApiParam(name = <span class="string">"id"</span>, value = <span class="string">"用户主键"</span>)</span></span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User()</span><br><span class="line">                .setId(id)</span><br><span class="line">                .setUsername(<span class="string">"fatal"</span>)</span><br><span class="line">                .setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、显示"><a href="#5、显示" class="headerlink" title="5、显示"></a>5、显示</h2><p>启动工程，打开浏览器输入 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 即可</p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1562028687002.png" alt="1562028687002"></p><p><img src="/images/SpringBoot2/SpringBoot集成Swagger2在线调试/1539779031489.png" alt="1539779031489"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>swagger</strong> 没有做安全方面的防护，可能需要我们自己做相关的工作。</p><h2 id="6、笔记"><a href="#6、笔记" class="headerlink" title="6、笔记"></a>6、笔记</h2><h3 id="注解描述"><a href="#注解描述" class="headerlink" title="注解描述"></a>注解描述</h3><ul><li><strong>@Api：</strong> 描述<code>Controller</code></li><li><strong>@ApiIgnore：</strong> 忽略该<code>Controller</code>，指不对当前类做扫描</li><li><strong>@ApiOperation：</strong> 描述<code>Controller</code>类中的<code>method</code>接口</li><li><strong>@ApiParam：</strong> 描述单个入参信息，与<code>@ApiImplicitParam</code>不同的是，他是写在参数左侧的。如（<strong>@ApiParam(name = “username”,value = “用户名”) String username</strong>）</li><li><strong>@ApiModel：</strong> 描述<code>POJO</code>对象</li><li><strong>@ApiModelProperty：</strong> 描述<code>POJO</code>对象中的属性值</li><li><strong>@ApiImplicitParam：</strong> 描述单个入参信息，如果请求参数在url上，<em>@ApiImplicitParam</em> 上加<em>paramType = “path”</em></li><li><strong>@ApiImplicitParams：</strong> 描述多个入参信息</li><li><strong>@ApiResponse：</strong> 描述单个出参信息</li><li><strong>@ApiResponses：</strong> 描述多个出参信息</li><li><strong>@ApiError：</strong> 接口错误所返回的信息</li></ul><blockquote><p>当我们指定了 Swagger 的扫描路径后，很多注解我们不写，它会取参数信息为默认值。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/forezp/article/details/71023536" target="_blank" rel="noopener">SpringBoot非官方教程 | 第十一篇：springboot集成swagger2，构建优雅的Restful API</a></p><p><a href="https://blog.battcn.com/2018/05/16/springboot/v2-config-swagger/" target="_blank" rel="noopener">一起来学SpringBoot | 第十一篇：集成Swagger在线调试</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter17_1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter17_1</a></p><h4 id="学习-唐亚峰-、方志朋-前辈的经验"><a href="#学习-唐亚峰-、方志朋-前辈的经验" class="headerlink" title="学习  唐亚峰 、方志朋 前辈的经验"></a>学习  <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> 、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十六篇：Spring Cache集成Redis</title>
      <link href="/2018/10/15/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AF%87%EF%BC%9ASpring%20Cache%E9%9B%86%E6%88%90Redis/"/>
      <url>/2018/10/15/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AF%87%EF%BC%9ASpring%20Cache%E9%9B%86%E6%88%90Redis/</url>
      
        <content type="html"><![CDATA[<p>​        上一篇简单的介绍了 Spring Cache 的使用方法，用的是<code>默认缓存管理器</code> <strong>ConcurrentMapCacheManager</strong>， 本篇文章介绍 <strong>Spring Cache</strong> 如何集成 <strong>Redis</strong></p><p>[TOC]</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>​        我们只需引入依赖 <strong><code>spring-boot-starter-data-redis</code></strong>，Spring Boot 扫描到后，<strong>RedisCacheConfiguration</strong> 自动配置生效，<code>redis 缓存管理器</code> <strong>RedisCacheManager</strong> 就会 <strong>取代</strong> <code>默认缓存管理器</code><strong>ConcurrentMapCacheManager</strong> 成了 <strong>CacheManager</strong> 的实现</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-<strong>cache</strong>：<strong>2.0.5.RELEASE</strong></li><li>spring-boot-starter-data-redis：<strong>2.0.5.RELEASE</strong></li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web starter关联依赖 spring-boot-starter-json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 整合Lettuce Redis需要commons-pool2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br><span class="line">  <span class="comment"># 一般来说是不用配置的，Spring Cache 会根据依赖的包自行装配</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><h2 id="3、entity"><a href="#3、entity" class="headerlink" title="3、entity"></a>3、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/15 0015 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、dao"><a href="#4、dao" class="headerlink" title="4、dao"></a>4、dao</h2><h3 id="IUserDao-java"><a href="#IUserDao-java" class="headerlink" title="IUserDao.java"></a><code>IUserDao.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 数据库访问层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 增或改 */</span></span><br><span class="line">    <span class="function">User <span class="title">insertOrUpdate</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删 */</span></span><br><span class="line">    <span class="function">User <span class="title">remove</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 查 */</span></span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDaoImpl-java"><a href="#UserDaoImpl-java" class="headerlink" title="UserDaoImpl.java"></a><code>UserDaoImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 数据库访问层实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模拟数据库 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, User&gt; db = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化数据库</span></span><br><span class="line">        db.put(<span class="number">1l</span>,<span class="keyword">new</span> User().setId(<span class="number">1l</span>).setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"18"</span>));</span><br><span class="line">        db.put(<span class="number">2l</span>,<span class="keyword">new</span> User().setId(<span class="number">2l</span>).setUsername(<span class="string">"米琪"</span>).setPassword(<span class="string">"19"</span>));</span><br><span class="line">        db.put(<span class="number">3l</span>,<span class="keyword">new</span> User().setId(<span class="number">3l</span>).setUsername(<span class="string">"小米"</span>).setPassword(<span class="string">"20"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            user.setId(System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">        db.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">remove</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、service"><a href="#5、service" class="headerlink" title="5、service"></a>5、service</h2><h3 id="IUserService-java"><a href="#IUserService-java" class="headerlink" title="IUserService.java"></a><code>IUserService.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 增或改 */</span></span><br><span class="line">    <span class="function">User <span class="title">insertOrUpdate</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删 */</span></span><br><span class="line">    <span class="function">User <span class="title">remove</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 查 */</span></span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a><code>UserServiceImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【insertOrUpdate】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.insertOrUpdate(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">remove</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【remove】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【selectById】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Cacheable</span> 根据方法的请求参数对其结果进行缓存</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@CachePut</span> 根据方法的请求参数对其结果进行缓存，和 <span class="doctag">@Cacheable</span> 不同的是，它每次都会触发真实方法的调用</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@CachEvict</span> 根据条件对缓存进行清空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Application"><a href="#6、Application" class="headerlink" title="6、Application"></a>6、Application</h2><blockquote><p>开启缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">// 启用缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter16Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter16Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Test"><a href="#7、Test" class="headerlink" title="7、Test"></a>7、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter16ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试添加</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        User user = <span class="keyword">new</span> User().setId(<span class="number">1l</span>).setUsername(<span class="string">"fatal"</span>).setPassword(<span class="string">"21"</span>);</span><br><span class="line">        User result = userService.insertOrUpdate(user);</span><br><span class="line">        log.info(<span class="string">"【添加成功】 = [&#123;&#125;]"</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试查询（有缓存，没有显示进入【selectById】方法）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        User selectAfterInsert = userService.selectById(result.getId());</span><br><span class="line">        log.info(<span class="string">"【查询成功】 = [&#123;&#125;]"</span>, selectAfterInsert);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试删除（缓存也一同被删除了）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        User remove = userService.remove(result.getId());</span><br><span class="line">        log.info(<span class="string">"【删除成功】 = [&#123;&#125;]"</span>, remove);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试删除后查询（缓存没了，显示进入【selectById】方法）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        User selectAfterDelete = userService.selectById(result.getId());</span><br><span class="line">        log.info(<span class="string">"【查询成功】 = [&#123;&#125;]"</span>, selectAfterDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试缓存管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(cacheManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、显示"><a href="#8、显示" class="headerlink" title="8、显示"></a>8、显示</h2><p>运行 <code>Chapter16ApplicationTests.testCache()</code></p><p><img src="/images/SpringBoot2/SpringBoot之Spring Cache集成Redis/1539613483244.png" alt="1539613483244"></p><p>​        结果和我们期望的一致，可以看到增删改查中，<strong>第一次查询是没有日志输出的，因为它直接从缓存中获取的数据，而添加、修改、删除都是会进入方法内执行具体的业务代码，然后通过切面去删除掉Redis中的缓存数据。其中 # 号代表这是一个 SpEL 表达式，此表达式可以遍历方法的参数对象，具体语法可以参考 Spring 的相关文档手册。</strong></p><p>运行<code>Chapter16ApplicationTests.testCacheManager()</code></p><p><img src="/images/SpringBoot2/SpringBoot之Spring Cache集成Redis/1539613778577.png" alt="1539613778577"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#cache-introduction" target="_blank" rel="noopener">spring-cache文档</a></p><p><a href="https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0" target="_blank" rel="noopener">spring-data-redis文档</a></p><p><a href="https://redis.io/documentation" target="_blank" rel="noopener">Redis 文档</a></p><p><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis 中文文档</a></p><p><a href="https://blog.csdn.net/forezp/article/details/71023614" target="_blank" rel="noopener">SpringBoot非官方教程 | 第十三篇：springboot集成spring cache</a></p><p><a href="https://blog.battcn.com/2018/05/13/springboot/v2-cache-redis/" target="_blank" rel="noopener">一起来学SpringBoot | 第十篇：使用Spring Cache集成Redis</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>Cache</strong> 注解用法可参考上一篇</p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter16" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter16</a></p><h4 id="学习-唐亚峰、方志朋-前辈的经验"><a href="#学习-唐亚峰、方志朋-前辈的经验" class="headerlink" title="学习  唐亚峰、方志朋 前辈的经验"></a>学习  <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十五篇：整合Cache</title>
      <link href="/2018/10/15/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Cache/"/>
      <url>/2018/10/15/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Cache/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>数据库的数据</strong> 是存储在 <strong>硬盘上</strong> 的，频繁访问 <strong>性能</strong> 较 <strong>低</strong>。而 <strong>缓存数据</strong> 存储在 <strong>内存</strong> 中，访问 <strong>性能</strong> 比硬盘 <strong>快</strong> 了一个数量级。如果将一些需要 <strong>频繁查询</strong> 的热数据放到 <strong>缓存</strong> 中，可以大大减轻数据库的访问压力。</p><p>[TOC]</p><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>​        <strong>Spring 3.1</strong> 引入了激动人心的基于注释（<strong>annotation</strong>）的缓存（<strong>cache</strong>）技术，<strong>它本质上不是一个具体的缓存实现方案</strong>（例如 EHCache 或者 OSCache），<strong>而是一个对缓存使用的抽象</strong>，通过在既有代码中添加少量它定义的各种 <strong>annotation</strong>，即能够达到 <code>缓存方法的返回对象</code> 的效果。</p><p>​        <strong>Spring</strong> 的缓存技术还具备相当的灵活性，不仅能够使用 <strong>SpEL（Spring Expression Language）</strong>来定义缓存的 <strong>key</strong> 和各种 <strong>condition</strong>，还提供开箱即用的缓存临时存储方案，也支持主流的专业缓存例如 <code>EHCache</code> 集成。</p><h2 id="声明式缓存"><a href="#声明式缓存" class="headerlink" title="声明式缓存"></a>声明式缓存</h2><p>​        <strong>Spring</strong> 定义 <strong>CacheManager</strong> 和 <strong>Cache</strong> 接口用来统一不同的缓存技术。例如 <code>JCache、 EhCache、 Hazelcast、 Guava、 Redis</code> 等。在使用 <strong>Spring</strong> 集成 <strong>Cache</strong> 的时候，我们只需要提供实现的 <strong>CacheManager</strong> 的 <strong>Bean</strong>，然后在方法上写一行注解，声明一下这个方法的查询是要用缓存的即可。</p><h2 id="Spring-Boot默认集成CacheManager"><a href="#Spring-Boot默认集成CacheManager" class="headerlink" title="Spring Boot默认集成CacheManager"></a>Spring Boot默认集成CacheManager</h2><p><strong>SpringBoot</strong> 已经为我们自动配置了多个 <strong>CacheManager</strong> 的实现。</p><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539528857220.png" alt="1539528857220"></p><p>​        我们可以在 <strong>application.yml</strong> 中用<code>spring.cache.type</code> 指定缓存供应商类型（默认情况下，根据环境自动检测），如果 <strong>SpringBoot</strong> 在配置中找不到用户指定的 <code>Cache Providers</code> ，那么 <strong>ConcurrentMapCacheManager</strong> 会被作为 <strong>缓存管理器</strong>。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-<strong>cache</strong>：2.0.5.RELEASE </li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入缓存依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、entity"><a href="#2、entity" class="headerlink" title="2、entity"></a>2、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、dao"><a href="#3、dao" class="headerlink" title="3、dao"></a>3、dao</h2><h3 id="IUserDao-java"><a href="#IUserDao-java" class="headerlink" title="IUserDao.java"></a><code>IUserDao.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 数据库访问层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 增或改 */</span></span><br><span class="line">    <span class="function">User <span class="title">insertOrUpdate</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删 */</span></span><br><span class="line">    <span class="function">User <span class="title">remove</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 查 */</span></span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDaoImpl-java"><a href="#UserDaoImpl-java" class="headerlink" title="UserDaoImpl.java"></a><code>UserDaoImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 数据库访问层实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模拟数据库 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, User&gt; db = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化数据库</span></span><br><span class="line">        db.put(<span class="number">1l</span>,<span class="keyword">new</span> User().setId(<span class="number">1l</span>).setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"18"</span>));</span><br><span class="line">        db.put(<span class="number">2l</span>,<span class="keyword">new</span> User().setId(<span class="number">2l</span>).setUsername(<span class="string">"米琪"</span>).setPassword(<span class="string">"19"</span>));</span><br><span class="line">        db.put(<span class="number">3l</span>,<span class="keyword">new</span> User().setId(<span class="number">3l</span>).setUsername(<span class="string">"小米"</span>).setPassword(<span class="string">"20"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            user.setId(System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">        db.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">remove</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、service"><a href="#4、service" class="headerlink" title="4、service"></a>4、service</h2><h3 id="IUserService-java"><a href="#IUserService-java" class="headerlink" title="IUserService.java"></a><code>IUserService.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 增或改 */</span></span><br><span class="line">    <span class="function">User <span class="title">insertOrUpdate</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删 */</span></span><br><span class="line">    <span class="function">User <span class="title">remove</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 查 */</span></span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a><code>UserServiceImpl.java</code></h3><p>声明式很简单，在指定方法上标注上对应的注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertOrUpdate</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【insertOrUpdate】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.insertOrUpdate(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">remove</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【remove】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"user"</span>, key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 健壮性判断...</span></span><br><span class="line">        log.info(<span class="string">"进入【selectById】方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> dao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、Application"><a href="#5、Application" class="headerlink" title="5、Application"></a>5、Application</h2><blockquote><p>使用<code>@EnableCaching</code>开启 <strong>Cache</strong> 缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 启用缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter15Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter15Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Test"><a href="#6、Test" class="headerlink" title="6、Test"></a>6、Test</h2><h3 id="UserServiceImplTest-java"><a href="#UserServiceImplTest-java" class="headerlink" title="UserServiceImplTest.java"></a><code>UserServiceImplTest.java</code></h3><p>测试缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/14 0014 17:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOrUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"micai"</span>).setPassword(<span class="string">"18"</span>);</span><br><span class="line">        User result = service.insertOrUpdate(user);</span><br><span class="line">        log.info(<span class="string">"【添加成功】 user -&gt; &#123;&#125;"</span>, result);</span><br><span class="line"></span><br><span class="line">        result.setUsername(<span class="string">"miqi"</span>);</span><br><span class="line">        result = service.insertOrUpdate(result);</span><br><span class="line">        log.info(<span class="string">"【修改成功】 user -&gt; &#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User result = service.remove(<span class="number">1l</span>);</span><br><span class="line">        log.info(<span class="string">"【删除成功】 user -&gt; &#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用该方法即可测试缓存的存在了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"micai"</span>).setPassword(<span class="string">"18"</span>);</span><br><span class="line">        User result = service.insertOrUpdate(user);</span><br><span class="line">        log.info(<span class="string">"【添加成功】 user -&gt; &#123;&#125;"</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *      因为在添加的时候已经把对象放到缓存中了，所以下面方法执行后，<span class="doctag">@Cacheable</span>判断</span></span><br><span class="line"><span class="comment">         *  出了有缓存，直接从缓存中拿数据，没进入方法体。所以没显示`进入【selectById】方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        User select = service.selectById(result.getId());</span><br><span class="line">        log.info(<span class="string">"【查询成功】 user -&gt; &#123;&#125;"</span>, select);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Chapter15ApplicationTests-java"><a href="#Chapter15ApplicationTests-java" class="headerlink" title="Chapter15ApplicationTests.java"></a><code>Chapter15ApplicationTests.java</code></h3><p>测试CacheManager的默认实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.concurrent.ConcurrentMapCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter15ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentMapCacheManager concurrentMapCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(cacheManager);</span><br><span class="line">        System.out.println(concurrentMapCacheManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><h3 id="测试缓存"><a href="#测试缓存" class="headerlink" title="测试缓存"></a><code>测试缓存</code></h3><p>​        执行测试方法 <strong>selectById</strong> ，在添加完后，添加数据被存放到缓存中，所以，后面查询的时候数据从缓存中取，所以没显示 <code>进入【selectById】方法</code></p><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539530528763.png" alt="1539530528763"></p><h3 id="测试CacheManager的默认实现"><a href="#测试CacheManager的默认实现" class="headerlink" title="测试CacheManager的默认实现"></a><code>测试CacheManager的默认实现</code></h3><p>​        用户没有作配置的情况下，<strong>CacheManager</strong> 取得是 <strong>ConcurrentMapCacheManager</strong>，所以下方显示为同一个 <strong>实例</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539567890228.png" alt="1539567890228"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="根据条件操作缓存"><a href="#根据条件操作缓存" class="headerlink" title="根据条件操作缓存"></a>根据条件操作缓存</h3><p>​        <strong>根据条件操作缓存内容并不影响数据库操作，条件表达式返回一个布尔值，true/false，当条件为true，则进行缓存操作，否则直接调用方法执行的返回结果。</strong></p><ul><li><strong>长度：</strong> <code>@CachePut(value = &quot;user&quot;, key = &quot;#user.id&quot;,condition = &quot;#user.username.length() &lt; 10&quot;)</code> 只缓存用户名长度少于10的数据</li><li><strong>大小：</strong> <code>@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;,condition = &quot;#id &lt; 10&quot;)</code> 只缓存ID小于10的数据</li><li><strong>组合：</strong> <code>@Cacheable(value=&quot;user&quot;,key=&quot;#user.username.concat(#user.password)&quot;)</code></li><li><strong>提前操作：</strong> <code>@CacheEvict(value=&quot;user&quot;,beforeInvocation=true)</code> 加上<code>beforeInvocation=true</code>后，不管内部是否报错，缓存都将被清除，默认情况为<code>false</code></li></ul><blockquote><p> key  和 condition 的变量取自参数</p></blockquote><h3 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h3><blockquote><p><strong>@Cacheable</strong> (根据方法的请求参数对其结果进行缓存)</p></blockquote><ul><li><strong>key：</strong> 缓存的 key，可以为空，如果指定要按照 <strong>SpEL</strong> 表达式编写，如果不指定，则缺省按照方法的所有参数进行组合（如：<code>@Cacheable(value=&quot;user&quot;,key=&quot;#userName&quot;)</code>）</li><li><strong>value：</strong> 缓存的名称，必须指定至少一个（如：<code>@Cacheable(value=&quot;user&quot;)</code> 或者 <code>@Cacheable(value={&quot;user1&quot;,&quot;use2&quot;})</code>）</li><li><strong>condition：</strong> 缓存的条件（针对参数），可以为空，使用 <strong>SpEL</strong> 编写，返回 <strong>true</strong> 或者 <strong>false</strong>，只有为 <strong>true</strong> 才进行缓存（如：<code>@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;,condition = &quot;#id &lt; 10&quot;)</code>）</li><li><strong>unless：</strong>缓存的条件（针对返回结果），可以为空，使用 <strong>SpEL</strong> 编写，返回 <strong>true</strong> 或者 <strong>false</strong>，只有为 <strong>true</strong> 才进行缓存（如：<code>@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;, unless = &quot;result.getCode() != 0&quot;)</code>。<code>result</code> 指返回的对象，这里指 <code>ResultVO</code>。 因为错误的结果我们不可能缓存进来嘛）</li></ul><blockquote><p><strong>@CachePut</strong> (根据方法的请求参数对其结果进行缓存，和 <code>@Cacheable</code> 不同的是，<strong>它每次都会触发真实方法的调用</strong> )</p><p>注：它要求标注的方法的返回值类型与name相同的标注有<code>@Cacheable</code>方法的返回值类型一致，否则报错（类型转换异常）</p></blockquote><ul><li><strong>key：</strong> 同上</li><li><strong>value：</strong> 同上</li><li><strong>condition：</strong> 同上</li></ul><blockquote><p><strong>@CachEvict</strong> (根据条件对缓存进行清空)</p></blockquote><ul><li><strong>key：</strong> 同上</li><li><strong>value：</strong> 同上</li><li><strong>condition：</strong> 同上</li><li><strong>allEntries：</strong> 是否清空当前 <code>value</code> 下的所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存（如：<code>@CacheEvict(value = &quot;user&quot;, key = &quot;#id&quot;, allEntries = true)</code>）</li><li><strong>beforeInvocation：</strong> 是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存（如：<code>@CacheEvict(value = &quot;user&quot;, key = &quot;#id&quot;, beforeInvocation = true)</code>）</li></ul><h3 id="CacheEvict-中的-allEntries-与-beforeInvocation-的区别"><a href="#CacheEvict-中的-allEntries-与-beforeInvocation-的区别" class="headerlink" title="@CacheEvict 中的 allEntries 与 beforeInvocation 的区别"></a>@CacheEvict 中的 allEntries 与 beforeInvocation 的区别</h3><p>​        在 <strong>Spring Cache</strong> 中，<strong>@CacheEvict</strong> 是清除缓存的注解。其中注解参数可以只有 <strong>value</strong> 和 <strong>key</strong> ，意思是清除在 <strong>value</strong> 值空间中的 <strong>key</strong> 值数据，此时默认在当前注解方法成功执行之后再清除。这时候就会存在一个问题，也许你的注解方法成功执行了删除操作，但是后续代码 <strong>抛出异常</strong> 导致未能清除缓存，下次查询时依旧从缓存中去读取，这时查询到的结果值是删除操作之前的值。</p><p>​        有一个简单的解决办法，在注解参数里面加上 <strong>beforeInvocation</strong>为 <strong>true</strong>，意思是说当执行这个方法之前执行清除缓存的操作，这样 <strong>不管这个方法执行成功与否，该缓存都将不存在。</strong></p><p>​        当注解参数加上 <strong>allEntries</strong> 为 <strong>true</strong> 时，意思是说这个清除缓存是 <strong>清除</strong> <strong>当前 value 值空间下</strong> 的所有缓存数据。</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><h3 id="为什么-CacheManager-的默认实现是-ConcurrentMapCacheManager？"><a href="#为什么-CacheManager-的默认实现是-ConcurrentMapCacheManager？" class="headerlink" title="为什么 CacheManager 的默认实现是 ConcurrentMapCacheManager？"></a><strong><code>为什么 CacheManager 的默认实现是 ConcurrentMapCacheManager？</code></strong></h3><p>​        官方文档说：</p><p>​        如果找不到任何 <strong>CacheManager</strong> 的提供者（实现），那么将会以 <strong>ConcurrentMapCacheManager</strong> （<strong>底层</strong>使用 <strong>ConcurrentHashMap</strong>）作为一个 <strong>简单的缓存管理器</strong> 从而进行默认配置。</p><p>​       看一下源码：</p><blockquote><p>这是缓存配置类 <strong>SimpleCacheConfiguration</strong> </p></blockquote><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539566875395.png" alt="1539566875395"></p><blockquote><p>这里是缓存管理器 <strong>ConCurrentCacheManager</strong> 的内部实现</p></blockquote><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1543393996796.png" alt="1543393996796"></p><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539566912084.png" alt="1539566912084"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong><code>分析</code></strong></h3><p>​        其实所有的 <strong>Cache</strong> 缓存配置类，<strong>Spring Boot</strong> 都提供了默认 <strong>配置</strong>（就差你引入依赖就可以用了），我们引入 <strong><code>spring-boot-starter-data-cache</code></strong> 后，该依赖提供了 <strong>SimpleCacheConfiguration</strong> 需要的缓存管理器实现 <strong>ConcurrentMapCacheManager</strong> ；</p><p>而像其它缓存管理器 <strong>实现</strong>，比如 <code>Redis 缓存管理器</code> <strong>RedisCacheManager</strong> 需要的依赖 <strong><code>spring-boot-starter-data-redis</code></strong>，要求我们手动去添加；</p><p>当我们没有添加 <strong>指定管理器</strong> 需要的依赖， <strong>ConcurrentMapCacheManager</strong> 就成了 <strong>默认</strong> 的缓存管理器；当我们引入的话， <strong>SpringBoot</strong> 会扫描出来，并将其 <strong>替代</strong> 默认的缓存管理器。</p><p>（换行的话可能方便看）</p><p>​        具体思路可参考源码：</p><p><img src="/images/SpringBoot2/SpringBoot整合Cache/1539567534452.png" alt="1539567534452"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#cache-introduction" target="_blank" rel="noopener">spring-cache文档</a></p><p><a href="https://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle/#boot-features-caching-provider-simple" target="_blank" rel="noopener">Spring Boot官方文档</a></p><p><a href="https://blog.csdn.net/forezp/article/details/71023614" target="_blank" rel="noopener">SpringBoot非官方教程 | 第十三篇：springboot集成spring cache</a></p><p><a href="https://blog.battcn.com/2018/05/13/springboot/v2-cache-redis/" target="_blank" rel="noopener">一起来学SpringBoot | 第十篇：使用Spring Cache集成Redis</a></p><p><a href="https://blog.csdn.net/whatlookingfor/article/details/51833378" target="_blank" rel="noopener">Spring缓存注解@Cacheable,@CachePut , @CacheEvict使用</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter15" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter15</a></p><h4 id="学习-唐亚峰、方志朋-前辈的经验"><a href="#学习-唐亚峰、方志朋-前辈的经验" class="headerlink" title="学习  唐亚峰、方志朋 前辈的经验"></a>学习  <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十四篇：整合Lettuce Redis</title>
      <link href="/2018/10/14/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Lettuce%20Redis/"/>
      <url>/2018/10/14/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Lettuce%20Redis/</url>
      
        <content type="html"><![CDATA[<p>​        <code>Spring Boot</code> 除了支持常见的 ORM 框架外，更是对常用的中间件提供了非常好封装，随着<code>Spring Boot2.x</code>的到来，支持的组件越来越丰富，也越来越成熟，其中对<code>Redis</code>的支持不仅仅是丰富了它的API，更是 <strong>替换掉底层</strong> <code>Jedis</code>的依赖，<strong>取而代之</strong> 换成了<code>Lettuce(生菜)</code></p><p>[TOC]</p><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p><strong>Redis</strong> 是一个开源的使用 ANSIC 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。相比 <code>Memcached</code>它支持存储的类型相对更多<strong>包括string(字符串)、list(链表、set(集合)、zset(sorted set –有序集合)和 hash（哈希类型），GEO，</strong>同时Redis是<strong>线程安全</strong>的。2010年3月15日起，Redis 的开发工作由 VMware 主持，2013年5月开始，Redis的开发由 <code>Pivotal</code>赞助。</p><h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><p><code>Lettuce</code> 和 <code>Jedis</code> 的都是连接<code>Redis Server</code>的客户端程序。<code>Jedis</code>在 <strong>实现上是直连 redis server，多线程环境下非线程安全，除非使用连接池，为每个Jedis实例增加物理连接</strong>。<code>Lettuce</code>基于Netty的连接实例（StatefulRedisConnection），<strong>可以在多个线程间并发访问，且线程安全，满足多线程环境下的并发访问，同时它是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例</strong>。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>lettuce：5.0.5.RELEASE </li><li>commons-pool2：2.5.0 </li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web starter关联依赖 spring-boot-starter-json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 整合Lettuce Redis需要commons-pool2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br></pre></td></tr></table></figure><h2 id="3、config"><a href="#3、config" class="headerlink" title="3、config"></a>3、config</h2><blockquote><p>默认情况下的模板只能支持<code>RedisTemplate&lt;String, String&gt;</code>，也就是只能存入字符串，这在开发中是不友好的，所以自定义模板是很有<strong><code>必要</code></strong>的，当自定义了模板又想使用<code>String</code>存储这时候就可以使用<code>StringRedisTemplate</code>、<code>RedisTemplate&lt;String, String&gt;</code>这两种方式，它们并不冲突…</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/13 0013 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义RedisTemplate模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">serializableRedisTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer()); <span class="comment">// key序列化器</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());  <span class="comment">// value序列化器</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、entity"><a href="#4、entity" class="headerlink" title="4、entity"></a>4、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/13 0013 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">// 反序列化需要无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、Test"><a href="#5、Test" class="headerlink" title="5、Test"></a>5、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter14ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RedisTemplate 的泛型默认只能支持 &lt;String, String&gt;</span></span><br><span class="line"><span class="comment">     *     如果你写别的泛型如 &lt;String, Object&gt;，它会提示你 Could not autowire.</span></span><br><span class="line"><span class="comment">     *     所以，我们才需要自定义一个能存储其他类型的模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Serializable&gt; serializableRedisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试线程安全（模拟10000并发）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadSecurity</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 该闩锁主要用于使main线程处于等待状态，防止提前关闭redis连接</span></span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 拦住所有线程，等计数为 0 时，同时释放</span></span><br><span class="line">        CountDownLatch concurrentLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10000</span>);</span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10000</span>).forEach(i -&gt;</span><br><span class="line">                executorService.execute(() -&gt; &#123;</span><br><span class="line">                    concurrentLatch.countDown();</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        concurrentLatch.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Thread thread = Thread.currentThread();</span><br><span class="line">                    log.info(<span class="string">"【thread】 = &#123;&#125;"</span>, thread.getName());</span><br><span class="line">                    stringRedisTemplate.opsForValue().increment(<span class="string">"fatal"</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使当前线程等待直到闩锁计数为零，除非线程被中断。</span></span><br><span class="line">        latch.await();</span><br><span class="line">        String value = stringRedisTemplate.opsForValue().get(<span class="string">"fatal"</span>);</span><br><span class="line">        log.info(<span class="string">"【fatal】 = &#123;&#125;"</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模板 -&gt; StringRedisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        String key = <span class="string">"name"</span>;</span><br><span class="line">        ops.set(key, <span class="string">"米彩"</span>);</span><br><span class="line">        String name = ops.get(key);</span><br><span class="line">        log.info(<span class="string">"测试模板 -&gt; StringRedisTemplate 【字符串缓存结果】 = &#123;&#125;"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试默认模板 -&gt; RedisTemplate&lt;String, String&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefaultRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">        String key = <span class="string">"name"</span>;</span><br><span class="line">        ops.set(key, <span class="string">"米琪"</span>);</span><br><span class="line">        String name = ops.get(key);</span><br><span class="line">        log.info(<span class="string">"测试默认模板 -&gt; RedisTemplate&lt;String, String&gt; 【字符串缓存结果】 = &#123;&#125;"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自定义模板 -&gt; RedisTemplate&lt;String, Serializable&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, Serializable&gt; ops = serializableRedisTemplate.opsForValue();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1l</span>, <span class="string">"米彩"</span>, <span class="string">"18"</span>);</span><br><span class="line">        String key = <span class="string">"fatal:user"</span>;</span><br><span class="line">        ops.set(key, user);</span><br><span class="line">        User result = (User)ops.get(key);</span><br><span class="line">        log.info(<span class="string">"测试自定义模板 -&gt; RedisTemplate&lt;String, Serializable&gt;【对象缓存结果】 = &#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、控制台"><a href="#6、控制台" class="headerlink" title="6、控制台"></a>6、控制台</h2><ol><li><p><code>测试模板 -&gt; StringRedisTemplate</code></p><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1560678030661.png" alt="1560678030661"></p></li><li><p><code>测试默认模板 -&gt; RedisTemplate&lt;String, String&gt;</code></p><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1560678101531.png" alt="1560678101531"></p></li><li><p><code>测试自定义模板 -&gt; RedisTemplate&lt;String, Serializable&gt;</code></p><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1560678205019.png" alt="1560678205019"></p></li></ol><h2 id="Redis其它操作方式"><a href="#Redis其它操作方式" class="headerlink" title="Redis其它操作方式"></a>Redis其它操作方式</h2><p>下列的就是<code>Redis</code>其它类型所对应的操作方式</p><ul><li><strong>opsForValue：</strong> 对应 String（字符串）</li><li><strong>opsForZSet：</strong> 对应 ZSet（有序集合）</li><li><strong>opsForHash：</strong> 对应 Hash（哈希）</li><li><strong>opsForList：</strong> 对应 List（列表）</li><li><strong>opsForSet：</strong> 对应 Set（集合）</li><li><strong>opsForGeo：</strong> 对应 GEO（地理位置）</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/reference/html/#new-in-2.0.0" target="_blank" rel="noopener">spring-data-redis文档</a><br><a href="https://redis.io/documentation" target="_blank" rel="noopener">Redis 文档</a><br><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">Redis 中文文档</a><br><a href="https://blog.battcn.com/2018/05/11/springboot/v2-nosql-redis/" target="_blank" rel="noopener">一起来学SpringBoot | 第九篇：整合Lettuce Redis</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>如果少 <strong>spring-boot-starter-web</strong> 依赖，会报错</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Caused</span> <span class="attr">by:</span> <span class="string">java.lang.ClassNotFoundException:</span> <span class="string">com.fasterxml.jackson.databind.JsonSerializer</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1539417560095.png" alt="1539417560095"></p></li><li><p>如果少 <strong>commons-pool2</strong> 依赖，会报错</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Caused</span> <span class="attr">by:</span> <span class="string">java.lang.ClassNotFoundException:</span> <span class="string">org.apache.commons.pool2.impl.GenericObjectPoolConfig</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1539417633847.png" alt="1539417633847"></p></li><li><p>反序列化的时候，实体类必须含有 <strong>无参构造方法</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Caused</span> <span class="attr">by:</span> <span class="string">com.fasterxml.jackson.databind.exc.InvalidDefinitionException:</span> <span class="string">Cannot</span> <span class="string">construct</span> <span class="string">instance</span> <span class="string">of</span> <span class="string">`com.fatal.entity.User`</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合Lettuce Redis/1539417822756.png" alt="1539417822756"></p></li><li><p>序列化</p><p><strong>1、序列化是干什么的？</strong><br>​       简单说就是为了保存在内存中的各种对象的 <strong>状态</strong> 而非行为（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是 <strong>序列化</strong> 。</p><p><strong>2、什么情况下需要序列化</strong><br>​    a）当你想把的内存中的对象状态保存到一个文件的时候；<br>​    b）当你想用套接字在 <strong>网络上传送对象</strong> 的时候；<br>​    c）当你想通过 <strong>RMI 传输对象</strong> 的时候；</p><p><strong>3、相关注意事项</strong><br>​    a）序列化时，只对对象的状态进行保存，而不管对象的方法；<br>​    b）当一个父类实现序列化，子类自动实现序列化，不需要显式实现 <strong>Serializable接口</strong> ；<br>​    c）当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化。</p></li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter14" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter14</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习 唐亚峰 前辈的经验"></a>学习 <a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十三篇：整合 Jedis Redis</title>
      <link href="/2018/10/13/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Jedis%20Redis/"/>
      <url>/2018/10/13/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Jedis%20Redis/</url>
      
        <content type="html"><![CDATA[<p>​        要想在 <strong>Java</strong> 中连接 <strong>Redis</strong>，并进行操作，可以用 <strong>Spring Data Redis</strong>，它是由 <strong>Spring</strong> 集成的，一种是官方推荐的 <strong>Jedis</strong>，<strong>支持集群</strong>，其他功能差不多一样。这篇笔记记录如何整合<code>单机版</code>的<strong>Jedis</strong></p><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>jedis：2.9.0</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jedis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">10000</span><span class="string">ms</span></span><br></pre></td></tr></table></figure><h2 id="3、config"><a href="#3、config" class="headerlink" title="3、config"></a>3、config</h2><blockquote><p>配置 JedisPool（用于单机版） 资源池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jedis 配置类</span></span><br><span class="line"><span class="comment"> * 单机版使用JedisPool</span></span><br><span class="line"><span class="comment"> * 集群版使用JedisCluster</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/13 0013 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisProperties properties;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JedisPool资源池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxIdle(properties.getJedis().getPool().getMaxIdle());</span><br><span class="line">        config.setMaxTotal(properties.getJedis().getPool().getMaxActive());</span><br><span class="line">        config.setMaxWaitMillis(properties.getJedis().getPool().getMaxWait().toMillis());</span><br><span class="line">        JedisPool pool = <span class="keyword">new</span> JedisPool(config,</span><br><span class="line">                properties.getHost(),</span><br><span class="line">                properties.getPort(),</span><br><span class="line">                (<span class="keyword">int</span>)properties.getTimeout().toMillis(),</span><br><span class="line">                properties.getPassword());</span><br><span class="line">        <span class="keyword">return</span> pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Test"><a href="#4、Test" class="headerlink" title="4、Test"></a>4、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/13 0013 14:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从资源池拿jedis连接实例</span></span><br><span class="line">        <span class="keyword">this</span>.jedis = pool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.set(<span class="string">"name"</span>, <span class="string">"米彩"</span>);</span><br><span class="line">        jedis.set(<span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">        log.info(<span class="string">"【name】 = &#123;&#125;"</span>, jedis.get(<span class="string">"name"</span>));</span><br><span class="line">        log.info(<span class="string">"【age】 = &#123;&#125;"</span>, jedis.get(<span class="string">"age"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、控制台"><a href="#5、控制台" class="headerlink" title="5、控制台"></a>5、控制台</h2><p><img src="/images/SpringBoot2/SpringBoot整合Jedis Redis/1539412753299.png" alt="1539412753299"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>单机版使用 <strong>JedisPool</strong></li><li>集群版使用 <strong>JedisCluster</strong></li></ul><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter13" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter13</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十二篇：整合MongoDB</title>
      <link href="/2018/10/10/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88MongoDB/"/>
      <url>/2018/10/10/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88MongoDB/</url>
      
        <content type="html"><![CDATA[<p>用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志成倍增加。我们如果需要对这些用户数据进行挖掘，那么 <code>SQL 数据库</code>已经不适合这些应用了，<code>NoSQL 数据库</code>则可以用户超大规模数据的存储，<code>MongoDB</code> 就是 <code>NoSQL</code> 的其中一种。<code>SpringData</code> 已经集成了很多技术，也包含了 <code>MongoDB</code>，这篇笔记就以整合 <code>SpringData MongoDB</code> 为例。</p><p>[TOC]</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p><code>MongoDB</code> 是由 <code>C++ 语言</code>编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。 <code>MongoDB</code> 旨在 WEB 应用提供可扩展的<strong>高性能数据库解决方案</strong>。<code>MongoDB</code> 将数据存储为一个文档，数据结构由键值对（key =&gt; value）组成。<code>MongoDB</code> 文档类似于 <code>JSON</code> 对象，字段值可以包含其他文档，数组以及文档数组。</p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565426843793.png" alt="1565426843793"></p><h2 id="SpringData-MongoDB"><a href="#SpringData-MongoDB" class="headerlink" title="SpringData MongoDB"></a>SpringData MongoDB</h2><p>由于 <code>SpringData MongoDB</code> 和 <code>SpringData JPA</code> 都属于 <code>SpringData</code> 系列，所以他没实现了 <code>SpringData</code> 同一套规范，在操作上有些非常相似。例如：继承 <code>MongoRepository&lt;T, ID&gt;</code>就会有一套crud 自动生成了。开箱即用~~</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>spring-boot-starter-data-mongodb：2.0.10.RELEASE</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为了控制打印Json格式数据方便查看 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line">      <span class="comment"># 默认uri`mongodb://localhost:27017/test`</span></span><br><span class="line">      <span class="comment"># 数据库有用户名和密码可参考：mongodb://name:password@localhost:27017/db</span></span><br><span class="line">      <span class="comment">#      uri: mongodb://fatal:123456@localhost:27017/test</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">mongodb://localhost:27017/test</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="3、enums"><a href="#3、enums" class="headerlink" title="3、enums"></a>3、enums</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 9:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> OperationEnum &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="string">"success"</span>, <span class="string">"成功"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL(<span class="string">"fail"</span>, <span class="string">"失败"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    OperationEnum(String code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、utils"><a href="#4、utils" class="headerlink" title="4、utils"></a>4、utils</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.fatal.utils;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Fatal</span><br><span class="line"> * @date 2019/8/9 0009 22:47</span><br><span class="line"> */</span><br><span class="line">public class JsonUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 控制台输出Json格式的对象</span><br><span class="line">     * @param object</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String toJson(Object object) &#123;</span><br><span class="line">        GsonBuilder gsonBuilder = new GsonBuilder();</span><br><span class="line">        gsonBuilder.setPrettyPrinting();</span><br><span class="line">        Gson gson = gsonBuilder.create();</span><br><span class="line">        return gson.toJson(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、entity"><a href="#5、entity" class="headerlink" title="5、entity"></a>5、entity</h2><h3 id="Customer"><a href="#Customer" class="headerlink" title="Customer"></a><code>Customer</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Customer 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 8:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 在类上加上`SpringData Mongodb 的 <span class="doctag">@Document</span>`，可以更改该集合的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该 id 主要供 mongodb 内部使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Address"><a href="#Address" class="headerlink" title="Address"></a><code>Address</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 17:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"address"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该 id 主要供 mongodb 内部使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Field</span> 用于与数据库的字段做映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field</span>(value = <span class="string">"customer_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、dto"><a href="#6、dto" class="headerlink" title="6、dto"></a>6、dto</h2><h3 id="CustomerDTO"><a href="#CustomerDTO" class="headerlink" title="CustomerDTO"></a><code>CustomerDTO</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Customer;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Customer 数据传输对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CustomerDTO <span class="title">of</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        CustomerDTO customerDTO = <span class="keyword">new</span> CustomerDTO();</span><br><span class="line">        BeanUtils.copyProperties(customer, customerDTO);</span><br><span class="line">        <span class="keyword">return</span> customerDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CustomerDetailDTO"><a href="#CustomerDetailDTO" class="headerlink" title="CustomerDetailDTO"></a><code>CustomerDetailDTO</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `客户详细信息`数据传输对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 18:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDetailDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressDTO&gt; addressList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AddressDTO"><a href="#AddressDTO" class="headerlink" title="AddressDTO"></a><code>AddressDTO</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Address 数据传输对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 18:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(value = <span class="string">"customer_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Test"><a href="#7、Test" class="headerlink" title="7、Test"></a>7、Test</h2><h3 id="SingleTableTests"><a href="#SingleTableTests" class="headerlink" title="SingleTableTests"></a><code>SingleTableTests</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.CustomerRepository;</span><br><span class="line"><span class="keyword">import</span> com.fatal.dto.CustomerDTO;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Customer;</span><br><span class="line"><span class="keyword">import</span> com.fatal.enums.OperationEnum;</span><br><span class="line"><span class="keyword">import</span> com.fatal.utils.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Example;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 12:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTableTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        customer = <span class="keyword">new</span> Customer()</span><br><span class="line">                .setName(<span class="string">"fatal"</span>)</span><br><span class="line">                .setAge(<span class="number">18</span>)</span><br><span class="line">                .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                .setBirthday(<span class="keyword">new</span> Date())</span><br><span class="line">                .setHobby(<span class="string">"swim"</span>);</span><br><span class="line">        customers = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"micai"</span>)</span><br><span class="line">                        .setAge(<span class="number">18</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date())</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>),</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"xiaomi"</span>)</span><br><span class="line">                        .setAge(<span class="number">22</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">1000</span>))</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>),</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"miqi"</span>)</span><br><span class="line">                        .setAge(<span class="number">18</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">2000</span>))</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer save = repository.save(customer);</span><br><span class="line">        log.info(<span class="string">"【新增 Customer】 [status = &#123;&#125;, entity = &#123;&#125;]"</span>,</span><br><span class="line">                OperationEnum.SUCCESS.getCode(), save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = repository.findById(<span class="string">"5d4e8ddbe429c6d1303ad1ad"</span>)</span><br><span class="line">                .orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br><span class="line">        Customer save = customer.setHobby(<span class="string">"eat"</span>);</span><br><span class="line">        repository.save(customer);</span><br><span class="line">        log.info(<span class="string">"【更新 Customer】 [status = &#123;&#125;, entity = &#123;&#125;]"</span>,</span><br><span class="line">                OperationEnum.SUCCESS.getCode(), save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = repository.findById(<span class="string">"5d4e8ddbe429c6d1303ad1ad"</span>)</span><br><span class="line">                .orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br><span class="line">        log.info(<span class="string">"【查询 Customer】 findById [status = &#123;&#125;, entity = &#123;&#125;]"</span>,</span><br><span class="line">                OperationEnum.SUCCESS.getCode(), customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByIdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repository.deleteById(<span class="string">"5d4e8ddbe429c6d1303ad1ad"</span>);</span><br><span class="line">        log.info(<span class="string">"【删除 Customer】 [status = &#123;&#125;, id = &#123;&#125;]"</span>,</span><br><span class="line">                OperationEnum.SUCCESS.getCode(), <span class="string">"5d4e8ddbe429c6d1303ad1ad"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAllTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repository.saveAll(customers).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCustomerByNameTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Customer customer = repository.findCustomerByName(<span class="string">"micai"</span>);</span><br><span class="line">        log.info(<span class="string">"【查询 Customer】 findCustomerByName [status = &#123;&#125;, entity = &#123;&#125;]"</span>,</span><br><span class="line">                OperationEnum.SUCCESS.getCode(), customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByAgeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repository.findAllByAge(<span class="number">18</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByExampleTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Example&lt;Customer&gt; example = Example.of(<span class="keyword">new</span> Customer().setAge(<span class="number">18</span>).setName(<span class="string">"micai"</span>));</span><br><span class="line">        repository.findAll(example).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Example&lt;Customer&gt; example = Example.of(<span class="keyword">new</span> Customer().setHobby(<span class="string">"swim eat"</span>));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 先根据年龄升序，年龄相同的根据生日降序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, Sort.by(</span><br><span class="line">                <span class="keyword">new</span> Sort.Order(Sort.Direction.ASC, <span class="string">"age"</span>),</span><br><span class="line">                <span class="keyword">new</span> Sort.Order(Sort.Direction.DESC, <span class="string">"birthday"</span>)</span><br><span class="line">        ));</span><br><span class="line">        Page&lt;Customer&gt; page = repository.findAll(example, pageRequest);</span><br><span class="line">        Page&lt;CustomerDTO&gt; dtoPage = page.map(CustomerDTO::of);</span><br><span class="line">        System.out.println(JsonUtil.toJson(dtoPage));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MongoTemplateTests"><a href="#MongoTemplateTests" class="headerlink" title="MongoTemplateTests"></a><code>MongoTemplateTests</code></h3><p>这套 API 有点不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Customer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 13:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoTemplateTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Customer&gt; customers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * <span class="doctag">TODO:</span> 这里的id自己手动添加，为了后面聚合测试做区分。</span></span><br><span class="line"><span class="comment">         *  如果使用了数据库默认生成的id，会因为它是ObjectId("...")修饰了，而无法与外键值建立关联。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        customer = <span class="keyword">new</span> Customer()</span><br><span class="line">                .setId(<span class="string">"137063"</span>)</span><br><span class="line">                .setName(<span class="string">"fatal"</span>)</span><br><span class="line">                .setAge(<span class="number">18</span>)</span><br><span class="line">                .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                .setBirthday(<span class="keyword">new</span> Date())</span><br><span class="line">                .setHobby(<span class="string">"swim"</span>);</span><br><span class="line">        customers = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"micai"</span>)</span><br><span class="line">                        .setAge(<span class="number">18</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date())</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>),</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"xiaomi"</span>)</span><br><span class="line">                        .setAge(<span class="number">22</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">1000</span>))</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>),</span><br><span class="line">                <span class="keyword">new</span> Customer()</span><br><span class="line">                        .setName(<span class="string">"miqi"</span>)</span><br><span class="line">                        .setAge(<span class="number">18</span>)</span><br><span class="line">                        .setPhone(<span class="string">"13750411111"</span>)</span><br><span class="line">                        .setBirthday(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">2000</span>))</span><br><span class="line">                        .setHobby(<span class="string">"swim eat"</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mongoTemplate.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"id"</span>).is(<span class="string">"137063"</span>));</span><br><span class="line">        Update update = <span class="keyword">new</span> Update().set(<span class="string">"name"</span>, <span class="string">"fatal1"</span>);</span><br><span class="line">        mongoTemplate.updateFirst(query, update, Customer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByQueryTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">"id"</span>).is(<span class="string">"137063"</span>)</span><br><span class="line">            .and(<span class="string">"name"</span>).is(<span class="string">"fatal1"</span>));</span><br><span class="line">        List&lt;Customer&gt; customers = mongoTemplate.find(query, Customer.class);</span><br><span class="line">        customers.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAllTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mongoTemplate.insertAll(customers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MultiTableTests"><a href="#MultiTableTests" class="headerlink" title="MultiTableTests"></a><code>MultiTableTests</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dto.CustomerDetailDTO;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.fatal.utils.JsonUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.Aggregation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.LookupOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.aggregation.MatchOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9 0009 12:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiTableTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAddressTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 与手动添加id的Customer关联</span></span><br><span class="line">        Address address1 = <span class="keyword">new</span> Address()</span><br><span class="line">                .setCustomerId(<span class="string">"137063"</span>)</span><br><span class="line">                .setAddress(<span class="string">"shantou"</span>);</span><br><span class="line">        Address address2 = <span class="keyword">new</span> Address()</span><br><span class="line">                .setCustomerId(<span class="string">"137063"</span>)</span><br><span class="line">                .setAddress(<span class="string">"guangzhou"</span>);</span><br><span class="line">        <span class="comment">// 与自动生成id的Customer关联</span></span><br><span class="line">        Address address3 = <span class="keyword">new</span> Address()</span><br><span class="line">                .setCustomerId(<span class="string">"5d4e908fe429c66df040ae69"</span>)</span><br><span class="line">                .setAddress(<span class="string">"foshan"</span>);</span><br><span class="line">        Address address4 = <span class="keyword">new</span> Address()</span><br><span class="line">                .setCustomerId(<span class="string">"5d4e908fe429c66df040ae69"</span>)</span><br><span class="line">                .setAddress(<span class="string">"hangzhou"</span>);</span><br><span class="line">        mongoTemplate.insertAll(Arrays.asList(address1, address2, address3, address4));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllAddressTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Address&gt; addressList = mongoTemplate.findAll(Address.class);</span><br><span class="line">        addressList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> public static LookupOperation lookup(String from, String localField, String foreignField, String as)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span></span></span><br><span class="line"><span class="comment">     *  from: 从表</span></span><br><span class="line"><span class="comment">     *  localField: 主表被关联的键（如果关联的是主键，必须写 “_id”，下划线不能省略）</span></span><br><span class="line"><span class="comment">     *  foreignField: 从表外键</span></span><br><span class="line"><span class="comment">     *  as: 从表集合名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 从表关联主表时，如果主表的id是自动生成的，那么它的值为：ObjectId("...")，这时通过 $lookup 就不能完成关联了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findMultiply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MatchOperation match = Aggregation.match(Criteria.where(<span class="string">"age"</span>).is(<span class="number">18</span>));</span><br><span class="line">        <span class="comment">// 关联操作</span></span><br><span class="line">        LookupOperation lookup = Aggregation.lookup(<span class="string">"address"</span>, <span class="string">"_id"</span>, <span class="string">"customer_id"</span>, <span class="string">"addressList"</span>);</span><br><span class="line">        Aggregation aggregation = Aggregation.newAggregation(lookup, match);</span><br><span class="line">        List&lt;CustomerDetailDTO&gt; customerDetail = mongoTemplate.aggregate(aggregation, <span class="string">"customer"</span>, CustomerDetailDTO.class).getMappedResults();</span><br><span class="line">        System.out.println(JsonUtil.toJson(customerDetail));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h2><h3 id="单表测试"><a href="#单表测试" class="headerlink" title="单表测试"></a>单表测试</h3><h4 id="MongoRepository-lt-T-ID-gt"><a href="#MongoRepository-lt-T-ID-gt" class="headerlink" title="MongoRepository&lt;T, ID&gt;"></a><code>MongoRepository&lt;T, ID&gt;</code></h4><p><strong>1、</strong>访问 <code>SingleTableTests.saveTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429315242.png" alt="1565429315242"></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429367173.png" alt="1565429367173"></p><p><strong>2、</strong>访问 <code>SingleTableTests.updateTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429450536.png" alt="1565429450536"></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429608535.png" alt="1565429608535"></p><p><strong>3、</strong>访问 <code>SingleTableTests.findByIdTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429796050.png" alt="1565429796050"></p><p><strong>4、</strong>访问 <code>SingleTableTests.deleteByIdTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429831290.png" alt="1565429831290"></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429845860.png" alt="1565429845860"></p><p><strong>5、</strong>访问 <code>SingleTableTests.saveAllTest()</code></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565429979998.png" alt="1565429979998"></p><p><strong>6、</strong>访问 <code>SingleTableTests.findCustomerByNameTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565430029663.png" alt="1565430029663"></p><p><strong>7、</strong>访问 <code>SingleTableTests.findAllByAgeTest()</code></p><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565430162737.png" alt="1565430162737"></p><p><strong>8、</strong>访问 <code>SingleTableTests.findAllByExampleTest()</code></p><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565430187170.png" alt="1565430187170"></p><p><strong>9、</strong>访问 <code>SingleTableTests.pageTest()</code></p><p>控制台</p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565430250266.png" alt="1565430250266"></p><h4 id="MongoTemplate"><a href="#MongoTemplate" class="headerlink" title="MongoTemplate"></a><code>MongoTemplate</code></h4><p><strong>1、</strong>访问 <code>MongoTemplateTests.saveTest()</code></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565431018546.png" alt="1565431018546"></p><p><strong>2、</strong>访问 <code>MongoTemplateTests.updateById()</code></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565431261027.png" alt="1565431261027"></p><p><strong>3、</strong>访问 <code>MongoTemplateTests.findByQueryTest()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565431369194.png" alt="1565431369194"></p><p><strong>4、</strong>访问 <code>MongoTemplateTests.saveAllTest()</code></p><p><strong>RoBo 3T</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565431457885.png" alt="1565431457885"></p><h3 id="多表测试"><a href="#多表测试" class="headerlink" title="多表测试"></a>多表测试</h3><p>访问 <code>MultiTableTests.findMultiply()</code></p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合MongoDB/1565432140046.png" alt="1565432140046"></p><p>你可以把这个测试方法的聚合操作 <code>localField</code> 改为<code>id</code>（去掉下划线），你会发现关联不上了，所以 <strong><code>lookup</code> </strong> 中 <strong><code>Field</code></strong> 对数据库字段的名称有很高要求，<strong>下划线不能省略</strong>（与 Field 有关的都不能省略）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter12" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter12</a></p><h4 id="学习-方志朋-前辈的经验"><a href="#学习-方志朋-前辈的经验" class="headerlink" title="学习 方志朋 前辈的经验"></a>学习 <a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十一篇：开启声明式事务</title>
      <link href="/2018/10/06/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%EF%BC%9A%E5%BC%80%E5%90%AF%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/10/06/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%EF%BC%9A%E5%BC%80%E5%90%AF%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>​         SpringBoot 开启事务很简单，只需要一个注解<code>@Transactional</code> 就可以了。因为在 SpringBoot 中已经默认对jpa、jdbc、mybatis 开启了事务，引入它们依赖的时候，事务就默认开启。当然，如果你需要用其他的 orm，比如 beatlsql，就需要自己配置相关的事物管理器。</p><p><strong>注意</strong>：Spring Boot 2.0使用data Jpa时。创建表默认使用的是 <code>MyISAM</code>引擎，<code>MyISAM</code>引擎是不支持事务的。所以把数据库的表改为 <code>InnoDB</code> 引擎就行了。可以在 <strong>全局配置文件</strong> 中指定引擎</p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>以第八篇文章的代码为例子，即 springboot 整合 mybatis ，第八篇文章是基于注解来实现 mybatis 的数据访问层，这篇文章基于 xml 的来实现，并开启声明式事务。</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot: <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性 allowMultiQueries：设置为true后，数据库那边才允许你批量更新。编码属性设置了存储数据到数据库才不会是乱码</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter11?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=true</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span>  <span class="comment"># 注意：一定要对应 mapper 映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fatal.entity</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 可以自控制台上输出 sql 语句</span></span><br></pre></td></tr></table></figure><h2 id="3、sql"><a href="#3、sql" class="headerlink" title="3、sql"></a>3、sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create table `account`</span></span><br><span class="line"><span class="comment"># DROP TABLE `account` IF EXISTS</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`money`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'aaa'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'bbb'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`account`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'ccc'</span>, <span class="string">'100'</span>);</span><br></pre></td></tr></table></figure><h2 id="4、resources"><a href="#4、resources" class="headerlink" title="4、resources"></a>4、resources</h2><blockquote><p>在 resources 下新建mapper 文件夹，在 mapper 下新建UserMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fatal.mapper.AccountMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">        UPDATE account</span><br><span class="line">        SET money = #&#123;money&#125;</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、entity"><a href="#5、entity" class="headerlink" title="5、entity"></a>5、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/19 0019 20:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、mapper"><a href="#6、mapper" class="headerlink" title="6、mapper"></a>6、mapper</h2><p>AccountMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/19 0019 21:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">update</span><span class="params">(@Param(<span class="string">"money"</span>)</span> Double money, @<span class="title">Param</span><span class="params">(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、service"><a href="#7、service" class="headerlink" title="7、service"></a>7、service</h2><h3 id="IAccountService"><a href="#IAccountService" class="headerlink" title="IAccountService"></a><code>IAccountService</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Account 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/19 0019 21:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AccountServiceImpl"><a href="#AccountServiceImpl" class="headerlink" title="AccountServiceImpl"></a><code>AccountServiceImpl</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Account 服务实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/19 0019 21:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;  <span class="comment">// 这里会报错，但不影响正常使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        accountMapper.update(<span class="number">90</span>d, <span class="number">1</span>);<span class="comment">//用户1减10块 用户2加10块</span></span><br><span class="line">        Integer i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        accountMapper.update(<span class="number">110</span>d, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Test"><a href="#8、Test" class="headerlink" title="8、Test"></a>8、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/8/19 0019 21:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IAccountServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService IAccountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IAccountService.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Transactional</strong>，声明事务，并设计一个转账方法，用户1减10块，用户2加10块。在用户1减10 ，之后，抛出异常，即用户2加10块钱不能执行，当加注解@Transactional之后，两个人的钱都没有增减。当不加@Transactional，用户1减了10，用户2没有增加，即没有操作用户2 的数据。可见@Transactional注解开启了事务。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>2018/11/5 </p><pre><code>今天，是我测试 **@Async 异步事务**的第三天了。在这次测试中最大的收获就是解决了异步方法抛异常，事务方法和它调用的异步方法两个事务都回滚的问题。其中有个知识点很重要，就是 @Transactional 标注的方法中，如何手动回滚事务。</code></pre><p>解决方法：一句即可 <strong>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</strong>  (一般手动回滚会放在 catch 代码块中来用。)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        <strong>SpringBoot 开启事务</strong> 很简单，只需要加一行注解就可以了，前提你用的是 <strong>jdbctemplate, jpa, mybatis</strong>，这种常见的orm。</p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter11" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter11</a></p><h4 id="学习-方志朋-前辈的经验"><a href="#学习-方志朋-前辈的经验" class="headerlink" title="学习 方志朋 前辈的经验"></a>学习 <a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第十篇：Mybatis代码生成器</title>
      <link href="/2018/10/05/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E7%AF%87%EF%BC%9AMybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/10/05/SpringBoot2%20%20%E7%AC%AC%E5%8D%81%E7%AF%87%EF%BC%9AMybatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SpringBoot 2.0 中如何使用代码生成器</p></blockquote><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>generator：1.3.5</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/1538728808890.png" alt="1538728808890"></p><h2 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性  allowMultiQueries：设置为true后，数据库那边才允许你批量更新。编码属性设置了存储数据到数据库才不会是乱码</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter10?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line">      <span class="comment"># 表示连接池的用户定义名称，主要显示在日志记录和JMX管理控制台中，以标识池和池配置。</span></span><br><span class="line"><span class="attr">      pool-name:</span> <span class="string">HikariPool</span></span><br><span class="line">      <span class="comment"># 控制客户端（即您）等待池中连接的最大毫秒数。如果在没有连接可用的情况下超过此时间，则将抛出SQLException。最低可接受的连接超时为250毫秒。 默认值：30000（30秒）</span></span><br><span class="line"><span class="attr">      connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># 控制允许连接在池中空闲的最长时间。默认值：600000（10分钟）</span></span><br><span class="line"><span class="attr">      idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="comment"># 控制池中连接的最长生命周期。默认值：1800000（30分钟）</span></span><br><span class="line"><span class="attr">      max-lifetime:</span> <span class="number">1800000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span>  <span class="comment"># 注意：一定要对应 mapper 映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fatal.entity</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 可以自控制台上输出 sql 语句</span></span><br></pre></td></tr></table></figure><h2 id="4、sql"><a href="#4、sql" class="headerlink" title="4、sql"></a>4、sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1000</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="5、使用mybatis-generator-自动生成代码"><a href="#5、使用mybatis-generator-自动生成代码" class="headerlink" title="5、使用mybatis generator 自动生成代码"></a>5、使用mybatis generator 自动生成代码</h2><ul><li>往项目中添加<code>generatorConfig.xml</code> 文件。可以把下面的配置复制下去改</li></ul><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/12212121212121.jpg" alt="12212121212121"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"E:\mysql\lib\mysql-connector-java-5.1.46.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1/chapter10"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.fatal.entity"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.fatal.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果上面的 “<a href="http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;" target="_blank" rel="noopener">http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</a> 报红线</p><p>解决方式如下：FIle-&gt;Setting-&gt;Languages&amp;Frameworks-&gt;Schemas and DTDs </p></blockquote><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/123515153451435.jpg" alt="123515153451435"></p><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/12361436413616143.jpg" alt="12361436413616143"></p><ul><li>点击run-Edit Configurations</li></ul><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/1325123521352315.jpg" alt="1325123521352315"></p><ul><li><p>添加配置</p><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/20170816144723793.png" alt="20170816144723793"></p></li></ul><ul><li>运行</li></ul><p><strong>注意！！！同一张表一定不要运行多次，因为mapper的映射文件中会生成多次的代码，导致报错，==切记==</strong> </p><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/20170816144801010.png" alt="20170816144801010"></p><p>最后生成的文件以及结构：</p><p><img src="/images/SpringBoot2/SpringBoot与Mybatis代码生成器/1538730622285.png" alt="1538730622285"></p><h2 id="6、生成的文件"><a href="#6、生成的文件" class="headerlink" title="6、生成的文件"></a>6、生成的文件</h2><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a><code>User.java</code></h3><blockquote><p>我用 <strong>@Data</strong> 方法把生成的 <strong>getset</strong> 替代了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a><code>UserMapper.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(User record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a><code>UserMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fatal.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">    id, username, password, phone</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">    insert into user (id, username, password, </span><br><span class="line">      phone)</span><br><span class="line">    values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, </span><br><span class="line">      #&#123;phone,jdbcType=VARCHAR&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">    insert into user</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">        id,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">        username,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">        password,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">        phone,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">        #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">        #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">        #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">        #&#123;phone,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">        username = #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">        password = #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">        phone = #&#123;phone,jdbcType=VARCHAR&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    set username = #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">      password = #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">      phone = #&#123;phone,jdbcType=VARCHAR&#125;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、启动类添加Mapper扫描"><a href="#7、启动类添加Mapper扫描" class="headerlink" title="7、启动类添加Mapper扫描"></a>7、启动类添加Mapper扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.fatal.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter10Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter10Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Test"><a href="#8、Test" class="headerlink" title="8、Test"></a>8、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/5 0005 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> record = mapper.deleteByPrimaryKey(<span class="number">1001</span>);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"123"</span>).setPhone(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = mapper.insert(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSelective</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = mapper.insert(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select id, user_name, password, phone from user where id = ?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.selectByPrimaryKey(<span class="number">1000</span>);</span><br><span class="line">        Assert.assertNotEquals(<span class="keyword">null</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Preparing: update user SET user_name = ?, password = ? where id = ?</span></span><br><span class="line"><span class="comment">     * Parameters: 米彩的姐姐(String), 123(String), 1000(Integer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setId(<span class="number">1000</span>).setUsername(<span class="string">"米彩的姐姐"</span>).setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = mapper.updateByPrimaryKeySelective(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Preparing: update user set user_name = ?, password = ?, phone = ? where id = ?</span></span><br><span class="line"><span class="comment">     * Parameters: 米彩的姐姐(String), 123(String), null, 1000(Integer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setId(<span class="number">1000</span>).setUsername(<span class="string">"米彩的姐姐"</span>).setPassword(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = mapper.updateByPrimaryKey(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>, record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter10" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter10</a></p><h3 id="学习-LuisChen-前辈的经验"><a href="#学习-LuisChen-前辈的经验" class="headerlink" title="学习 LuisChen 前辈的经验"></a>学习 <a href="https://blog.csdn.net/winter_chen001" target="_blank" rel="noopener">LuisChen</a> 前辈的经验</h3>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 |第九篇：整合Mybatis通用Mapper和分页插件</title>
      <link href="/2018/10/05/SpringBoot2%20%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Mybatis%E9%80%9A%E7%94%A8Mapper%E5%92%8C%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/10/05/SpringBoot2%20%E7%AC%AC%E4%B9%9D%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Mybatis%E9%80%9A%E7%94%A8Mapper%E5%92%8C%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>​        在上一篇中，我们介绍了<code>Mybatis</code>这款优秀的框架，顺便提及了民间大神开发的两款插件<strong>（通用Mapper、PageHelper）</strong>，从此告别简单CURD代码的编写….</p><p>[TOC]</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><ul><li><strong>GitHub地址：</strong> <a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></li><li><strong>文档地址：</strong><a href="https://gitee.com/free/Mapper/wikis/Home" target="_blank" rel="noopener">https://gitee.com/free/Mapper/wikis/Home</a></li></ul><p>在没有分页插件之前，写一个分页需要两条SQL语句，一条查询一条统计，然后才能计算出页码，这样的代码冗余而又枯燥，更重要的一点是<strong>数据库迁移</strong>，众所周知不同的数据库分页写法是不同的，而<code>Mybatis</code>不同于<code>Hibernate</code>的是它只提供动态SQL和结果集映射。值得庆幸的是，它虽然没有为分页提供良好的解决方案，但却提供了<code>Interceptor</code>以供开发者自己扩展，这也是这款分页插件的由来….</p><h3 id="通用Mapper"><a href="#通用Mapper" class="headerlink" title="通用Mapper"></a>通用Mapper</h3><ul><li><strong>Gitee地址：</strong> <a href="https://gitee.com/free/Mapper" target="_blank" rel="noopener">https://gitee.com/free/Mapper</a></li><li><strong>文档地址：</strong><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></li></ul><p><strong>通用 Mapper 是一个可以实现任意 MyBatis 通用方法的框架</strong>，项目提供了常规的增删改查操作以及 <code>Example</code> 相关的单表操作。通用 Mapper 是为了解决 MyBatis 使用中 90% 的基本操作，使用它可以很方便的进行开发，可以节省开发人员大量的时间，ssm项目一般都会使用它。</p><blockquote><p>mapper-spring-boot-starter</p></blockquote><p><strong>在 starter 的逻辑中，如果你没有使用 @MapperScan 注解，你就需要在你的接口上增加 @Mapper注解，否则 MyBatis 无法判断扫描哪些接口。</strong></p><p>这里的第一种用法没有用 <code>@MapperScan</code> 注解，所以你需要在所有接口上增加 <code>@Mapper</code> 注解。</p><p><strong>注意</strong>：整合<code>通用Mapper</code>的包必须引对。<code>tk.mybatis.spring.annotation.MapperScan</code></p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>pagehelper：1.2.5</li><li>tk.mybatis：2.0.2</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis通用Mapper和分页插件/1538720992484.png" alt="1538720992484"></p><h2 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通用Mapper插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h2><blockquote><p>在 <code>application.yml</code> 文件中分别添加上<strong>数据库、Mybatis、通用Mapper、PageHelper</strong>的属性配置，这里只提供了常见场景的配置，更全的配置可以参考上文所述的<strong>文档</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性 allowMultiQueries：设置为true后，数据库那边才允许你批量更新。编码属性设置了存储数据到数据库才不会是乱码</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter8?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line">      <span class="comment"># 表示连接池的用户定义名称，主要显示在日志记录和JMX管理控制台中，以标识池和池配置。</span></span><br><span class="line"><span class="attr">      pool-name:</span> <span class="string">HikariPool</span></span><br><span class="line">      <span class="comment"># 控制客户端（即您）等待池中连接的最大毫秒数。如果在没有连接可用的情况下超过此时间，则将抛出SQLException。最低可接受的连接超时为250毫秒。 默认值：30000（30秒）</span></span><br><span class="line"><span class="attr">      connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># 控制允许连接在池中空闲的最长时间。默认值：600000（10分钟）</span></span><br><span class="line"><span class="attr">      idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="comment"># 控制池中连接的最长生命周期。默认值：1800000（30分钟）</span></span><br><span class="line"><span class="attr">      max-lifetime:</span> <span class="number">1800000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span>  <span class="comment"># 注意：一定要对应 mapper 映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fatal.entity</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 可以自控制台上输出 sql 语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pagehelper</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helperDialect:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用Mapper</span></span><br><span class="line"><span class="attr">mapper:</span></span><br><span class="line">  <span class="comment"># 主键自增回写方法,默认值MYSQL,详细说明请看文档</span></span><br><span class="line"><span class="attr">  identity:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">  mappers:</span> <span class="string">tk.mybatis.mapper.common.BaseMapper</span></span><br><span class="line">  <span class="comment"># 设置 insert 和 update 中，是否判断字符串类型!=''</span></span><br><span class="line"><span class="attr">  not-empty:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 枚举按简单类型处理</span></span><br><span class="line"><span class="attr">  enum-as-simple-type:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>通用Mapper</p></blockquote><ul><li><strong>mapper.enum-as-simple-type：</strong> 枚举按简单类型处理，如果有枚举字段则需要加上该配置才会做映射</li><li><strong>mapper.not-empty：</strong> 设置以后，会去判断 insert 和 update 中字符串类型 <code>!=&#39;&#39;</code></li></ul><blockquote><p>分页插件</p></blockquote><ul><li><strong>pagehelper.reasonable：</strong> 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。</li><li><strong>support-methods-arguments：</strong> 支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。</li></ul><h2 id="4、sql"><a href="#4、sql" class="headerlink" title="4、sql"></a>4、sql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1003</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> <span class="string">`user`</span>(<span class="string">`userId`</span>,<span class="string">`userName`</span>,<span class="string">`password`</span>,<span class="string">`phone`</span>) <span class="keyword">VALUES</span> (<span class="number">1000</span>,<span class="string">'石原里美'</span>,<span class="string">'123456'</span>,<span class="string">'132123123'</span>);</span><br></pre></td></tr></table></figure><h2 id="5、resources"><a href="#5、resources" class="headerlink" title="5、resources"></a>5、resources</h2><blockquote><p>在 resources 下新建mapper 文件夹，在 mapper 下新建UserMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fatal.mapper.IUserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"BASE_TABLE"</span>&gt;</span></span><br><span class="line">        user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"BASE_COLUMN"</span>&gt;</span></span><br><span class="line">        id,username,password,phone</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BASE_COLUMN"</span>/&gt;</span></span><br><span class="line">        FROM</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BASE_TABLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、entity"><a href="#6、entity" class="headerlink" title="6、entity"></a>6、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与jpa比较（比较易混淆的）</span></span><br><span class="line"><span class="comment"> * 不同点：通用Mapper的<span class="doctag">@GeneratedValue</span>不加默认自增，而JPA的<span class="doctag">@GeneratedValue</span>不加默认需要手动添加id</span></span><br><span class="line"><span class="comment"> * 相同点：都需要加上主键注解<span class="doctag">@Id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span>     <span class="comment">// 使用通用Mapper必须给主键加上注解@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、mapper"><a href="#7、mapper" class="headerlink" title="7、mapper"></a>7、mapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承 BaseMapper&lt;T&gt; 就可以了，是不是有点类似 JpaRepository</span></span><br><span class="line"><span class="comment"> * User 映射接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、service"><a href="#8、service" class="headerlink" title="8、service"></a>8、service</h2><h3 id="IUserService-java"><a href="#IUserService-java" class="headerlink" title="IUserService.java"></a><code>IUserService.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PageInfo&lt;User&gt; <span class="title">pageSearch</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a><code>UserServiceImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.IUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;    <span class="comment">// 这里会报错，但并不会影响</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法中用到了我们开头配置依赖的分页插件 pagehelper</span></span><br><span class="line"><span class="comment">     * 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 开始页数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页显示的数据条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title">pageSearch</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ====================  普通写法   =====================</span></span><br><span class="line">        <span class="comment">// 将参数传进这个方法就可以实现物理分页了，非常简单</span></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        <span class="comment">// 看语句像查询出整个 List，但是底层对其进行了增强，下面语句执行的时候添加了分页条件了</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUsers();</span><br><span class="line">        <span class="comment">// 把查询结果给 PageInfo，它会帮我们取出当前页的数据</span></span><br><span class="line">        PageInfo result = <span class="keyword">new</span> PageInfo(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ====================   lambda写法  =====================</span></span><br><span class="line">        PageInfo&lt;User&gt; pageInfo = PageHelper.startPage(pageNum, pageSize)</span><br><span class="line">                .setOrderBy(<span class="string">"id desc"</span>)</span><br><span class="line"><span class="comment">//                .doSelectPageInfo(() -&gt; this.userMapper.selectAll());</span></span><br><span class="line">                .doSelectPageInfo(userMapper::selectAll);</span><br><span class="line">        <span class="comment">// TODO 分页 + 排序 userMapper::selectAll 这一句就是我们需要写的查询，有了这两款插件无缝切换各种数据库</span></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、controller"><a href="#9、controller" class="headerlink" title="9、controller"></a>9、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加（通用 Mapper 中的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line">        <span class="keyword">return</span> userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询（使用分页插件）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pageSearch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(name = <span class="string">"pageNum"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"1"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"pageSize"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line">        <span class="comment">// 当前页的详细信息</span></span><br><span class="line">        PageInfo&lt;User&gt; data = userService.pageSearch(pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、Application"><a href="#10、Application" class="headerlink" title="10、Application"></a>10、Application</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.fatal.mapper"</span>)     <span class="comment">// 使用通用`Mapper`时，MapperScan 要导`tk`的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter9Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter9Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后访问即可</p><p>GET：<code>http://localhost:8080/user/</code></p><p>查询成功</p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis通用Mapper和分页插件/1538722443017.png" alt="1538722443017"></p><p>POST：<code>http://localhost:8080/user/</code></p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis通用Mapper和分页插件/1538722708928.png" alt="1538722708928"></p><p>添加成功</p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis通用Mapper和分页插件/1538722733746.png" alt="1538722733746"></p><h2 id="11、Tests"><a href="#11、Tests" class="headerlink" title="11、Tests"></a>11、Tests</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.IUserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对mybatis的通用mapper接口进行了几个简单的测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter9ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"micai"</span>).setPassword(<span class="string">"123"</span>).setPhone(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = userMapper.insert(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span> ,record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUsers();</span><br><span class="line">        print(users);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span>,users.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userMapper.selectOne(<span class="keyword">new</span> User().setId(<span class="number">1000</span>));</span><br><span class="line">        Assert.assertNotEquals(<span class="keyword">null</span> ,user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> record = userMapper.updateByPrimaryKeySelective(<span class="keyword">new</span> User().setId(<span class="number">1000</span>).setPassword(<span class="string">"123123123"</span>));</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span> ,record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键更新属性不为null的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userMapper.selectOne(<span class="keyword">new</span> User().setId(<span class="number">1003</span>));</span><br><span class="line">        user.setUsername(<span class="string">"米琪"</span>);</span><br><span class="line">        <span class="keyword">int</span> record = userMapper.updateByPrimaryKey(user);</span><br><span class="line">        Assert.assertNotEquals(<span class="number">0</span> ,record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以测试一下通用Mapper的方法是否好用</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>MapperScan的包必须使用 <strong>tk.mybatis.spring.annotation</strong> 下的</li><li>实体类的主键字段必须加上注解 <strong>@Id</strong></li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方文档</a></p></li><li><p><a href="https://gitee.com/free/Mapper/wikis/1.1-java?parent=1.integration" target="_blank" rel="noopener">通用Mapper文档（Gitee）</a></p></li><li><p><a href="https://github.com/abel533/Mapper/wiki" target="_blank" rel="noopener">通用Mapper文档（GitHub）</a></p></li><li><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">分页插件文档</a></p></li><li><p><a href="https://blog.battcn.com/2018/05/10/springboot/v2-orm-mybatis-plugin/" target="_blank" rel="noopener">一起来学SpringBoot | 第八篇：通用Mapper与分页插件的集成</a></p></li><li><p><a href="https://www.baidu.com/link?url=VPtAdTNg82pQiZWFE2t5_gj4VyTzmxSYvh-7tfB7a_L9XAfIqjEz-EQsPnfwVllL&amp;wd=&amp;eqid=986d99650014b84f000000065d351c1f" target="_blank" rel="noopener">MyBatis 通用 Mapper</a></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter9" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter9</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习 唐亚峰  前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a>  前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 |第八篇：整合Mybatis</title>
      <link href="/2018/10/05/SpringBoot2%20%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Mybatis/"/>
      <url>/2018/10/05/SpringBoot2%20%E7%AC%AC%E5%85%AB%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Mybatis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>springboot终于迎来了2.0版本，很多新的特性让springboot更加强大，之前<a href="https://blog.csdn.net/winter_chen001/article/details/77249029" target="_blank" rel="noopener">使用1.5.6版本整合了Mybatis</a>，现在2.0版本就已经不适用了，所以，在摸索中搭建了2.0版本整合Mybatis</p></blockquote><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>mybatis：1.3.2</li><li>pagehelper：1.2.5</li></ul><h3 id="额外功能："><a href="#额外功能：" class="headerlink" title="额外功能："></a>额外功能：</h3><ul><li>PageHelper 分页插件</li></ul><h2 id="开始搭建："><a href="#开始搭建：" class="headerlink" title="开始搭建："></a>开始搭建：</h2><h3 id="1、创建项目："><a href="#1、创建项目：" class="headerlink" title="1、创建项目："></a>1、创建项目：</h3><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538643571840.png" alt="1538643571840"></p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538643594037.png" alt="1538643610385"></p><p>添加基础的依赖：</p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538643637531.png" alt="1538643637531"></p><h3 id="2、依赖文件："><a href="#2、依赖文件：" class="headerlink" title="2、依赖文件："></a>2、依赖文件：</h3><p>按照pom文件补齐需要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fatal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chapter8<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot2 | 第八篇: 整合 Mybatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、项目启动类：（加上Mapper扫描）"><a href="#3、项目启动类：（加上Mapper扫描）" class="headerlink" title="3、项目启动类：（加上Mapper扫描）"></a>3、项目启动类：（加上Mapper扫描）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.fatal.mapper"</span>)  <span class="comment">// 扫描指定包下的所有mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter8Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter8Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：<code>@MapperScan(&quot;com.fatal.mapper&quot;)</code> 这个注解非常的关键，这个对应了项目中 mapper（dao）所对应的包路径，很多同学就是这里忘了加导致异常的</strong></p><h3 id="4、application-yml："><a href="#4、application-yml：" class="headerlink" title="4、application.yml："></a>4、application.yml：</h3><blockquote><p>可以根据个人使用习惯选择使用<code>properties</code>或者<code>yml</code>文件，本项目使用的是yml配置文件，所以把原本<code>application.properties</code>删除，创建一个<code>application.yml</code>文件</p></blockquote><p>在resource文件夹下创建<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性 allowMultiQueries：设置为true后，数据库那边才允许你批量更新。编码属性设置了存储数据到数据库才不会是乱码</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter8?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line">      <span class="comment"># 表示连接池的用户定义名称，主要显示在日志记录和JMX管理控制台中，以标识池和池配置。</span></span><br><span class="line"><span class="attr">      pool-name:</span> <span class="string">HikariPool</span></span><br><span class="line">      <span class="comment"># 控制客户端（即您）等待池中连接的最大毫秒数。如果在没有连接可用的情况下超过此时间，则将抛出SQLException。最低可接受的连接超时为250毫秒。 默认值：30000（30秒）</span></span><br><span class="line"><span class="attr">      connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># 控制允许连接在池中空闲的最长时间。默认值：600000（10分钟）</span></span><br><span class="line"><span class="attr">      idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="comment"># 控制池中连接的最长生命周期。默认值：1800000（30分钟）</span></span><br><span class="line"><span class="attr">      max-lifetime:</span> <span class="number">1800000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span>  <span class="comment"># 注意：一定要对应 mapper 映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fatal.entity</span>  <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="comment"># 可以自控制台上输出 sql 语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pagehelper</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helperDialect:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><h3 id="5、创建数据库和数据表"><a href="#5、创建数据库和数据表" class="headerlink" title="5、创建数据库和数据表"></a>5、创建数据库和数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;`chapter8`</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1003</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> <span class="string">`user`</span>(<span class="string">`userId`</span>,<span class="string">`userName`</span>,<span class="string">`password`</span>,<span class="string">`phone`</span>) <span class="keyword">VALUES</span> (<span class="number">1000</span>,<span class="string">'石原里美'</span>,<span class="string">'123456'</span>,<span class="string">'132123123'</span>);</span><br></pre></td></tr></table></figure><h3 id="6、创建实体类：User-java"><a href="#6、创建实体类：User-java" class="headerlink" title="6、创建实体类：User.java"></a>6、创建实体类：<code>User.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、创建-Mapper-接口：IUserMapper-java"><a href="#7、创建-Mapper-接口：IUserMapper-java" class="headerlink" title="7、创建 Mapper 接口：IUserMapper.java"></a>7、创建 Mapper 接口：<code>IUserMapper.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 映射接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(User record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、创建mybatis映射文件：-UserMapper-xml"><a href="#8、创建mybatis映射文件：-UserMapper-xml" class="headerlink" title="8、创建mybatis映射文件： UserMapper.xml"></a>8、创建mybatis映射文件： <code>UserMapper.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fatal.mapper.IUserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"BASE_TABLE"</span>&gt;</span></span><br><span class="line">        user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"BASE_COLUMN"</span>&gt;</span></span><br><span class="line">        id,username,password,phone</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">        INSERT INTO</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BASE_TABLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            username,password,</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">                phone,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"VALUES("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #&#123;username, jdbcType=VARCHAR&#125;,#&#123;password, jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">                #&#123;phone, jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.fatal.entity.User"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BASE_COLUMN"</span>/&gt;</span></span><br><span class="line">        FROM</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BASE_TABLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：<mapper namespace="com.fatal.mapper.IUserMapper"> 一定要对应自己mapper所在的包路径</mapper></strong></p><h3 id="9、创建Service"><a href="#9、创建Service" class="headerlink" title="9、创建Service"></a>9、创建Service</h3><h4 id="IUserService"><a href="#IUserService" class="headerlink" title="IUserService:"></a><code>IUserService:</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PageInfo&lt;User&gt; <span class="title">findAllUser</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl:"></a><code>UserServiceImpl:</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.IUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 服务实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;    <span class="comment">// 这里会报错，但并不会影响</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这个方法中用到了我们开头配置依赖的分页插件 pagehelper</span></span><br><span class="line"><span class="comment">     * 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可；</span></span><br><span class="line"><span class="comment">     * pageNum 开始页数</span></span><br><span class="line"><span class="comment">     * pageSize 每页显示的数据条数</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;User&gt; <span class="title">findAllUser</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line">        <span class="comment">// 将参数传进这个方法就可以实现物理分页了，非常简单</span></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        <span class="comment">// 查询出整个 List</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectUsers();</span><br><span class="line">        <span class="comment">// 把查询结果给 PageInfo，它会帮我们取出当前页的数据</span></span><br><span class="line">        PageInfo result = <span class="keyword">new</span> PageInfo(users);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、创建Controller-UserController"><a href="#10、创建Controller-UserController" class="headerlink" title="10、创建Controller:UserController"></a>10、创建Controller:<code>UserController</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span> <span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 进行校验...</span></span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">finAllUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(name = <span class="string">"pageNum"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"1"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"pageSize"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line">        <span class="comment">// 当前页的详细信息</span></span><br><span class="line">        PageInfo&lt;User&gt; data = userService.findAllUser(pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目最终的结构"><a href="#项目最终的结构" class="headerlink" title="项目最终的结构"></a>项目最终的结构</h2><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538645543114.png" alt="1538645543114"></p><blockquote><pre><code>到这里如果项目就成功搭建完成了，如果还是报错的话，请仔细看看配置，后面会给出源码地址，程序员就是要不断和bug进行斗争，加油。</code></pre></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目</p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538645655663.png" alt="12341235215312351"></p><p>这样就表示启动成功了</p><p>然后，开始测试吧，这里使用的是postMan，一个进行http请求的测试工具</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/12341235215312351.jpg" alt="12341235215312351"></p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1243213421341.jpg" alt="1243213421341"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>为什么 SpringBoot 整合 Mybatis 不用书写配置类呢？</p><p>答：因为 SpringBoot 已经帮我们写好配置类了。</p><ol><li>它使用 MybatisProperties 配置类与 application.yml 映射从而接受到用户配置的数据</li></ol><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538627919484.png" alt="1538627919484"></p><ol start="2"><li><p>将用户的配置数据填充到 MybatisAutoConfiguration 配置类中，这样我们只需写配置数据就行了</p><p><img src="/images/SpringBoot2/SpringBoot整合Mybatis/1538628768244.png" alt="1538628768244"></p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.tpyyes.com/a/javaweb/2018/0707/663.html" target="_blank" rel="noopener">HikariCP连接池属性_哪些HikariCP属性建议使用</a></p><p><a href="https://blog.csdn.net/Winter_chen001/article/details/80010967" target="_blank" rel="noopener">springboot Mybatis 整合</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总共就几步：</p><p><strong>1、properties、yml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># yml为例</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml  # 注意：一定要对应 mapper 映射xml文件的所在路径</span><br><span class="line">  type-aliases-package: com.example.entity  # 注意：对应实体类的路径</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 可以自控制台上输出 sql 语句</span><br></pre></td></tr></table></figure><p><strong>2、Mapper 配置文件扫描</strong></p><p><strong>@MapperScan(“Mapper接口所在的包的路径”)</strong>  </p><p>作用：扫描指定包下的所有 <code>Mapper 接口</code> ，并将其交给 Spring 容器管理</p><p>要求：一般放在<code>启动类</code> 的位置</p><p><strong>3、模板：</strong></p><p>yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性 allowMultiQueries：设置为true后，数据库那边才允许你批量更新。编码属性设置了存储数据到数据库才不会是乱码</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter8?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合 mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span>  <span class="comment"># 注意：一定要对应 mapper 映射xml文件的所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.fatal.entity</span>   <span class="comment"># 注意：对应实体类的路径</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pagehelper分页插件</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helperDialect:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br><span class="line">  <span class="comment">#returnPageInfo: check</span></span><br></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br></pre></td></tr></table></figure><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p>源码地址：<a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter8" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter8</a></p><h4 id="学习-LuisChen-前辈的经验"><a href="#学习-LuisChen-前辈的经验" class="headerlink" title="学习 LuisChen 前辈的经验"></a>学习 <a href="https://blog.csdn.net/winter_chen001" target="_blank" rel="noopener">LuisChen</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第七篇：整合BeetlSql</title>
      <link href="/2018/10/04/SpringBoot2%20%20%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88BeetlSql/"/>
      <url>/2018/10/04/SpringBoot2%20%20%E7%AC%AC%E4%B8%83%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88BeetlSql/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>BeetSql</strong> 是一个全功能DAO工具， 同时具有 <strong>Hibernate</strong> 优点 &amp; <strong>Mybatis</strong> 优点功能，适用于承认以SQL为中心，同时又需要工具能自动生成大量常用的SQL的应用。</p><p>[TOC]</p><h2 id="BeetlSQL-特点"><a href="#BeetlSQL-特点" class="headerlink" title="BeetlSQL 特点"></a>BeetlSQL 特点</h2><ul><li>开发效率<ul><li>无需注解，自动使用大量内置SQL，轻易完成增删改查功能，节省50%的开发工作量</li><li>数据模型支持Pojo，也支持Map/List这种快速模型，也支持混合模型</li><li>SQL 模板基于Beetl实现，更容易写和调试，以及扩展</li><li>可以针对单个表(或者视图）代码生成pojo类和sql模版，甚至是整个数据库。能减少代码编写工作量</li></ul></li><li>维护性<ul><li>SQL 以更简洁的方式，Markdown方式集中管理，同时方便程序开发和数据库SQL调试。</li><li>可以自动将sql文件映射为dao接口类</li><li>灵活直观得支持一对一，一对多，多对多关系映射而不引入复杂的OR Mapping概念和技术。</li><li>具备Interceptor功能，可以调试，性能诊断SQL，以及扩展其他功能</li></ul></li><li>其他<ul><li>内置支持主从数据库支持的开源工具</li><li>性能数倍于JPA，MyBatis</li><li>支持跨数据库平台，开发者所需工作减少到最小，目前跨数据库支持mysql,postgres,oracle,sqlserver,h2,sqllite,DB2.</li></ul></li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>beetlsql：2.10.34</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538640158551.png" alt="1538640158551"></p><h2 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入beetl框架starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl-framework-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.63.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot 热部署依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器依赖此包，tx 中带有 DaoSupport --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 HikariCP 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    hikari:</span></span><br><span class="line">      <span class="comment"># 基本属性</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">      jdbc-url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter7?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#热部署的配置</span></span><br><span class="line"><span class="attr">  devtools:</span></span><br><span class="line"><span class="attr">    restart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="4、sql"><a href="#4、sql" class="headerlink" title="4、sql"></a>4、sql</h2><p>创建数据库<code>chapter7</code>，并执行下面的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>  <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">DATE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'fatal'</span>, <span class="string">'123456'</span>, <span class="string">'2018-10-21 11:52:41'</span>);</span><br></pre></td></tr></table></figure><h2 id="5、resources"><a href="#5、resources" class="headerlink" title="5、resources"></a>5、resources</h2><p>在 <strong>resources</strong> 下面创建 <strong>sql</strong> 文件夹，在 <strong>sql</strong> 文件夹下，创建 <strong>user.md</strong> （该文件用来书写 <strong>sql</strong> 语句）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">selectByName</span><br><span class="line">===</span><br><span class="line"> </span><br><span class="line"><span class="bullet">* </span>一个简单的查询例子</span><br><span class="line"> </span><br><span class="line"><span class="code">select * from user where name = #name#</span></span><br></pre></td></tr></table></figure><blockquote><p><code>#</code>表示占位符号，<code>#name#</code>表示将接收一个名称为 <code>name</code> 的参数</p></blockquote><h2 id="6、config"><a href="#6、config" class="headerlink" title="6、config"></a>6、config</h2><h3 id="DataSourceConfig-java"><a href="#DataSourceConfig-java" class="headerlink" title="DataSourceConfig.java"></a><code>DataSourceConfig.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> <span class="doctag">@ConfigurationProperties</span> 标注在方法上，会将配置数据映射到要`return`出来的对象中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.hikari"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeetlSqlConfig-java"><a href="#BeetlSqlConfig-java" class="headerlink" title="BeetlSqlConfig.java"></a><code>BeetlSqlConfig.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.core.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.core.UnderlinedNameConversion;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.core.db.MySqlStyle;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.ext.DebugInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.ext.spring4.BeetlSqlDataSource;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.ext.spring4.BeetlSqlScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.ext.spring4.SqlManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BeetlSql配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/4 0004 13:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeetlSqlConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mapper 接口扫描配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeetlSqlScannerConfigurer <span class="title">beetlSqlScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BeetlSqlScannerConfigurer conf = <span class="keyword">new</span> BeetlSqlScannerConfigurer();</span><br><span class="line">        conf.setBasePackage(<span class="string">"com.fatal.mapper"</span>);</span><br><span class="line">        conf.setDaoSuffix(<span class="string">"Mapper"</span>);</span><br><span class="line">        conf.setSqlManagerFactoryBeanName(<span class="string">"sqlManagerFactoryBean"</span>);</span><br><span class="line">        <span class="keyword">return</span> conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlManagerFactoryBean <span class="title">sqlManagerFactoryBean</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource datasource) </span>&#123;</span><br><span class="line">        SqlManagerFactoryBean factory = <span class="keyword">new</span> SqlManagerFactoryBean();</span><br><span class="line">        BeetlSqlDataSource source = <span class="keyword">new</span> BeetlSqlDataSource();</span><br><span class="line">        source.setMasterSource(datasource);</span><br><span class="line">        factory.setCs(source);</span><br><span class="line">        factory.setDbStyle(<span class="keyword">new</span> MySqlStyle());</span><br><span class="line">        <span class="comment">// 控制台或者日志系统输出执行的sql语句</span></span><br><span class="line">        factory.setInterceptors(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br><span class="line">        <span class="comment">// 开启驼峰</span></span><br><span class="line">        factory.setNc(<span class="keyword">new</span> UnderlinedNameConversion());</span><br><span class="line">        <span class="comment">// sql文件路径</span></span><br><span class="line"><span class="comment">//        factory.setSqlLoader(new ClasspathLoader("/sql")); // 默认就是放在 /resources/sql下</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、entity"><a href="#7、entity" class="headerlink" title="7、entity"></a>7、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、mapper"><a href="#8、mapper" class="headerlink" title="8、mapper"></a>8、mapper</h2><blockquote><p>Mapper 对应的sql文件默认根据实体来确定，如实体是UserInfo对象，则对应的sql文件是userInfo.md(sql)。可以通过@SqlResource 注解来指定Mapper对应的sql文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.core.annotatoin.SqlResource;</span><br><span class="line"><span class="keyword">import</span> org.beetl.sql.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SqlResource</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、service"><a href="#9、service" class="headerlink" title="9、service"></a>9、service</h2><h3 id="IUserService-java"><a href="#IUserService-java" class="headerlink" title="IUserService.java"></a><code>IUserService.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IUserServiceImpl-java"><a href="#IUserServiceImpl-java" class="headerlink" title="IUserServiceImpl.java"></a><code>IUserServiceImpl.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.IUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;  <span class="comment">// 这里会报红线，但不影响使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.unique(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、controller"><a href="#10、controller" class="headerlink" title="10、controller"></a>10、controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/10/3 0003 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自带的查询功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">fatal</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        User user = userService.getUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自定义sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">fatal</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.select(name);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、UserMapperTest"><a href="#11、UserMapperTest" class="headerlink" title="11、UserMapperTest"></a>11、UserMapperTest</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/5/22 0022 16:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambdaQueryTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.createLambdaQuery()</span><br><span class="line">                .andEq(User::getName, <span class="string">"fatal"</span>)</span><br><span class="line">                .andEq(User::getPassword, <span class="string">"123456"</span>)</span><br><span class="line">                .select();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538642015162.png" alt="1538642015162"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>访问</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8080/user/1</span></span><br></pre></td></tr></table></figure><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538642254304.png" alt="1538642254304"></p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538642263243.png" alt="1538642263243"></p><p><strong>访问</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://localhost:8080/user/query/fatal</span></span><br></pre></td></tr></table></figure><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538642328125.png" alt="1538642328125"></p><p><strong>显示</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1538642335548.png" alt="1538642335548"></p><p><strong>运行lambdaQueryTest()，控制台如下</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合BeetlSql/1558514002571.png" alt="1558514002571"></p><p><strong>整合成功啦！</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://ibeetl.com/guide/#beetlsql" target="_blank" rel="noopener">BeetlSQL2.10中文文档</a></p><p><a href="https://www.fangzhipeng.com/springboot/2017/05/05/sb5-beatlsql.html" target="_blank" rel="noopener">Spring Boot教程第5篇：beatsql</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter7" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter7</a></p><h4 id="学习-方志朋-前辈的经验"><a href="#学习-方志朋-前辈的经验" class="headerlink" title="学习 方志朋 前辈的经验"></a>学习 <a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> BeetlSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第六篇：整合SpringDataJPA</title>
      <link href="/2018/09/30/SpringBoot2%20%20%E7%AC%AC%E5%85%AD%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88SpringDataJPA/"/>
      <url>/2018/09/30/SpringBoot2%20%20%E7%AC%AC%E5%85%AD%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88SpringDataJPA/</url>
      
        <content type="html"><![CDATA[<p>上一篇介绍了<code>Spring JdbcTemplate</code>的使用，对比原始的<code>JDBC</code>而言，它更加的简洁。但随着表的增加，重复的CRUD工作让我们苦不堪言，这时候<code>Spring Data Jpa</code>的作用就体现出来了…..</p><p>[TOC]</p><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>​        JPA 是 Java Persistence API 的简称，中文名 <strong>Java持久层API</strong>，是JDK 5.0注解或XML描述<code>对象－关系表</code>的映射关系，并将运行期的实体<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E6%8C%81%E4%B9%85%E5%8C%96/7316192" target="_blank" rel="noopener">对象持久化</a>到数据库中。 </p><p>​        Sun引入新的 <strong>JPA ORM 规范</strong>出于<strong>两个原因</strong>：其一，简化现有 <strong>Java EE</strong> 和 <strong>Java SE</strong> 应用开发工作；其二，Sun希望整合 <strong>ORM</strong> 技术，实现天下归一。</p><p>​        Sun公司在JDK1.5的时候，吸收了<strong>Hibernate</strong>、<strong>TopLink</strong>等 <strong>ORM框架</strong> 的优点，提出了Java持久化规范：JPA；Hibernate在3.2的时候提供了JPA的实现，其余的JPA的供应商还有诸如OpenJPA、Toplink等；</p><h2 id="SpringDataJPA"><a href="#SpringDataJPA" class="headerlink" title="SpringDataJPA"></a>SpringDataJPA</h2><p>​        <strong>Spring Data JPA</strong> 是在JPA规范的基础下提供了Repository层的 <strong>实现</strong>，但是使用哪一款 ORM 需要你自己去决定；相比我们更为熟悉的Hibernate和MyBatis，<strong>Spring Data JPA 可以看做更高层次的抽象</strong>。</p><blockquote><p><strong>优点</strong></p></blockquote><ul><li>丰富的API，简单操作无需编写额外的代码</li><li>丰富的SQL日志输出</li></ul><blockquote><p><strong>缺点</strong></p></blockquote><ul><li>学习成本较大，需要学习<code>HQL</code>，<code>如：@Query(value=&quot;from LogToIndex group by elkIndex&quot;)</code></li><li>配置复杂，虽然<code>SpringBoot</code>简化的大量的配置，但关系映射多表查询配置依旧不容易</li><li>性能较差，对比<code>JdbcTemplate</code>、<code>Mybatis</code>等ORM框架，它的性能无异于是最差的</li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1538314105146.png" alt="1538314105146"></p><h2 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-data-jpa 携带 jdbc, jdbc 携带 HikariCP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter6?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line">    <span class="comment"># 显示 sql</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 数据库类型</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># JPA 配置</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment"># 指定生成的表的引擎为InnoDB类型（默认是MyISAM，MyISAM不支持事务）</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL57InnoDBDialect</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>JPA 配置 ddl-auto</strong> 几种属性</p></blockquote><ul><li><strong>create：</strong> 每次运行程序时，都会重新创建表，故而数据会丢失</li><li><strong>create-drop：</strong> 每次运行程序时会先创建表结构，然后待程序结束时清空表</li><li><strong>upadte：</strong> 每次运行程序，没有表时会创建表，如果对象发生改变会更新表结构，原有数据不会清空，只会更新（推荐使用）</li><li><strong>validate：</strong> 运行程序会校验数据与数据库的字段类型是否相同，<strong>字段不同会报错</strong></li></ul><h2 id="4、sql"><a href="#4、sql" class="headerlink" title="4、sql"></a>4、sql</h2><p>由于上面我们采用的是<code>spring.jpa.hibernate.ddl-auto=update</code>方式，因此这里可以跳过手动建表的操作</p><h2 id="5、entity"><a href="#5、entity" class="headerlink" title="5、entity"></a>5、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * 自动生成数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 21:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Entity</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class="comment">// 自增，如果没有`@GeneratedValue`，则需我们手动添加 id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、DTO"><a href="#6、DTO" class="headerlink" title="6、DTO"></a>6、DTO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DTO 数据传输对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/6/26 0026 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、ConvertUtil"><a href="#7、ConvertUtil" class="headerlink" title="7、ConvertUtil"></a>7、ConvertUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据传输对象转换工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/6/26 0026 11:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title">convert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        UserDTO dto = <span class="keyword">new</span> UserDTO();</span><br><span class="line">        BeanUtils.copyProperties(user, dto);</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Repository"><a href="#8、Repository" class="headerlink" title="8、Repository"></a>8、Repository</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 21:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现`JpaRepository`后有好多方法可以用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM USER"</span>,</span><br><span class="line">            countQuery = <span class="string">"SELECT count(*) FROM USER"</span>,</span><br><span class="line">            nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function">Page&lt;User&gt; <span class="title">findPage</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态拼装sql加模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT u.* FROM USER u WHERE if(:username != '', u.`username` LIKE CONCAT('%', :username, '%'), 1=1)"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findPageWithLike</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>if(:username != &#39;&#39;, u.username LIKE CONCAT(&#39;%&#39;, :username, &#39;%&#39;), 1=1)</code>中判断<code>！=</code> 后面不能用 <code>null</code>，否则不起作用。</p><h2 id="9、Test"><a href="#9、Test" class="headerlink" title="9、Test"></a>9、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.convert.ConvertUtil;</span><br><span class="line"><span class="keyword">import</span> com.fatal.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.mapper.UserRepository;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter6ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"123"</span>).setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line">        repository.save(user);</span><br><span class="line">        log.info(<span class="string">"[添加成功] - [&#123;&#125;]"</span>,user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = repository.findAll();</span><br><span class="line">        log.info(<span class="string">"[查询所有] - [&#123;&#125;]"</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        User one = repository.findOne(Example.of(user)).orElse(<span class="keyword">null</span>);</span><br><span class="line">        log.info(<span class="string">"[根据用户名查询成功] - [&#123;&#125;]"</span>, one==<span class="keyword">null</span>?<span class="string">"无记录"</span>:one);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>, Sort.by(Sort.Order.asc(<span class="string">"username"</span>)));</span><br><span class="line">        Page&lt;User&gt; page = repository.findAll(pageable);</span><br><span class="line">        log.info(<span class="string">"[分页+排序+查询所有] - [&#123;&#125;]"</span>, page.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试分页查询（内容替换）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPageWithConvertContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">5</span>, Sort.by(Sort.Order.asc(<span class="string">"username"</span>)));</span><br><span class="line">        Page&lt;User&gt; page = repository.findAll(pageable);</span><br><span class="line">        <span class="comment">// 内容转为DTO</span></span><br><span class="line">        Page&lt;UserDTO&gt; result = page.map(ConvertUtil::convert);</span><br><span class="line">        log.info(<span class="string">"[分页+排序+查询所有(DTO)] - [&#123;&#125;]"</span>, result.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自定义分页查询sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPageWithCustomSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">1</span>, Sort.by(Sort.Order.asc(<span class="string">"id"</span>)));</span><br><span class="line">        Page&lt;User&gt; page = repository.findPage(pageable);</span><br><span class="line">        log.info(<span class="string">"[分页+排序+查询所有（自定义分页查询sql）] - [&#123;&#125;]"</span>, page.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试动态拼装sql加模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPageWithLike</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String username1 = <span class="string">"米"</span>;</span><br><span class="line">        String username2 = <span class="string">""</span>;</span><br><span class="line">        String username3 = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;User&gt; list1 = repository.findPageWithLike(username1);</span><br><span class="line">        List&lt;User&gt; list2 = repository.findPageWithLike(username2);</span><br><span class="line">        List&lt;User&gt; list3 = repository.findPageWithLike(username3);</span><br><span class="line">        System.out.println(<span class="string">"list1: "</span>);</span><br><span class="line">        list1.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"list2: "</span>);</span><br><span class="line">        list2.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"list3: "</span>);</span><br><span class="line">        list3.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>前三个就贴出来了。</p><p><strong>数据库</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1561626209032.png" alt="1561626209032"></p><p><strong>1、测试分页查询</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1561626273097.png" alt="1561626273097"></p><p><strong>2、测试分页查询（内容替换）</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1561626314961.png" alt="1561626314961"></p><p><strong>3、测试自定义分页查询sql</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1561626410094.png" alt="1561626410094"></p><p><strong>4、测试动态拼装sql加模糊查询</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合SpringDataJPA/1562219315330.png" alt="1561626490697"></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="1、GenerationType"><a href="#1、GenerationType" class="headerlink" title="1、GenerationType"></a>1、GenerationType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> GenerationType &#123;</span><br><span class="line">    TABLE,</span><br><span class="line">    SEQUENCE,</span><br><span class="line">    IDENTITY,</span><br><span class="line">    AUTO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GenerationType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TABLE：使用一个特定的数据库表格来保存主键。</li><li>SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。</li><li>IDENTITY：主键由数据库自动生成（主要是自动增长型）</li><li>AUTO：主键由程序控制。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="noopener">Spring Data JPA 官方文档</a></p><p><a href="https://blog.battcn.com/2018/05/08/springboot/v2-orm-jpa/" target="_blank" rel="noopener">一起来学SpringBoot | 第六篇：整合SpringDataJpa</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter6" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter6</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习 唐亚峰 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第五篇：整合JdbcTemplate</title>
      <link href="/2018/09/29/SpringBoot2%20%20%E7%AC%AC%E4%BA%94%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88JdbcTemplate/"/>
      <url>/2018/09/29/SpringBoot2%20%20%E7%AC%AC%E4%BA%94%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88JdbcTemplate/</url>
      
        <content type="html"><![CDATA[<p><code>Spring Framework</code>对数据库的操作在<code>JDBC</code>上面做了深层次的封装，通过<code>依赖注入</code>功能，可以将 <code>DataSource</code> 注册到<code>JdbcTemplate</code>之中，使我们可以轻易的完成对象关系映射，并有助于规避常见的错误；==<code>SpringBoot</code> 默认会<strong>自动配置</strong><code>DataSource</code>==，在<code>SpringBoot</code>中我们可以很轻松的使用它。</p><blockquote><p>特点</p></blockquote><ul><li>速度快，对比其它的ORM框架而言，JDBC的方式无异于是最快的</li><li>配置简单，<code>Spring</code>自家出品，几乎没有额外配置</li><li>学习成本低，毕竟<code>JDBC</code>是基础知识，<code>JdbcTemplate</code>更像是一个<code>DBUtils</code></li></ul><p>[TOC]</p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot整合JdbcTemplate/1538279053874.png" alt="1538279053874"></p><h2 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jdbc 依赖携带 HikariCP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h2><blockquote><p>数据库如果没有引入指定连接池依赖，则默认使用<code>HikariCP</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 基本属性</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/chapter5?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="4、sql"><a href="#4、sql" class="headerlink" title="4、sql"></a>4、sql</h2><p>创建一张 <code>user</code> 的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键自增'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><h2 id="5、entity"><a href="#5、entity" class="headerlink" title="5、entity"></a>5、entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Dao"><a href="#6、Dao" class="headerlink" title="6、Dao"></a>6、Dao</h2><h3 id="IUserDao"><a href="#IUserDao" class="headerlink" title="IUserDao"></a>IUserDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">( User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">( Long id, User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl"></a>UserDaoImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 14:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询所有用户</span></span><br><span class="line">        String sql = <span class="string">"SELECT * FROM user"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据主键ID查询</span></span><br><span class="line">        String sql = <span class="string">"SELECT * FROM user WHERE id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class), id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据主键ID删除用户信息</span></span><br><span class="line">        String sql = <span class="string">"DELETE FROM user WHERE id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 添加用户</span></span><br><span class="line">        String sql = <span class="string">"INSERT user(username, password) values(?, ?)"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getUsername(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">(Long id, User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据主键ID修改用户信息</span></span><br><span class="line">        String sql = <span class="string">"UPDATE user SET username = ? ,password = ? WHERE id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getUsername(), user.getPassword(), id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Service"><a href="#7、Service" class="headerlink" title="7、Service"></a>7、Service</h2><h3 id="IUserService"><a href="#IUserService" class="headerlink" title="IUserService"></a>IUserService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 14:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">( User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">( Long id, User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.queryUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.delUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">(Long id, User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.editUser(id, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、Controller"><a href="#8、Controller" class="headerlink" title="8、Controller"></a>8、Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.fatal.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User 控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/30 0030 12:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.delUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.editUser(id, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Test"><a href="#7、Test" class="headerlink" title="7、Test"></a>7、Test</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.LocalServerPort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ParameterizedTypeReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter5ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String urlWithId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="string">"http://localhost:"</span> + port + <span class="string">"/users"</span>;</span><br><span class="line">        <span class="keyword">this</span>.urlWithId = <span class="string">"http://localhost:"</span> + port + <span class="string">"/users/&#123;id&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  postForEntity(String url, Object request, Class&lt;T&gt; responseType, Object... urlVariables)</span></span><br><span class="line"><span class="comment">     *  String url ：请求路径</span></span><br><span class="line"><span class="comment">     *  Object request ：参数</span></span><br><span class="line"><span class="comment">     *  Class&lt;T&gt; responseType ：返回值类型</span></span><br><span class="line"><span class="comment">     *  Object... urlVariables ：条件参数，对应请求路径上的占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"米彩"</span>).setPassword(<span class="string">"20"</span>);</span><br><span class="line">        template.postForEntity(url, user, Integer.class);</span><br><span class="line">        log.info(<span class="string">"[添加用户成功]\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;List&lt;User&gt;&gt; responseEntity = template.exchange(url, HttpMethod.GET, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;User&gt;&gt;() &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">        log.info(<span class="string">"[查询所有] - [&#123;&#125;]\n"</span>, responseEntity.getBody());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;User&gt; responseEntity = template.getForEntity(urlWithId, User.class, <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">"[主键查询] - [&#123;&#125;]\n"</span>, responseEntity.getBody());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User().setUsername(<span class="string">"米琪"</span>).setPassword(<span class="string">"20"</span>);</span><br><span class="line">        template.put(urlWithId, user, <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">"[修改用户成功]\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        template.delete(urlWithId, <span class="number">2</span>);</span><br><span class="line">        log.info(<span class="string">"[删除用户成功]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataSourceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = jdbcTemplate.getDataSource();</span><br><span class="line">        Assert.assertTrue(dataSource <span class="keyword">instanceof</span> HikariDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章介绍了<code>JdbcTemplate</code>常用的几种操作，详细请参考<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html" target="_blank" rel="noopener">JdbcTemplate API文档</a></p><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter5" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter5</a></p><h4 id="学习-唐亚峰-前辈的经验"><a href="#学习-唐亚峰-前辈的经验" class="headerlink" title="学习 唐亚峰 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第四篇：整合Thymeleaf模板引擎</title>
      <link href="/2018/09/25/SpringBoot2%20%20%E7%AC%AC%E5%9B%9B%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2018/09/25/SpringBoot2%20%20%E7%AC%AC%E5%9B%9B%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>SpringBoot</strong> 支持如<code>JSP</code>、<code>Thymeleaf</code>、<code>FreeMarker</code>、<code>Mustache</code>、<code>Velocity</code>等各种模板引擎，同时还为开发者提供了自定义模板扩展的支持。<strong>SpringBoot</strong> 推荐的 <strong>Thymeleaf</strong>；语法更简单，功能更强大；</p></blockquote><p>在<code>SpringBoot</code>使用上述模板时，默认从 <strong>src/main/resources/templates</strong>下加载。</p><p>[TOC]</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><blockquote><p><strong>表达式</strong> 和 <strong>th</strong> 标签配合一起使用</p></blockquote><h3 id="1、表达式"><a href="#1、表达式" class="headerlink" title="1、表达式"></a>1、表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">  1.Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：</span><br><span class="line">        #ctx : the context object.</span><br><span class="line">        #vars: the context variables.</span><br><span class="line">        #locale : the context locale.</span><br><span class="line">        #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">        #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">        #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">        #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">        # 例子：</span><br><span class="line">        $&#123;session.foo&#125;</span><br><span class="line">    3）、内置的一些工具对象：</span><br><span class="line">        #execInfo : information about the template being processed.</span><br><span class="line">        #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">        #uris : methods for escaping parts of URLs/URIs</span><br><span class="line">        #conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">        #dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">        #calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">        #numbers : methods for formatting numeric objects.</span><br><span class="line">        #strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">        #objects : methods for objects in general.</span><br><span class="line">        #bools : methods for boolean evaluation.</span><br><span class="line">        #arrays : methods for arrays.</span><br><span class="line">        #lists : methods for lists.</span><br><span class="line">        #sets : methods for sets.</span><br><span class="line">        #maps : methods for maps.</span><br><span class="line">        #aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">        #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br><span class="line"></span><br><span class="line">  2.Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">    # 补充：配合 th:object=&quot;$&#123;&#125;&quot; 其中$&#123;&#125;指定一个对象，然后*&#123;&#125;直接取属性值。完成一波骚操作</span><br><span class="line">    # 例子：</span><br><span class="line">        &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">  3.Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  4.Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  # 例子：括号内为参数</span><br><span class="line">        @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;</span><br><span class="line">  5.Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line">    # 例子：</span><br><span class="line">    &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">Literals:（字面量）</span><br><span class="line">    Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…</span><br><span class="line">    Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">    Boolean literals: true , false</span><br><span class="line">    Null literal: null</span><br><span class="line">    Literal tokens: one , sometext , main ,…</span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure><h3 id="2、th-属性"><a href="#2、th-属性" class="headerlink" title="2、th:属性"></a>2、th:属性</h3><ol><li><strong>th:普通属性</strong>：替换 <strong>原生</strong> 属性的值</li><li><strong>th:操作属性</strong>：操作 HTML 标签</li></ol><h4 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h4><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/2018-02-04_123955.png" alt="2018-02-04_123955"></p><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>thymeleaf：3.0.9</li></ul><h2 id="1、搭建"><a href="#1、搭建" class="headerlink" title="1、搭建"></a>1、搭建</h2><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/360截图179801035199104.png" alt="360截图179801035199104"></p><h2 id="2、Hello-World"><a href="#2、Hello-World" class="headerlink" title="2、Hello World"></a>2、Hello World</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要我们把HTML页面放在classpath:/templates/,thymeleaf就能自动渲染</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p><strong>首先</strong>：导入 thymeleaf 的命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/26 0026 17:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"hello"</span>, <span class="string">"Hello Wolrd! thymeleaf渲染成功！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hello-html"><a href="#hello-html" class="headerlink" title="hello.html"></a>hello.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>欢迎使用`thymeleaf`模板引擎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/360截图17001018727491.png" alt="360截图17001018727491"></p><h2 id="3、表达式详解"><a href="#3、表达式详解" class="headerlink" title="3、表达式详解"></a>3、表达式详解</h2><h3 id="3-1、Variable-Expressions（-）"><a href="#3-1、Variable-Expressions（-）" class="headerlink" title="3.1、Variable Expressions（${}）"></a>3.1、Variable Expressions（${}）</h3><blockquote><p>本质：<strong>OGNL</strong> 表达式；案例：上面的 <strong>Hello World</strong> 就是</p></blockquote><h3 id="3-2、Inlining-Expressions（-、-）"><a href="#3-2、Inlining-Expressions（-、-）" class="headerlink" title="3.2、Inlining Expressions（[[]]、[()]）"></a>3.2、Inlining Expressions（[[]]、[()]）</h3><blockquote><p>以 <strong>${}</strong> 为例子</p></blockquote><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试行内表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/inlining"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">inlining</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"hello"</span>, <span class="string">"&lt;h2&gt;hello&lt;/h2&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"inlining"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="inlining-html"><a href="#inlining-html" class="headerlink" title="inlining.html"></a>inlining.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Inlining<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 转义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>[[$&#123;hello&#125;]]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 不转义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>[($&#123;hello&#125;)]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示-1"><a href="#显示-1" class="headerlink" title="显示"></a>显示</h4><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538206342273.png" alt="1538206342273"></p><h3 id="3-3、Selection-Variable-Expressions（-）"><a href="#3-3、Selection-Variable-Expressions（-）" class="headerlink" title="3.3、Selection Variable Expressions（*{}）"></a>3.3、Selection Variable Expressions（*{}）</h3><h4 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 *&#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User().setName(<span class="string">"米彩"</span>).setAge(<span class="number">18</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="test1-html"><a href="#test1-html" class="headerlink" title="test1.html"></a>test1.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 *&#123;&#125; 表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:object</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span>这里是静态的名字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span>这里是静态的年龄<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示-2"><a href="#显示-2" class="headerlink" title="显示"></a>显示</h4><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538206558530.png" alt="1538206558530"></p><h3 id="3-4、Message-Expressions（-）"><a href="#3-4、Message-Expressions（-）" class="headerlink" title="3.4、Message Expressions（#{}）"></a>3.4、Message Expressions（#{}）</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h5><blockquote><p>准备静态文件，我这里从 <strong>bootstrap</strong> 官网下载了4.0 版本的登录页面的模板</p></blockquote><p>​                <img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538203469124.png" alt="1538203469124"></p><h5 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h5><blockquote><p>编写国际化配置文件，抽取页面需要显示的国际化内容</p></blockquote><ul><li><p><strong>要求</strong></p><p>需编写 ==<strong>一个</strong> 普通== 配置文件和 ==<strong>多个</strong> 国际化== 配置文件。命名格式如下：</p><ul><li>普通配置文件：<strong>基础名</strong></li><li>国际化配置文件：<strong>基础名</strong> +  下划线 + <strong>国际化标识</strong>（<strong>zh_CN</strong>、<strong>en_US</strong>）</li><li>文件类型为 <strong>properties</strong></li><li>如：message.proerties、message_zh_CN.proerties、message_en_US.proerties</li></ul></li><li><p><strong>注</strong></p><ul><li><p>如果命名规范，创建第一个国际化配置文件的时候，SpringBoot 会自动识别出来并帮你创建      <strong>Resource Bundle “基础名”</strong> 文件夹；</p></li><li><p>如果配置文件书写正确，在 <strong>html</strong> 页面上使用 <strong>th结合#{}</strong> 的语法会有 <strong>联想</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538206083223.png" alt="1538206083223"></p></li></ul></li></ul><ol><li><p><strong>resource</strong> 下创建文件夹 <strong>i18n</strong>（名字你随意）</p></li><li><p><strong>i18n</strong> 下创建 <strong>基础名.properties</strong></p></li><li><p><strong>i18n</strong> 下创建 <strong>基础名_zh_CN.properties</strong>（这个时候如果你命名规则正确，SpringBoot 会自动识别，并生成<strong>Resource Bundle “基础名”</strong> 文件夹）</p></li><li><p>右键单击 <strong>Resource Bundle “基础名”</strong>，选择 <strong>New</strong>，选择 <strong>Add Property File Resource Bundle</strong> 创建另一个国际化配置文件</p></li><li><p>点击三个配置文件中的其中一个。切换到 <strong>Resource Bundle</strong> 视图</p><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538205956420.png" alt="1538205956420"></p></li><li><p>右键点击 <strong>基础名</strong>（或点击 ‘<strong>+</strong>‘），选择 <strong>New Property</strong> 添加属性，然后在右方 <strong>填写对应的属性值</strong> 即可</p><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538205991235.png" alt="1538205991235"></p></li></ol><h5 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h5><blockquote><p>在全局配置文件中指定 <strong>国际化基础名</strong> </p><p>格式：<strong>class路径下.基础名</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置国际化基础名</span></span><br><span class="line"><span class="attr">  messages:</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">i18n.login</span></span><br></pre></td></tr></table></figure><h5 id="No-4"><a href="#No-4" class="headerlink" title="No.4"></a>No.4</h5><blockquote><p>在 test2.html 页面上用 <strong>#{}</strong> 取值，并在国际化链接上加上国际化标识参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/favicon.ico&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 #&#123;&#125; 表达式（国际化）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/dist/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/dist/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"/assets/brand/bootstrap-solid.svg"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">th:src</span>=<span class="string">"@&#123;/assets/brand/bootstrap-solid.svg&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.email&#125;"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">placeholder</span>=<span class="string">"Email address"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 国际化链接上加上国际化标识参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/test2(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/test2(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>&amp;copy; 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="No-5"><a href="#No-5" class="headerlink" title="No.5"></a>No.5</h5><blockquote><p>自定义区域解析器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.compoment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义区域解析器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/28 0028 21:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        <span class="comment">// 如果没带则获得系统默认的</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l)) &#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="No-6"><a href="#No-6" class="headerlink" title="No.6"></a>No.6</h5><blockquote><p>配置自定义区域解析器到 <strong>WebMvcConfigurer</strong> 组件中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.compoment.MyLocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/28 0028 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="No-7"><a href="#No-7" class="headerlink" title="No.7"></a>No.7</h5><blockquote><p>视图映射（两种方式）</p></blockquote><ul><li><p><strong>处理器映射器</strong> @RequestMappping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 WebMvc 中添加 <strong>视图控制器</strong></p><blockquote><p>在 <strong>WebMvcConfigurer</strong> 中重写 <strong>addViewControllers</strong> 方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加视图控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// `映射路径`会去模板中找对应的`视图`</span></span><br><span class="line">    registry.addViewController(<span class="string">"/test2"</span>).setViewName(<span class="string">"test2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="显示-3"><a href="#显示-3" class="headerlink" title="显示"></a>显示</h5><p>首次访问</p><p><img src="./images/360截图16720405163217.png" alt></p><p>点击 <strong>English</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538203330510.png" alt="1538203330510"></p><p>点击 <strong>中文</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538203377885.png" alt="1538203377885"></p><h3 id="3-5、Link-URL-Expressions（-）"><a href="#3-5、Link-URL-Expressions（-）" class="headerlink" title="3.5、Link URL Expressions（@{}）"></a>3.5、Link URL Expressions（@{}）</h3><h4 id="Controller-3"><a href="#Controller-3" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 @&#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test3"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="test3-html"><a href="#test3-html" class="headerlink" title="test3.html"></a>test3.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 @&#123;&#125; 表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 @&#123;&#125; 表达式引入 css文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/css/test3.css&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @&#123;&#125; 我们只需写classpath下的路径即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/css/test3.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>字体为红色，代表成功<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示-4"><a href="#显示-4" class="headerlink" title="显示"></a>显示</h4><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538206850582.png" alt="1538206850582"></p><h3 id="3-6、Fragment-Expressions（-）"><a href="#3-6、Fragment-Expressions（-）" class="headerlink" title="3.6、Fragment Expressions（~{}）"></a>3.6、Fragment Expressions（~{}）</h3><h4 id="姿势解析"><a href="#姿势解析" class="headerlink" title="姿势解析"></a>姿势解析</h4><h5 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一：使用`th:fragment`标签命名片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">     &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方式二：只需在模板文件的片段上加个`id属性` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"copy-section"</span>&gt;</span></span><br><span class="line">  &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="三种引入公共片段的th属性"><a href="#三种引入公共片段的th属性" class="headerlink" title="三种引入公共片段的th属性"></a>三种引入公共片段的th属性</h5><ul><li><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p></li><li><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p></li><li><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p></li></ul><h5 id="如何取？"><a href="#如何取？" class="headerlink" title="如何取？"></a>如何取？</h5><ul><li>标签：<strong>th:insert</strong>，<strong>th:replace</strong>， <strong>th:include</strong></li><li>表达式： ~{templatename::selector}， ~{templatename::fragmentname}</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上方标签和表达式各取一种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: #copy-section&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: #copy-section"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注：</li></ul><ol><li><strong>~{}</strong> 与这三个标签组合时，<strong>~{}</strong> 可以省略</li><li><strong>templatename</strong>：classpath下的模板文件的相对路径名（<strong>不需要后缀</strong>）</li></ol><h4 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h4><blockquote><p>测试选择器和片段名</p></blockquote><h5 id="Controller-4"><a href="#Controller-4" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 ~&#123;&#125; （选择器和片段名）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test4"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bar-html"><a href="#bar-html" class="headerlink" title="bar.html"></a>bar.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bar代码抽取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"side"</span>&gt;</span></span><br><span class="line">        这是侧边</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="footer-html"><a href="#footer-html" class="headerlink" title="footer.html"></a>footer.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer代码抽取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">        &amp;copy; 2018/9/29 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="test4-html"><a href="#test4-html" class="headerlink" title="test4.html"></a>test4.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 ~&#123;&#125; 表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>~&#123;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>~&#123;templatename::fragmentname&#125;:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式: classpath下模板文件的相对路径(具体到模板名，不需要后缀) :: 片段名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons/footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>~&#123;templatename::selector&#125;:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式: classpath下相对路径(具体到模板名，不需要后缀) :: 选择器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons/bar :: #side&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>th:insert一起用,可以省略~&#123;&#125;:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  与th:insert一起用,可以省略~&#123;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"commons/footer.html :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 这里有红线,但不影响正常运行 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;div th:insert="commons/footer :: copy"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"commons/bar.html :: #side"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;div th:insert="commons/bar :: #side"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="显示-5"><a href="#显示-5" class="headerlink" title="显示"></a>显示</h5><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538210941733.png" alt="1538210941733"></p><h4 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h4><blockquote><p>测试 <strong>th:insert，th:replace， th:include</strong></p></blockquote><h5 id="Controller-5"><a href="#Controller-5" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 ~&#123;&#125; （th:insert，th:replace， th:include）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test5</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test5"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="test5-html"><a href="#test5-html" class="headerlink" title="test5.html"></a>test5.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 ~&#123;&#125; 表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>~&#123;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- th:insert --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"commons/footer.html :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- th:replace --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/footer.html :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- th:include --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"commons/footer.html :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="显示-6"><a href="#显示-6" class="headerlink" title="显示"></a>显示</h5><p><img src="/images/SpringBoot2/SpringBoot整合Thymeleaf/1538212323861.png" alt="1538212323861"></p><h2 id="4、th-属性"><a href="#4、th-属性" class="headerlink" title="4、th:属性"></a>4、th:属性</h2><h3 id="th-each"><a href="#th-each" class="headerlink" title="th:each"></a>th:each</h3><p><strong>语法： th:each=”元素名: ${集合名}”</strong></p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><h5 id="Controller-6"><a href="#Controller-6" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 th:each</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test6</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">"小米"</span>, <span class="string">"米彩"</span>, <span class="string">"米琪"</span>, <span class="string">"米澜"</span>);</span><br><span class="line">    Map&lt;Integer ,String&gt; collect = strings.stream()</span><br><span class="line">        .collect(Collectors.toMap(e -&gt; random.nextInt(<span class="number">100</span>), Function.identity()));</span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>,collect);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test6"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="test6-html"><a href="#test6-html" class="headerlink" title="test6.html"></a>test6.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 th:each<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:each<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.key&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.value&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h3><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><h5 id="Controller-7"><a href="#Controller-7" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试 th:if</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test7</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test7"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="test7-html"><a href="#test7-html" class="headerlink" title="test7.html"></a>test7.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试 th:if<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:if<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用简写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;age eq 18&#125;"</span>&gt;</span>等于18（使用简写）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用符号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;age == 18&#125;"</span>&gt;</span>等于18（使用符号）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Thymeleaf-热加载"><a href="#Thymeleaf-热加载" class="headerlink" title="Thymeleaf 热加载"></a>Thymeleaf 热加载</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>操作：<strong>Ctrl + F9</strong> 即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter4" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter4</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第三篇：整合日志框架</title>
      <link href="/2018/09/23/SpringBoot2%20%20%E7%AC%AC%E4%B8%89%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/09/23/SpringBoot2%20%20%E7%AC%AC%E4%B8%89%E7%AF%87%EF%BC%9A%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>日志框架是一套能实现日志输出的工具包，它可以运行时选择性输出，性能优异，配置灵活。它在开发中也是必不可少的工具，这篇笔记记录 SpringBoot 如何整合日志框架。</p></blockquote><p>[TOC]</p><h2 id="日志框架的作用"><a href="#日志框架的作用" class="headerlink" title="日志框架的作用"></a>日志框架的作用</h2><ol><li>定制输出目标<ul><li>一般来说我们都需要把日志输出到文件</li><li>某些系统可能还需要定制日志文件的 <strong>滚动策略</strong>（比如 一天输出一个日志文件）</li><li>很多集成系统要输出日志文件到<strong>数据库</strong>或者是网络的<strong>第三方服务</strong></li></ul></li></ol><ol start="2"><li>定制输出格式<ul><li>可以在不修改代码的情况下通过配置文件自由的定制输出格式</li></ul></li></ol><ol start="3"><li>携带上下文信息<br>如：时间戳、类路径、线程等等</li></ol><h2 id="最佳搭配"><a href="#最佳搭配" class="headerlink" title="最佳搭配"></a>最佳搭配</h2><p><strong>日志门面： <em>SLF4J</em></strong> </p><p><strong>日志实现： <em>Logback</em></strong></p><blockquote><p>==<em>Logback</em> 是默认实现==，所以我们可以不引入依赖</p></blockquote><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Level &#123;</span><br><span class="line">    ERROR(<span class="number">40</span>, <span class="string">"ERROR"</span>),</span><br><span class="line">    WARN(<span class="number">30</span>, <span class="string">"WARN"</span>),</span><br><span class="line">    INFO(<span class="number">20</span>, <span class="string">"INFO"</span>),   <span class="comment">//默认级别</span></span><br><span class="line">    DEBUG(<span class="number">10</span>, <span class="string">"DEBUG"</span>),</span><br><span class="line">    TRACE(<span class="number">0</span>, <span class="string">"TRACE"</span>);</span><br><span class="line"><span class="comment">// 上面最高，下面最低，日志级别从上往下看 `由高到底`</span></span><br></pre></td></tr></table></figure><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li><li>SLF4j + Logback</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1、HelloWorld"><a href="#1、HelloWorld" class="headerlink" title="1、HelloWorld"></a>1、HelloWorld</h3><h4 id="1-1、传统方式"><a href="#1-1、传统方式" class="headerlink" title="1.1、传统方式"></a>1.1、传统方式</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter3ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h5><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17860605429642.png" alt="360截图17860605429642"></p><h4 id="1-2、注解方式（推荐）"><a href="#1-2、注解方式（推荐）" class="headerlink" title="1.2、注解方式（推荐）"></a>1.2、注解方式（推荐）</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span><span class="comment">&lt;!-- true：依赖该项目不会依赖Lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加上注解 <strong>@Slf4j</strong></p></li><li><p>方法中直接使用 <strong>log</strong> 即可</p></li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j  <span class="comment">// 它是一个的用于日志管理的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter3ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><blockquote><p>如果 <strong>log</strong> 找不到。报错 <strong>Cannot resolve symbol ‘log’</strong></p></blockquote><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ol><li>用快捷键 <strong>Ctrl+Alt+S</strong> 打开：<strong>Settings→Plugins→Browse repositories</strong></li><li>输入<strong>lom</strong> 后选择 <strong>Install</strong>，安装插件</li><li>按照提示重启 <strong>IDEA</strong> 即可</li></ol><h3 id="2、默认级别"><a href="#2、默认级别" class="headerlink" title="2、默认级别"></a>2、默认级别</h3><h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><blockquote><p><strong>trace</strong> &lt; <strong>debug</strong> &lt; <strong>info</strong> &lt;  <strong>warn</strong> &lt; <strong>error</strong> （由低到高）</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低于默认级别的不会输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.trace(<span class="string">"trace..."</span>);</span><br><span class="line">    log.debug(<span class="string">"debug..."</span>);</span><br><span class="line">    log.info(<span class="string">"info..."</span>);    <span class="comment">// 默认级别，为root级别</span></span><br><span class="line">    log.warn(<span class="string">"warn..."</span>);</span><br><span class="line">    log.error(<span class="string">"error..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台-1"><a href="#控制台-1" class="headerlink" title="控制台"></a>控制台</h4><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17920826112116132.png" alt="360截图17920826112116132"></p><h3 id="3、日志中输出变量"><a href="#3、日志中输出变量" class="headerlink" title="3、日志中输出变量"></a>3、日志中输出变量</h3><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在日志中输出变量，<span class="doctag">@Slf</span>4j 提供了更加方便的写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVariable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String username = <span class="string">"fatal"</span>;</span><br><span class="line">    String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//你可能会这样写，这样子拼接的时候尤其是在变量特别多的时候，你可能会特别的头疼</span></span><br><span class="line">    log.info(<span class="string">"username: "</span> + username + <span class="string">",password: "</span> + password);</span><br><span class="line">    <span class="comment">//Slf4j提供了一种方便的写法</span></span><br><span class="line">    log.info(<span class="string">"username: &#123;&#125; ,password: &#123;&#125; "</span>,username,password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="控制台-2"><a href="#控制台-2" class="headerlink" title="控制台"></a>控制台</h4><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图16270824648957.png" alt="360截图16270824648957"></p><h3 id="4、本地输出日志文件"><a href="#4、本地输出日志文件" class="headerlink" title="4、本地输出日志文件"></a>4、本地输出日志文件</h3><h4 id="4-1、方式一：application-yml"><a href="#4-1、方式一：application-yml" class="headerlink" title="4.1、方式一：application.yml"></a>4.1、方式一：application.yml</h4><blockquote><p>只能配置日志文件的路径，日志输出的格式等等一些简单的配置</p></blockquote><ol><li><p><strong>设置控制台日志的输出格式</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  pattern:</span></span><br><span class="line"><span class="attr">    console:</span> <span class="string">"%d - %msg%n"</span></span><br><span class="line"><span class="comment"># "%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span></span><br></pre></td></tr></table></figure><p><strong>日志输出格式</strong>：<br>​    <strong>%d</strong>：表示日期时间，<br>​    <strong>%thread</strong>：表示线程名，<br>​    <strong>%-5level</strong>：级别从左显示5个字符宽度，<br>​    <strong>%logger{50}</strong>：表示 logger 名字最长 50 个字符，否则按照句点分割，<br>​    <strong>%msg</strong>：日志消息，<br>​    <strong>%n</strong>：是换行符</p></li><li><p><strong>指定生成配置文件的路径</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="attr">E:/fatal</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图1700102010388140.png" alt="360截图1700102010388140"></p></li><li><p><strong>指定生成配置文件的路径和文件名</strong> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  file:</span> <span class="attr">E:/fatal/fatal.log</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图1672040284128132.png" alt="360截图1672040284128132"></p></li><li><p><strong>设置日志级别</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="comment">#    com.fatal.Chapter3ApplicationTests: debug # 具体类路径</span></span><br><span class="line">    <span class="string">com.fatal:</span> <span class="string">debug</span>  <span class="comment"># 具体包名</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="4-2、方式二：logback-spring-xml（官方推荐）"><a href="#4-2、方式二：logback-spring-xml（官方推荐）" class="headerlink" title="4.2、方式二：logback-spring.xml（官方推荐）"></a>4.2、方式二：logback-spring.xml（官方推荐）</h4><p>可以配置一些比较复杂的配置，如：</p><ul><li>区分 <strong>info</strong> 和 <strong>error</strong> 的日志</li><li>每天生产一个日志文件</li></ul><ol><li><p><strong>设置控制台日志的输出格式</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定控制台日志输出格式de配置项consoleLog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用配置项consoleLog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指定日志文件的输出位置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志文件的输位置de配置项fileInfoLog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileInfoLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>E:/fatal/info/info.%d.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用配置项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileInfoLog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17321122366740.png" alt="360截图17321122366740"></p><p>一般用的话，我需要将 <strong>info</strong> 和 <strong>error</strong> 两日志文件隔离，而且还需要过滤一些不必要的限制</p></li></ol><ul><li><p><strong>Info日志文件</strong></p><p>加上 <filter> 指定 <strong>LevelFilter</strong> 过滤级别</filter></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志文件的输位置de配置项fileInfoLog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileInfoLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span>     <span class="comment">&lt;!-- 设置过滤级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>     <span class="comment">&lt;!-- 用于配置符合过滤条件的日志的操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>     <span class="comment">&lt;!-- 用于配置不符合过滤条件的日志的操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>E:/fatal/info/info.%d.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用配置项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"fileInfoLog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>FilterReply</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FilterReply &#123;</span><br><span class="line">    DENY,<span class="comment">// 拒绝</span></span><br><span class="line">    NEUTRAL,<span class="comment">// 中立</span></span><br><span class="line">    ACCEPT;<span class="comment">// 接受</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterReply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Error日志文件</strong> （两种方式）</p><p>加上 <filter> 指定  <strong><code>ThresholdFilter</code></strong> 过滤级别</filter></p><p><strong><code>ThresholdFilter</code></strong> ：不能排除，只能选定某个日志级别。和在 spring 配置文件中设置日志级别差不多，区别是作用范围不同</p><p><strong>作用</strong>：输出日志级别为所选的<strong>及</strong>更高的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定日志文件的输位置de配置项fileErrorLog --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"fileErrorLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span></span><br><span class="line"><span class="comment">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span></span><br><span class="line"><span class="comment">        &lt;/filter&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志文件的输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">            %msg%n</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 滚动策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>E:/fatal/error/error.%d.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5、指定配置"><a href="#5、指定配置" class="headerlink" title="5、指定配置"></a>5、指定配置</h3><p>如果不使用 <strong>SpringBoot</strong> 的默认配置的话，可以在 <strong>resources</strong> 放上每个日志框架的配置文件</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p><strong>logback.xml</strong>：直接就被日志框架识别了；</p><p><strong>==logback-spring.xml==</strong>（官方推荐）：<strong>日志框架</strong> 就不直接加载日志的 <strong>默认</strong> 配置项，由 <strong>SpringBoot</strong> 解析 <strong>日志配置</strong>，可以使用 <strong>SpringBoot</strong> 的高级 <strong>profile</strong> 功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>科普</strong>：<code>logback.xml</code> 和 <code>logback-spring.xml</code>都可以用来配置 <code>logback</code>，但是两者的加载顺序是不一样的。加载优先级为：<code>logback.xml --&gt; application.properties --&gt; logback-spring.xml.</code></p><p><code>logback.xml</code>加载早于<code>application.properties</code>，所以如果你在<code>logback.xml</code>使用了变量时（怎么用？<code>${}</code>也就是<code>SpEL</code>取值），而恰好这个变量是写在<code>application.properties</code>时，那么就会获取不到，只要改成<code>logback-spring.xml</code>就可以解决。</p><h4 id="5-1、测试-logback-spring-xml-的功能-profile"><a href="#5-1、测试-logback-spring-xml-的功能-profile" class="headerlink" title="5.1、测试 logback-spring.xml 的功能 profile"></a>5.1、测试 <em>logback-spring.xml</em> 的功能 <em>profile</em></h4><h5 id="5-1-1、default-环境"><a href="#5-1-1、default-环境" class="headerlink" title="5.1.1、default 环境"></a>5.1.1、default 环境</h5><blockquote><p>默认是 <strong>default</strong> 环境</p></blockquote><h6 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h6><p><strong>一是</strong>：直接运行，运行一个测试方法的话，显示的是 ====</p><p><strong>二是</strong>：使用命令行运行</p><ol><li>打包<code>mvn package</code></li></ol><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17290429104127106.png" alt="360截图17290429104127106"></p><ol><li>进入 <strong>target</strong> 目录，输入命令<code>java -jar chapter2-0.0.1-SNAPSHOT.jar</code></li></ol><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图16720401215444.png" alt="360截图16720401215444"></p><h5 id="5-1-2、dev-环境"><a href="#5-1-2、dev-环境" class="headerlink" title="5.1.2、dev 环境"></a>5.1.2、dev 环境</h5><h6 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h6><p><strong>一是</strong>：在 application.yml 文件中添加上 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>点击运行即可</p><p><strong>二是</strong>：命令行上</p><p>打包后，进入 <strong>target</strong> 目录，输入命令<code>java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17290504575861.png" alt="360截图17290504575861"></p><p><strong>三是</strong>：修改启动配置项    <strong>Edit Configurations…</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17290507485450.png" alt="360截图17290507485450"></p><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17860530447977.png" alt="360截图17860530447977"></p><p>最后点击启动即可</p><p><strong>控制台</strong></p><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图18180712416336.png" alt="360截图18180712416336"></p><h3 id="6、切换日志框架"><a href="#6、切换日志框架" class="headerlink" title="6、切换日志框架"></a>6、切换日志框架</h3><p><strong>切换到 log4j2</strong></p><p>排除依赖 <strong>spring-boot-starter-logging</strong> 后，加上依赖 <strong>spring-boot-starter-log4j2</strong></p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>打开 <strong>pom.xml</strong> 文件，快捷键 <strong>Shift + Ctrl + Alt + U</strong>  –&gt; 生成 <strong>依赖图表</strong></p></li><li><p>找到 <strong>spring-boot-starter-logging</strong> 后，右键单击选择 <strong>Exclude</strong> 排除（或用快捷键 <strong>Shift + Delete</strong> 排除）</p><blockquote><p>当然也可以自己手动在 xml 文件上排除依赖，但我比较喜欢 <strong>图表</strong> 这种</p></blockquote><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图17630324534037.png" alt="360截图17630324534037"></p></li><li><p>引入依赖  <strong>spring-boot-starter-log4j2</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把 <strong>log4j2.xml</strong> 放在 <strong>resources</strong> 下</p></li></ol><p><strong>log4j2.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] ==log4j2== [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"log"</span> <span class="attr">fileName</span>=<span class="string">"log/test.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        60     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line">    61 </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图18141221306775.png" alt="360截图18141221306775"></p><h3 id="7、日志颜色编码"><a href="#7、日志颜色编码" class="headerlink" title="7、日志颜色编码"></a>7、日志颜色编码</h3><p>如果终端支持 <code>ANSI</code>，默认情况下会给日志上个色，提高可读性，可以在配置文件中设置 <code>spring.output.ansi.enabled</code> 来改变默认值</p><ul><li><strong>ALWAYS：</strong> 启用 <code>ANSI</code> 颜色的输出。</li><li><strong>DETECT：</strong> 尝试检测 <code>ANSI</code> 着色功能是否可用。</li><li><strong>NEVER：</strong> 禁用 <code>ANSI</code> 颜色的输出。</li></ul><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">    ansi:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h4 id="logback-spring-xml（或logback-xml-）"><a href="#logback-spring-xml（或logback-xml-）" class="headerlink" title="logback-spring.xml（或logback.xml ）"></a><strong>logback-spring.xml</strong>（或<strong>logback.xml</strong> ）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定控制台日志输出格式de配置项consoleLog --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">            %black(控制台-) %red(%d&#123;yyyy-MM-dd HH:mm:ss&#125;) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用配置项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleLog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行一个 HelloWorld 测试方法</p><h4 id="控制台-3"><a href="#控制台-3" class="headerlink" title="控制台"></a>控制台</h4><p><img src="/images/SpringBoot2/SpringBoot整合日志框架/360截图16850813798272.png" alt="360截图16850813798272"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter3" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter3</a></p><h4 id="学习-唐亚峰-，廖师兄-前辈的经验"><a href="#学习-唐亚峰-，廖师兄-前辈的经验" class="headerlink" title="学习 唐亚峰 ，廖师兄 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> ，<a href="https://www.imooc.com/u/4559066" target="_blank" rel="noopener">廖师兄</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> Slf4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第二篇：SpringBoot配置详解</title>
      <link href="/2018/09/20/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E7%AF%87%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/09/20/SpringBoot2%20%20%E7%AC%AC%E4%BA%8C%E7%AF%87%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一篇介绍了 <code>SpringBoot</code> 由来及构建方式，通过第一章的教程我们对 <code>SpringBoot</code> 不再感到陌生，可以发现 <code>SpringBoot</code> 虽然干掉了 XML 但未做到 <strong>零配置</strong>，它体现出了一种 <strong>==约定优于配置，也称作按约定编程==，是一种软件设计范式，旨在减少软件开发人员需做决定的数量，这种方式简单又不失灵活。</strong> 一般情况下默认的配置足够满足日常开发所需，但在特殊的情况下，我们往往需要用到 <strong>自定义属性配置、自定义文件（配置文件）配置、多环境配置、外部命令引导</strong> 等一系列功能。不用担心，这些 <code>SpringBoot</code> 都替我们考虑好了，我们只需要遵循它的规则配置即可</p></blockquote><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h3 id="文件处理器的使用"><a href="#文件处理器的使用" class="headerlink" title="文件处理器的使用"></a>文件处理器的使用</h3><p>为了让 <code>Spring Boot</code> 更好的生成配置元数据文件，我们需要添加如下依赖（<strong>该依赖可以不添加，但是在 IDEA 和 STS 中不会有属性提示，没有提示的配置就跟你用记事本写代码一样苦逼，出个问题弄哭你去</strong>），该依赖只会在编译时调用，所以不用担心会对生产造成影响…</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- true表示两个项目之间依赖不传递;不写默认为false --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>自定义属性值</code>通过@ConfigurationProperties的<code>prefix</code>值绑定，自定义属性便可与类中的属性一样映射，如果导入配置文件处理器，那么在配置文件中就可以有<strong>提示</strong>了。</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图175711169894143.png" alt="360截图175711169894143"></p><p>效果</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17001020447867.png" alt="360截图17001020447867"></p><p><strong>注意</strong>：如果没有提示则重新 <strong>编译</strong> 一下即可</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17290429635664.png" alt="360截图17001020447867"></p><p>经测试，该处理器只对 <strong>application.yml</strong>、<strong>application.properties</strong> 有效，对如 <strong>test.properties</strong> 无效，所以当我们需要使用的时候，可以先用 <strong>application.properties</strong> 命名配置文件，写完改为 <code>xxx.properties</code> 即可。</p><p>（这方法看一下，可以在后面测试中使用，挺方便的）</p><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p><strong>SpringBoot</strong> 使用一个 <strong>全局</strong> 的配置文件，配置文件名是 <strong>固定</strong> 的；该配置文件可以对一些默认配置进行修改</p><h3 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h3><ul><li><strong>application.properties</strong></li><li><strong>application.yml</strong></li></ul><p>​      析：  <strong>yml</strong> 是 <strong>YAML</strong> （YAML Ain’t Markup Language）语言的文件，以数据为中心，比 <strong>json</strong>，<strong>xml</strong> 等更 <strong>适合</strong> 做配置文件。语法规范可参考 <a href="http://yaml.org/" target="_blank" rel="noopener">http://yaml.org/</a> </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>application.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8081</span><br></pre></td></tr></table></figure></li><li><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h2><h3 id="2-1、基本语法"><a href="#2-1、基本语法" class="headerlink" title="2.1、基本语法"></a>2.1、基本语法</h3><p><strong>k:(空格)v</strong>：表示一对键值对（空格必须有）；</p><p>它是以 <strong>空格</strong> 的缩进来控制 <strong>层级</strong> 关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：属性和值也是大小写敏感；</p><h3 id="2-2、值的写法"><a href="#2-2、值的写法" class="headerlink" title="2.2、值的写法"></a>2.2、值的写法</h3><h4 id="2-2-1、字面量"><a href="#2-2-1、字面量" class="headerlink" title="2.2.1、字面量"></a>2.2.1、字面量</h4><blockquote><p>普通的值（数字，字符串，布尔）</p></blockquote><p><code>k: v</code>：字面直接来写；</p><p>​ 字符串 <strong>默认不用加</strong> 上 <strong>单引号</strong> 或者 <strong>双引号</strong>；加了的话有特殊意义，如下</p><p>​   <strong>“”：双引号</strong>；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​      name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​   <strong>‘’：单引号</strong>；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​     name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="2-2-2、对象、Map"><a href="#2-2-2、对象、Map" class="headerlink" title="2.2.2、对象、Map"></a>2.2.2、对象、Map</h4><blockquote><p><code>k: v</code>：写对象或集合的属性和值的关系；注意缩进</p></blockquote><p>普通写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,</span> <span class="attr">age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、数组、List、Set"><a href="#2-2-3、数组、List、Set" class="headerlink" title="2.2.3、数组、List、Set"></a>2.2.3、数组、List、Set</h4><blockquote><p>用<code>-</code>值表示数组中的一个元素</p></blockquote><p>普通写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用`-`值表示数组中的一个元素，后面有一个空格</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><h3 id="3-1、全局配置文件值注入"><a href="#3-1、全局配置文件值注入" class="headerlink" title="3.1、全局配置文件值注入"></a>3.1、全局配置文件值注入</h3><blockquote><p>全局配置文件： <strong>application.properties</strong> 与 <strong>application.yml</strong> ，这里以 <strong>application.yml</strong> 为例</p></blockquote><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义属性值</span></span><br><span class="line"><span class="attr">fatal:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  fatal6:</span> <span class="string">&#123;name:</span> <span class="string">brother,</span> <span class="attr">age:</span> <span class="number">21</span><span class="string">&#125;</span>  <span class="comment"># 测对象 行内写法</span></span><br><span class="line"><span class="attr">  map:</span> <span class="string">&#123;one:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">two:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">three:</span> <span class="number">3</span><span class="string">&#125;</span> <span class="comment"># 测 Map 集合 行内写法</span></span><br><span class="line"><span class="attr">  strings:</span> <span class="string">[cat,dog,pig,strings]</span> <span class="comment"># 测数组 行内写法</span></span><br><span class="line"><span class="attr">  list:</span> <span class="string">[cat,dog,pig,list]</span>  <span class="comment"># 测 List 集合 行内写法</span></span><br><span class="line"><span class="attr">  set:</span> <span class="string">[cat,dog,pig,set]</span>  <span class="comment"># 测 Set 集合 行内写法</span></span><br><span class="line">  <span class="comment"># 数组或集合的普通写法</span></span><br><span class="line"><span class="comment">#  strings:</span></span><br><span class="line"><span class="comment">#    - cat</span></span><br><span class="line"><span class="comment">#    - dog</span></span><br><span class="line"><span class="comment">#    - pig</span></span><br></pre></td></tr></table></figure><h4 id="Component-Value"><a href="#Component-Value" class="headerlink" title="Component(@Value)"></a>Component(@Value)</h4><blockquote><p>其他组件如：@Controller、@Service 也可以和 @Value 一起用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;fatal.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;fatal.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Component-ConfigurationProperties"><a href="#Component-ConfigurationProperties" class="headerlink" title="Component(@ConfigurationProperties)"></a>Component(@ConfigurationProperties)</h4><blockquote><p>一定要加上注解 @Component</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>: 用于配置文件与配置类数据映射</span></span><br><span class="line"><span class="comment"> * prefix: 与配置文件中`prefix`值下的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试对象、Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Fatal6 fatal6;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试集合（List，Set）、数组数据封装</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] strings;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal2;</span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal1;</span><br><span class="line"><span class="keyword">import</span> com.fatal.config.Fatal3;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Fatal1 fatal1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Fatal2 fatal2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentProperty1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"注解"</span>,<span class="string">"@Value"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, fatal1.getName());</span><br><span class="line">        map.put(<span class="string">"age"</span>, fatal1.getAge());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentProperty2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"注解"</span>,<span class="string">"@ConfigurationProperties"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>, fatal2.getName());</span><br><span class="line">        map.put(<span class="string">"age"</span>, fatal2.getAge());</span><br><span class="line">        map.put(<span class="string">"fatal6"</span>, fatal2.getFatal6());      <span class="comment">// 对象</span></span><br><span class="line">        map.put(<span class="string">"map"</span>, fatal2.getMap());      <span class="comment">// Map</span></span><br><span class="line">        map.put(<span class="string">"strings"</span>, fatal2.getStrings());   <span class="comment">// 数组</span></span><br><span class="line">        map.put(<span class="string">"list"</span>, fatal2.getList());    <span class="comment">// List</span></span><br><span class="line">        map.put(<span class="string">"set"</span>, fatal2.getList());    <span class="comment">// Set</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1、-Value获取值和-ConfigurationProperties获取值（方式）比较"><a href="#3-1-1、-Value获取值和-ConfigurationProperties获取值（方式）比较" class="headerlink" title="3.1.1、@Value获取值和@ConfigurationProperties获取值（方式）比较"></a>3.1.1、@Value获取值和@ConfigurationProperties获取值（方式）比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL（spring表达式语言）</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>松散绑定（松散语法）</strong>：比如实体类有个属性叫 <strong>lastName</strong>，那么在配置文件中 <strong>lastName</strong> 、<strong>last-name</strong> 两种写法都是正确的。</p><p><strong>复杂类型封装</strong>：属性又是一个实体，多层嵌套（复用）</p><p><strong>注意</strong>：不管配置文件是 <strong>yml</strong> 还是 <strong>properties</strong> 他们 <strong>都</strong> 能获取到值；</p><h4 id="3-1-2、使用场景"><a href="#3-1-2、使用场景" class="headerlink" title="3.1.2、使用场景"></a>3.1.2、使用场景</h4><ol><li><p>@Value</p><p>我们只是在某个业务逻辑中需要获取配置文件中的<strong>某项值</strong>，使用<strong>@Value</strong>；</p></li><li><p>@ConfigurationProperties</p><p>我们专门编写了一个<strong>javaBean</strong>来和<strong>配置文件</strong>进行<strong>映射</strong>，我们就直接使用<strong>@ConfigurationProperties</strong>；</p></li></ol><h3 id="3-2、配置文件注入值数据校验"><a href="#3-2、配置文件注入值数据校验" class="headerlink" title="3.2、配置文件注入值数据校验"></a>3.2、配置文件注入值数据校验</h3><blockquote><p>以全局为例，校验的话对自定义和全局都有效。</p></blockquote><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义属性值</span></span><br><span class="line"><span class="attr">fatal:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">fatal</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  email:</span> <span class="number">634136073</span><span class="string">@qq.com</span>  <span class="comment"># 用于测试值注入校验</span></span><br></pre></td></tr></table></figure><h4 id="Component-ConfigurationProperties-Validated"><a href="#Component-ConfigurationProperties-Validated" class="headerlink" title="Component(@ConfigurationProperties+@Validated)"></a>Component(@ConfigurationProperties+@Validated)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Validated</span>     <span class="comment">// 开启校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Fatal3 fatal3;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getPropertyValue3"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">showComponentPropertyWithValidated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">"注解"</span>,<span class="string">"@ConfigurationProperties + @Validated"</span>);</span><br><span class="line">      map.put(<span class="string">"name"</span>, fatal3.getName());</span><br><span class="line">      map.put(<span class="string">"age"</span>, fatal3.getAge());</span><br><span class="line">      map.put(<span class="string">"email"</span>, fatal3.getEmail());</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>在配置类上加上注解 <strong>@Validated</strong> ，然后在属性上加上 <strong>校验注解</strong> （javax.validation.constraints.*）。如果校验失败，项目启动时就会报错，例如邮箱 <strong>格式不正确</strong> 的话，就会出现如下 <strong>报错</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Binding</span> <span class="string">to</span> <span class="string">target</span> <span class="string">org.springframework.boot.context.properties.bind.BindException:</span> <span class="string">Failed</span> <span class="string">to</span> <span class="string">bind</span> <span class="string">properties</span> <span class="string">under</span> <span class="string">'fatal'</span> <span class="string">to</span> <span class="string">com.fatal.config.Fatal3</span> <span class="attr">failed:</span></span><br><span class="line"><span class="attr">Property:</span> <span class="string">fatal.email</span></span><br><span class="line"><span class="attr">Value:</span> <span class="number">63</span></span><br><span class="line"><span class="attr">Origin:</span> <span class="string">class</span> <span class="string">path</span> <span class="string">resource</span> <span class="string">[application.yml]:5:10</span></span><br><span class="line"><span class="attr">Reason:</span> <span class="string">不是一个合法的电子邮件地址</span></span><br></pre></td></tr></table></figure><h3 id="3-3、自定义配置文件值注入"><a href="#3-3、自定义配置文件值注入" class="headerlink" title="3.3、自定义配置文件值注入"></a>3.3、自定义配置文件值注入</h3><p>上面的配置文件值注入我们都是把配置数据放在 <strong>application.yml</strong> 中，但是一般情况下，我们都不希望把自定义数据放到  <strong>application.yml</strong> 中（这样数据较乱），这时候我们可以自定义配置文件，如：test.properties；</p><h4 id="test-properties"><a href="#test-properties" class="headerlink" title="test.properties"></a>test.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal.name=fatal</span><br><span class="line">fatal.age=20</span><br></pre></td></tr></table></figure><h4 id="Component-PropertySource"><a href="#Component-PropertySource" class="headerlink" title="Component(@PropertySource)"></a>Component(@PropertySource)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Fatal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/9/20 0020 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"fatal"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:test.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fatal4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h4><p>用 <strong>application.yml</strong> 或者 <strong>application.properties</strong> 来给配置类注入值，不需要我们指定配置文件的位置，<strong>SpringBoot</strong> 默认会加载；而当我们使用<strong>自定义配置文件</strong>的时候，我们需要告诉SpringBoot该配置类与哪个配置文件进行数据映射，这时候我们可以用注解 <strong>@PropertySource()</strong> 注解，并用其属性 <strong>value</strong> 指定一个（或多个）配置文件。（需要 <strong>注意</strong> 的是，classpath 与 文件路径中间不能有空格）</p><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="4-1、使用随机数"><a href="#4-1、使用随机数" class="headerlink" title="4.1、使用随机数"></a>4.1、使用随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.uuid&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、属性配置占位符"><a href="#4-2、属性配置占位符" class="headerlink" title="4.2、属性配置占位符"></a>4.2、属性配置占位符</h3><p>可以在配置文件中引用前面配置过的属性</p><p><strong>${fatal.age:默认值}</strong> 来指定找不到属性时的默认值</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/1537448921353.png" alt="1537448921353"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/1537449074485.png" alt="1537449074485"></p><h2 id="5、多环境化配置（两种方式）"><a href="#5、多环境化配置（两种方式）" class="headerlink" title="5、多环境化配置（两种方式）"></a>5、多环境化配置（两种方式）</h2><p>在真实的应用中，常常会有多个环境（<strong>如：开发，测试，生产等</strong>），不同的环境数据库连接都不一样，这个时候就需要用到<code>spring.profile.active</code> 的强大功能了，它的格式为 <code>application-{profile}.yml/properties</code>，这里的 <code>application</code> 为前缀不能改，<code>{profile}</code> 是我们自己定义的。</p><h3 id="5-1、多个文件写"><a href="#5-1、多个文件写" class="headerlink" title="5.1、多个文件写"></a>5.1、多个文件写</h3><blockquote><p>application-dev.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/dev</span><br></pre></td></tr></table></figure><blockquote><p>application-test.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/test</span><br></pre></td></tr></table></figure><blockquote><p>application-prod.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/prod</span><br></pre></td></tr></table></figure><p>在 <code>application.properties</code> 配置文件中写入 <code>spring.profiles.active=dev</code>，这个时候我们再次访问 <a href="http://localhost:8080/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8080/getPropertyValue1</a> 就没用处了，因为我们设置了它的<code>context-path=/dev</code>，所以新的路径就是 <a href="http://localhost:8080/dev/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8080/dev/getPropertyValue1</a> ，<strong>由此可以看出来我们激活不同的配置读取的属性值是不一样的</strong></p><h3 id="5-2、yml支持多文档块方式（同一文件写）"><a href="#5-2、yml支持多文档块方式（同一文件写）" class="headerlink" title="5.2、yml支持多文档块方式（同一文件写）"></a>5.2、yml支持多文档块方式（同一文件写）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h3 id="5-3、外部命令引导"><a href="#5-3、外部命令引导" class="headerlink" title="5.3、外部命令引导"></a>5.3、外部命令引导</h3><p>前面两种方式都是基于配置文件层面的，那么有没有办法外部引导呢，假设这样的场景，我们对已经开发完成的代码打包发布，期间在测试环境测试通过了，那么即可发布上生产，这个时候是修改<code>application.properties</code>的配置方便还是直接在<strong>命令参数配置</strong>方便呢，毫无疑问是后者更有说服力。<strong>默认情况下，<code>SpringApplication</code> 会将命令行选项参数（即：––property，如––server.port=9000）添加到Environment，命令行属性始终优先于其他属性源。</strong></p><blockquote><p>如何测试？</p></blockquote><ul><li><p>以 <strong>yml</strong> 的多文档块方式为例</p></li><li><p>进入到项目目录，此处以我本地目录为主：<code>E:/java/IdeaProjects2p0-learni/springboot2ng/chapter2</code></p></li><li><p>然后打开 cmd 程序，不会在当前目录打开 cmd 的请自行百度，输入：<code>mvn package</code></p></li><li><p>打包完毕后进入到：<code>E:/java/IdeaProjects2p0-learni/springboot2ng/chapter2/target</code> 目录中去，我们可以发现一个名为<strong>chapter2-0.0.1-SNAPSHOT.jar</strong> 的包</p></li><li><p>接着在target 打开 cmd 程序，输入：<code>java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev --fatal.age=32</code>。仔细观察<strong>spring.profiles.active=dev 、fatal.age=32</strong> 这俩配置的键值是不是似曾相识，对，它表示用命令行自定义配置属性，它会<strong>覆盖</strong>掉配置文件中的属性值（不认识的请从开头认真阅读）</p></li><li><p>最后输入测试地址：<a href="http://localhost:8083/getPropertyValue1" target="_blank" rel="noopener">http://localhost:8083/getPropertyValue1</a> 我们可以发现返回的 <strong>JSON</strong> 和下面相似就表示正确</p></li></ul><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图184307026069103.png" alt="360截图184307026069103"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17321123108108122.png" alt="360截图17321123108108122"></p><h2 id="6、配置文件的加载位置"><a href="#6、配置文件的加载位置" class="headerlink" title="6、配置文件的加载位置"></a>6、配置文件的加载位置</h2><p>​        <strong>SpringBoot</strong> 启动会扫描以下位置的 <strong>application.properties</strong> 或 <strong>application.yml</strong> 文件作为 <strong>SpringBoot</strong> 的 <strong>默认</strong> 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-file:/config/      # 当前项目的根目录的config文件夹下</span><br><span class="line">-file:/         # 当前项目的根目录下</span><br><span class="line">-classpath:/config/   # 类路径的config文件夹下  resources/config/</span><br><span class="line">-classpath:/      # 类路径下    resources/</span><br></pre></td></tr></table></figure><p>==<strong>注意</strong>==：当项目为多模块项目的时候，<strong>file</strong> 指的是 <strong>父工程</strong> 的根目录下，放子工程根目录没用。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>（上到下）优先级由高到底，<strong>相同的配置项</strong>，高优先级的配置会 <strong>覆盖</strong> 低优先级的配置；</li><li>如果出现 <strong>不同的配置项</strong>，会形成 <strong>互补配置</strong> 共同起作用；</li></ol><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>我们还可以通过 <strong>spring.config.additional-location（配置项）</strong> 来改变默认配置文件的加载位置</p><p>​        <strong>项目打包好以后</strong>，我们可以使用 <strong>命令行参数</strong> 的形式，启动项目的时候来指定配置文件的加载位置；<strong>新配置文件</strong> 与 <strong>默认加载的这些配置文件</strong> ==共同作用形成== <strong>互补配置</strong></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="1-classpath-config-覆盖-classpath"><a href="#1-classpath-config-覆盖-classpath" class="headerlink" title="1. classpath:/config/ 覆盖 classpath:/"></a>1. classpath:/config/ 覆盖 classpath:/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图177509199013083.png" alt="360截图177509199013083"></p><h4 id="2-file-覆盖-classpath-config"><a href="#2-file-覆盖-classpath-config" class="headerlink" title="2. file:/ 覆盖 classpath:/config/"></a>2. file:/ 覆盖 classpath:/config/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18141220336439.png" alt="360截图177509199013083"></p><h4 id="3-file-config-覆盖-file"><a href="#3-file-config-覆盖-file" class="headerlink" title="3. file:/config/ 覆盖 file:/"></a>3. file:/config/ 覆盖 file:/</h4><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17140309184322.png" alt="360截图177509199013083"></p><h4 id="4-外部配置文件"><a href="#4-外部配置文件" class="headerlink" title="4. 外部配置文件"></a>4. 外部配置文件</h4><p>D:\application.properties</p><blockquote><p>命令行加参数 <strong>==spring.config.additional-location==</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.config.additional-location=D:\application.properties</span><br></pre></td></tr></table></figure><p><strong>注</strong>：如果使用 <strong>spring.config.location</strong> 的话，那么默认包下的全局配置文件无效</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>编辑 <strong>D:\application.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal.name=outward/properties</span><br></pre></td></tr></table></figure></li><li><p>打包</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17750921105128117.png" alt="360截图177509199013083"></p></li><li><p>运行</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图16241224101104132.png" alt="360截图177509199013083"></p></li><li><p>页面</p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18720116111119139.png" alt="360截图177509199013083"></p></li></ol><p>补充：<strong>命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar chapter2-0.0.1-SNAPSHOT.jar --server.port=9090</span><br></pre></td></tr></table></figure><p>多个配置用空格分开； <code>--配置项=值</code></p><h2 id="7、配置加载顺序-覆盖、互补"><a href="#7、配置加载顺序-覆盖、互补" class="headerlink" title="7、配置加载顺序(覆盖、互补)"></a>7、配置加载顺序(覆盖、互补)</h2><blockquote><p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置==覆盖==低优先级的配置，所有的配置会形成==互补==配置</strong></p></blockquote><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><p>在 spring.profiles.active指定一个环境后，属性的优先级如下：</p><p><strong>由jar包外向jar包内进行寻找；</strong></p><blockquote><p>顺序为：包外的config下的优先级最高（在config文件中也是优先profile）</p></blockquote><p><strong>优先加载带profile</strong></p><ol start="2"><li><p><strong>jar 包外部 </strong>的 <strong>application-{profile}.properties</strong> 或 <strong>application.yml(带spring.profile)</strong> 配置文件</p></li><li><p><strong>jar 包内部</strong> 的 <strong>application-{profile}.properties</strong> 或 <strong>application.yml(带spring.profile)</strong> 配置文件</p></li></ol><p><strong>再来加载不带profile</strong></p><ol start="4"><li><p><strong>jar 包外部</strong> 的 <strong>application.properties</strong> 或 <strong>application.yml(不带spring.profile)</strong> 配置文件</p></li><li><p><strong>jar 包内部</strong> 的 <strong>application.properties</strong>或 <strong>application.yml(不带spring.profile)</strong> 配置文件</p></li></ol><p>所有支持的配置加载来源：参考<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">官方文档</a></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ol><li>打包</li><li>创建两个配置文件，分别为 <strong>application.properties</strong> 和  <strong>application-dev.properties</strong></li><li>运行（java -jar chapter2-0.0.1-SNAPSHOT.jar）</li></ol><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17491109327368.png" alt="360截图177509199013083"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图18180712101111141.png" alt="360截图177509199013083"></p><p><img src="/images/SpringBoot2/SpringBoot配置详解/360截图17750924105153101.png" alt="360截图177509199013083"></p><p>包内外的 <code>application-dev.properties</code> 如果配置项不同，则形成互补。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p><strong>@ConfigurationProperties</strong>：用于 <strong>配置文件</strong> 与 <strong>配置类</strong> 数据映射；</p><p>其属性 <strong>prefix</strong>：与配置文件中<code>prefix</code>下的所有属性进行 一 一 映射；</p></li><li><p>在某个业务逻辑中需要获取配置文件中的 <strong>某项值</strong>，使用<strong>@Value</strong>；编写了一个<strong><code>javaBean</code></strong>来和<strong>配置文件</strong>进行<strong>映射</strong>，我们就直接使用 <strong><code>@ConfigurationProperties</code></strong>；</p></li><li><p><strong><code>@PropertySource</code></strong> 加载指定配置文件；</p></li><li><p><strong>Controller</strong> 和 <strong>Component</strong> 都是Spring 容器中的组件；</p></li><li><p>在项目根目录下，<code>mvn package</code>可以打包，在<strong>生成包所在目录</strong>下，<code>java -jar chapter2-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev --fatal.age=32</code>可以自定义参数运行包</p></li></ol><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter2" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter2</a></p><h4 id="学习-唐亚峰-，方志朋-前辈的经验"><a href="#学习-唐亚峰-，方志朋-前辈的经验" class="headerlink" title="学习 唐亚峰 ，方志朋 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> ，<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2 | 第一篇：第一个SpringBoot工程</title>
      <link href="/2018/08/19/SpringBoot2%20%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%B7%A5%E7%A8%8B/"/>
      <url>/2018/08/19/SpringBoot2%20%20%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>SpringBoot</code> 是为了简化 <code>Spring</code> 应用的创建、运行、调试、部署等一系列问题而诞生的产物，<strong>自动装配的特性让我们可以更好的关注业务本身而不是外部的XML配置，我们只需遵循规范，引入相关的依赖就可以轻易的搭建出一个 WEB 工程</strong></p></blockquote><p>未接触 <code>SpringBoot</code> 之前，搭建一个普通的 <code>WEB</code> 工程往往需要花费30分钟左右，如果遇到点奇葩的问题耽搁的时间会更长一点，但自从用了<code>SpringBoot</code> 后，真正体会到什么叫分分钟搭建一个<code>WEB</code>，让我拥有更多的时间跟我的小伙伴们唠嗑了。使用 <code>SpringBoot</code> 后发现一切是如此的简单（<strong>还记得读书那会被JAR包，xml支配的恐惧吗，如今都可以说 good bye</strong>）</p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/5.png" alt="5"></p><h2 id="设计的目标"><a href="#设计的目标" class="headerlink" title="设计的目标"></a>设计的目标</h2><ul><li>为所有使用 <code>Spring</code> 的开发者提供一个更简单，快速的入门体验</li><li>提供一些常见的功能、如监控、WEB容器，健康，安全等功能</li><li>干掉XML，遵循规范，开箱即用</li></ul><h2 id="环境-版本一览："><a href="#环境-版本一览：" class="headerlink" title="环境/版本一览："></a>环境/版本一览：</h2><ul><li>开发工具：Intellij IDEA 2018.2.2</li><li>springboot： <strong>2.0.5.RELEASE</strong></li><li>jdk：1.8.0_171</li><li>maven：3.3.9</li></ul><h2 id="开始搭建："><a href="#开始搭建：" class="headerlink" title="开始搭建："></a>开始搭建：</h2><h3 id="1、点击File-gt-Project"><a href="#1、点击File-gt-Project" class="headerlink" title="1、点击File -&gt; Project"></a>1、点击<strong>File -&gt; Project</strong></h3><p>到这一步选择的时候，如图中选项的是<code>Spring Initializr(官方的构建插件，需要联网)</code>，第二个是自己选择<code>Maven</code>构建，为了更好的适合初学者，我们将在本章用插件构建</p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/123124235151325213.jpg" alt="123124235151325213"></p><h3 id="2、填写项目基本信息"><a href="#2、填写项目基本信息" class="headerlink" title="2、填写项目基本信息"></a>2、填写项目基本信息</h3><ul><li><strong>Group：</strong> 组织ID，一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为 <code>org、com、cn</code>等等，其中 <strong>org为非营利组织，com为商业组织</strong>。如阿里、淘宝（com.alibaba/com.taobao）</li><li><strong>Artifact:</strong> 唯一标识符，一般是项目名称</li></ul><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/1234213512336516146.jpg" alt="1234213512336516146"></p><h3 id="3、选择依赖"><a href="#3、选择依赖" class="headerlink" title="3、选择依赖"></a>3、选择依赖</h3><p><strong>Spring Initializr</strong> 为我们提供了很多的选项，不同的选项有不同的作用，在初期我们只需要依赖<strong>Web</strong> 就可以了，选择好依赖包之后点击<strong>Next -&gt; Finish</strong></p><p><img src="/images/SpringBoot2/第一个SpringBoot工程/images/35123521351235.jpg" alt="35123521351235"></p><h3 id="4、目录结果"><a href="#4、目录结果" class="headerlink" title="4、目录结果"></a>4、目录结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">    -main</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">                #主函数，启动类，运行它如运行了 Tomcat、Jetty、Undertow 等容器</span><br><span class="line">                -SpringbootApplication  </span><br><span class="line">        -resouces</span><br><span class="line">            #存放静态资源 js/css/images 等</span><br><span class="line">            - statics</span><br><span class="line">            #存放 html 模板文件</span><br><span class="line">            - templates</span><br><span class="line">            #主要的配置文件，SpringBoot启动时候会自动加载application.yml/application.properties      </span><br><span class="line">            - application.yml</span><br><span class="line">    #测试文件存放目录       </span><br><span class="line">    -test</span><br><span class="line"> # pom.xml 文件是Maven构建的基础，里面包含了我们所依赖JAR和Plugin的信息</span><br><span class="line">- pom</span><br></pre></td></tr></table></figure><h4 id="4-1、pom-xml"><a href="#4-1、pom-xml" class="headerlink" title="4.1、pom.xml"></a>4.1、pom.xml</h4><p>因为使用了 <strong>Spring Initializr</strong> 插件，所以如下的配置都不需要我们自己去写啦，需要注意的是版本要选择 <strong>RELEASE</strong> ，稳定版本BUG少</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fatal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>我用的第一个SpringBoot工程<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发中请记得版本一定要选择 RELEASE 哦 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认就内嵌了Tomcat 容器，如需要更换容器也极其简单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试包,当我们使用 mvn package 的时候该包并不会被打入,因为它的生命周期只在 test 之内--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它的依赖可以参考：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">官方文档</a></p><h4 id="4-2、主函数入口"><a href="#4-2、主函数入口" class="headerlink" title="4.2、主函数入口"></a>4.2、主函数入口</h4><p><strong>注意事项：</strong> 一个项目中切记不要出现多个 <code>main</code> 函数，否在在打包的时候 <code>spring-boot-maven-plugin</code>将找不到主函数（<strong>主动指定打包主函数入口除外…</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其中 <span class="doctag">@RestController</span> 等同于 （<span class="doctag">@Controller</span> 与 <span class="doctag">@ResponseBody</span>）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Fatal!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">(ApplicationContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"来看看我们 SpringBoot 默认提供的 Bean: "</span>);</span><br><span class="line">            String[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="line">            Arrays.sort(beanNames);</span><br><span class="line">            Arrays.stream(beanNames).forEach(System.out::println);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、启动应用"><a href="#5、启动应用" class="headerlink" title="5、启动应用"></a>5、启动应用</h3><p>三种方式</p><ul><li>运行 main 方法</li><li>在 Terminal 中，进入项目根目录，输入 <code>mvn spring-boot:run</code> 即可</li><li>在服务器部署运行时，先 <code>mvn install</code> 打成 jar 包，然后 <code>java -jar xxx.jar</code>  来启动应用</li></ul><h3 id="6、全局配置文件（application-yml）"><a href="#6、全局配置文件（application-yml）" class="headerlink" title="6、全局配置文件（application.yml）"></a>6、全局配置文件（application.yml）</h3><p>从启动日志中可以发现，<code>SpringBoot</code> 默认的端口是 8080 ，那么如果端口被占用了怎么办呢？不要慌，问题不大，配置文件分分钟解决你的困扰…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-9-19 21:23:11.235  INFO 11184 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure><p>修改默认配置 yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/chapter1</span></span><br></pre></td></tr></table></figure><p>再次启动即可~~</p><h3 id="7、测试（RESTful）"><a href="#7、测试（RESTful）" class="headerlink" title="7、测试（RESTful）"></a>7、测试（RESTful）</h3><p>本次测试采用 <code>junit</code> 进行，当然也可以启动项目后直接访问 <code>http://localhost:9090/chapter/demo1</code>进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fatal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.LocalServerPort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebEnvironment: web环境</span></span><br><span class="line"><span class="comment"> *  1.MOCK: 提供一个Mock的Servlet环境，内置的Servlet容器并没有真实的启动，主要搭配使用<span class="doctag">@AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="comment"> *  2.RANDOM_PORT: 提供一个真实的Servlet环境，也就是说会启动内置容器，然后使用的是随机端口</span></span><br><span class="line"><span class="comment"> *  3.DEFINED_PORT: 这个配置也是提供一个真实的Servlet环境，使用的默认的端口，如果没有配置就是8080</span></span><br><span class="line"><span class="comment"> *  4.NONE: 这是个神奇的配置，跟Mock一样也不提供真实的Servlet环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LocalServerPort</span> 必须提供真实的Servlet环境，RANDOM_PORT 或者 DEFINED_PORT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL base;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 RestFul 接口的模板类，内部封装了 RestTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = <span class="keyword">new</span> URL(<span class="string">"http://localhost:"</span> + port + <span class="string">"/chapter1/demo1/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(), String.class);</span><br><span class="line">        Assert.assertEquals(response.getBody(), <span class="string">"Hello Fatal!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h2><h3 id="自定义Banner"><a href="#自定义Banner" class="headerlink" title="自定义Banner"></a>自定义Banner</h3><p><code>SpringBoot</code> 启动的时候我们可以看到如下内容，这一块其实是可以自定义的哦，而且在 2.X 版本中，它支持的格式从文本扩展到<strong>banner.txt、banner.jpg、banner.gif、banner.jpeg</strong> 等等，只需要在 <strong>resouces</strong> 目录下添加指定命名的文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.5.RELEASE)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>SpringBoot</code>的知识已经有前辈在我们之前探索了。比较喜欢的博主有：<a href="https://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰 | Battcn</a>、<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋的专栏</a>、<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>、<a href="http://www.ityouknow.com/" target="_blank" rel="noopener">纯洁的微笑</a>。对这门技术感兴趣的可以去他们的博客逛逛。谢谢他们的分享~~</p><p>以上文章是我用来学习的<code>Demo</code>，都是基于 <code>SpringBoot2.x</code> 版本。</p><p><strong>源码地址:</strong> <a href="https://github.com/ynfatal/springboot2-learning/tree/master/chapter1" target="_blank" rel="noopener">https://github.com/ynfatal/springboot2-learning/tree/master/chapter1</a></p><h4 id="学习-唐亚峰-，方志朋-前辈的经验"><a href="#学习-唐亚峰-，方志朋-前辈的经验" class="headerlink" title="学习 唐亚峰 ，方志朋 前辈的经验"></a>学习 <a href="http://blog.battcn.com/" target="_blank" rel="noopener">唐亚峰</a> ，<a href="https://blog.csdn.net/forezp" target="_blank" rel="noopener">方志朋</a> 前辈的经验</h4>]]></content>
      
      
      <categories>
          
          <category> SpringBoot2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
